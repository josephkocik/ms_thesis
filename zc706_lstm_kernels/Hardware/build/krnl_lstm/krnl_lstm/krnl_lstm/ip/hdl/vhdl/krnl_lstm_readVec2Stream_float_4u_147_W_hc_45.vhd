-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_45_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_45_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010000101100100000000", 
    1 => "10111101000000111001011111111101", 
    2 => "10111101001010000011011010100111", 
    3 => "00111101000010101111000000000011", 
    4 => "10111101000101101110000010001011", 
    5 => "00111110111001101101101001000111", 
    6 => "10111101101100000110011100011100", 
    7 => "10111101001110000010110101100110", 
    8 => "00111101000011101001010110100010", 
    9 => "10111101000111100001011000011110", 
    10 => "10111100101111010011100100001111", 
    11 => "10111101001001110111101101001100", 
    12 => "00111101101001010110010101110100", 
    13 => "00111100101100010111111010111010", 
    14 => "10111110111000011011101000100011", 
    15 => "10111100101111010010011000001001", 
    16 => "00111011010101111111110110100001", 
    17 => "10111100110101001011110101011100", 
    18 => "10111100111101001011001101100011", 
    19 => "10111101000101000101100111001011", 
    20 => "10111100101000011110111110100100", 
    21 => "00111101001000001100101101010010", 
    22 => "00111101010011110001001100110001", 
    23 => "10111101000110000101010000011010", 
    24 => "00111101000001111111110011101100", 
    25 => "00111101001001111110001111001010", 
    26 => "10111101000100111110100000011001", 
    27 => "10111101000010110101100100011111", 
    28 => "00111100111110101000010101100101", 
    29 => "10111110101000010010110000101110", 
    30 => "10111101000110111100110010110101", 
    31 => "00111100110011000011000100100010", 
    32 => "10111101000011101010110101100111", 
    33 => "00111100111000011001101111100010", 
    34 => "10111101001000111011100010010111", 
    35 => "00111100100010000110111111110000", 
    36 => "10111110011001000100001100010110", 
    37 => "10111100110110101010111111100011", 
    38 => "00111101000101011001000000111111", 
    39 => "00111100111011010011110001011011", 
    40 => "10111101001001111110000000100000", 
    41 => "00111101000111110110101001010101", 
    42 => "00111100110111001001101111111000", 
    43 => "00111101001011000101111010011101", 
    44 => "10111101000000010100001000011101", 
    45 => "00111100110100011101000011001110", 
    46 => "10111101000010111111101110001101", 
    47 => "00111101000000101111011011001000", 
    48 => "00111101000001000010111100010100", 
    49 => "10111100101000100001011011011000", 
    50 => "10111110100100100110101101101001", 
    51 => "00111101100100010111111100111111", 
    52 => "00111100111001000001001001011110", 
    53 => "10111101000001000101000010000001", 
    54 => "10111101101001000101100001001111", 
    55 => "10111101001001111001010010100110", 
    56 => "10111100111010000101101101011111", 
    57 => "00111100111001111011011111100010", 
    58 => "10111101000100111110010111000010", 
    59 => "10111100111010011111010110011111", 
    60 => "00111101001100010100100101111110", 
    61 => "10111101000100011001110110000111", 
    62 => "00111101000100010110000110101000", 
    63 => "00111101010001011000011110111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_45 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_45 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_45_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_45_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_45_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


