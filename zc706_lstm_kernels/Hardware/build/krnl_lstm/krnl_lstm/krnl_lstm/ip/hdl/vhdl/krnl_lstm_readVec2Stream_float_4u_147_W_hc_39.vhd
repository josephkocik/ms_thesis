-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_39_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_39_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001010100001001111000", 
    1 => "10111100111010101011011101011000", 
    2 => "10111101000000011101111010000001", 
    3 => "00111100111100011101010000111001", 
    4 => "10111101000110101110000001111110", 
    5 => "00111110111110111100000000111111", 
    6 => "10111100101110010010100011111000", 
    7 => "10111101001101010100111100010011", 
    8 => "00111101000110000010000011001100", 
    9 => "10111101000111111001100110011111", 
    10 => "10111100110111011010101100111000", 
    11 => "10111101001000110001111011001100", 
    12 => "10111101111101111111001011000001", 
    13 => "00111100101001100111110011100010", 
    14 => "10111111010000001001010100110100", 
    15 => "10111100100010111101100111100011", 
    16 => "10111011011000111011110100010000", 
    17 => "10111100101100001110110100010111", 
    18 => "10111100111101000111011100101101", 
    19 => "10111101000001110111100110011010", 
    20 => "10111100010111101101000000110011", 
    21 => "00111100010001011100111100011101", 
    22 => "00111100011100010000011010111110", 
    23 => "00111100110101001100010100010101", 
    24 => "00111101000010111001000011101010", 
    25 => "00111100111001110100011011111011", 
    26 => "10111101000001100000010000111100", 
    27 => "00111100101000110101110000110100", 
    28 => "00111100110110101111101100110100", 
    29 => "10111101110011000111011011100001", 
    30 => "10111101000110101011010011010000", 
    31 => "00111100101010000110011001101110", 
    32 => "00111100111110111101111110001100", 
    33 => "00111100101111000011110011011010", 
    34 => "10111101001001000101011001110000", 
    35 => "00111100101110011110100000101010", 
    36 => "10111110000111001001011011101100", 
    37 => "10111100101101111100001101101111", 
    38 => "00111101000001111100101001101111", 
    39 => "10111101010101001101101111111011", 
    40 => "00111100111011101110110010100011", 
    41 => "00111101000111000110100001000001", 
    42 => "00111100110010110001110110001011", 
    43 => "00111101001011010011110000101000", 
    44 => "10111100111101000000010101011011", 
    45 => "00111100110011000001000011011100", 
    46 => "10111101000010010111001110100000", 
    47 => "00111100110101010010101001010101", 
    48 => "00111101000011011110110100010001", 
    49 => "10111100111000010101110011110111", 
    50 => "10111110101000010111011001001000", 
    51 => "00111101100001001000101110101110", 
    52 => "00111100110001011001011000000101", 
    53 => "10111100110111001001001100111110", 
    54 => "10111101101001000011011000101110", 
    55 => "10111101001000111010000110011110", 
    56 => "10111100110101100000011101101111", 
    57 => "00111101000011011001001111111001", 
    58 => "10111101000101010000010101101000", 
    59 => "00111101000010010100101110111100", 
    60 => "00111101001100011000010110110001", 
    61 => "10111101000010001001000001000010", 
    62 => "00111101000100000111110000011000", 
    63 => "00111101010000001000010101100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_39 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_39 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_39_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_39_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_39_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


