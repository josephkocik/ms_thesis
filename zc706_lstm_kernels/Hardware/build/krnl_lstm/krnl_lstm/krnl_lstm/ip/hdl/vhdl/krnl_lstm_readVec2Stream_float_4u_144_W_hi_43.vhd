-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_43_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_43_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000110000001111100111110", 
    1 => "00111101001101111111111111001111", 
    2 => "00111101000100100000111110011101", 
    3 => "00111101000010011000010110001011", 
    4 => "00111101011001111010110010000110", 
    5 => "00111110000100101000011001110011", 
    6 => "00111101111101001000111110000101", 
    7 => "00111101100011000111011000011110", 
    8 => "00111101010011101101110110111111", 
    9 => "00111101011110011000110110010001", 
    10 => "00111101000101110000001001111001", 
    11 => "00111101000100011111011011011110", 
    12 => "10111100011010001110111000011011", 
    13 => "00111101001101010110101100000111", 
    14 => "00111110100011001111110010110011", 
    15 => "00111111010101010100111001000100", 
    16 => "00111111010110000101001111110100", 
    17 => "00111101000101110110010101010111", 
    18 => "10111110000111111010001111010101", 
    19 => "00111101001000011010011101111101", 
    20 => "00111111010110000001111100111101", 
    21 => "00111101000111111010010110100111", 
    22 => "10111101010100011010111011001000", 
    23 => "00111100110110111100000001101011", 
    24 => "00111101010011010011100000100011", 
    25 => "00111110010111100010101100011100", 
    26 => "00111101000111110011100111011011", 
    27 => "00111101000111110110000011110101", 
    28 => "00111101000111011111001000110011", 
    29 => "00111110111001110011001011010010", 
    30 => "00111101010010010001100000110101", 
    31 => "00111101000101011110110000101011", 
    32 => "00111011100000011001111100100100", 
    33 => "00111101000101010010010000110011", 
    34 => "00111101011111011001110111000110", 
    35 => "00111101001101000001000000101110", 
    36 => "00111110101110110010010101100001", 
    37 => "00111101000101000000100000001111", 
    38 => "00111101001000111100000100101110", 
    39 => "00111100011010011001110011000100", 
    40 => "00111100011010101000000101011010", 
    41 => "00111101011000110110101000010001", 
    42 => "00111101001010001001001100010111", 
    43 => "00111101100000110000110001000001", 
    44 => "00111101010010110110011101010111", 
    45 => "00111101000000011000010001100001", 
    46 => "00111101011001111011010000100000", 
    47 => "00111101010001101101000001100101", 
    48 => "00111101000001111011011101000110", 
    49 => "00111101001010001010010111111000", 
    50 => "10111100000110111011011100110001", 
    51 => "00111101110111111001000100010111", 
    52 => "00111101000011100111111110111110", 
    53 => "00111101010111010111101110010111", 
    54 => "00111111010011000111001000001100", 
    55 => "00111101000111011110001111111101", 
    56 => "00111101010000100110101011110000", 
    57 => "00111101000110110111011101010000", 
    58 => "00111101011100001011000100111010", 
    59 => "00111100011001000101011011100010", 
    60 => "00111101011110001111111011111100", 
    61 => "00111101001100101000000000010100", 
    62 => "00111101000110011100110001110111", 
    63 => "00111101011110101010001111100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_43 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_43 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_43_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_43_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_43_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


