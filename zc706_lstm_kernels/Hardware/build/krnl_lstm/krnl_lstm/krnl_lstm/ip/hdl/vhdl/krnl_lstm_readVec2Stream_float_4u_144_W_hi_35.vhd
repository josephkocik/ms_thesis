-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_35_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_35_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000101111000111001001", 
    1 => "10111100111101110011101011111101", 
    2 => "10111101010001110010101101100110", 
    3 => "10111100111110010110110011110110", 
    4 => "10111101010001100100000010001000", 
    5 => "00111110010011010010010100000111", 
    6 => "00111101100111111000110011001110", 
    7 => "10111101010100010000110011011110", 
    8 => "10111100100100011010111111100000", 
    9 => "10111101010011000101100001011010", 
    10 => "00111100110100010001011011011111", 
    11 => "10111100111101111110110011011010", 
    12 => "10111110110001011001010010101101", 
    13 => "10111101000110001010110000100011", 
    14 => "00111110100111101000001100110010", 
    15 => "00111111011011110011001001100111", 
    16 => "00111111011010111010110101000010", 
    17 => "10111101000001111111100000100111", 
    18 => "00111111101111001111111001111010", 
    19 => "10111101000011010101100101001111", 
    20 => "00111111011110010110001111101111", 
    21 => "10111101010000010000111001101111", 
    22 => "10111110101000000001011101011001", 
    23 => "10111100110110100010010100011010", 
    24 => "10111101001101111010100000011110", 
    25 => "00111111000111010110110111110100", 
    26 => "10111101000101010100000000000011", 
    27 => "10111100110101011100000101101111", 
    28 => "10111101000001000100110110010001", 
    29 => "00111110110000001011000111111010", 
    30 => "10111101000111000011111000001011", 
    31 => "10111101000001100010010111000001", 
    32 => "10111100101010101010010111010010", 
    33 => "10111101000000111101101100111101", 
    34 => "10111101010000001010111101001000", 
    35 => "10111101010111011101110100010100", 
    36 => "00111110101011101011100111101101", 
    37 => "10111101000010000101100001100100", 
    38 => "10111101000011010110100100011001", 
    39 => "00111101111010101011001011000100", 
    40 => "10111011100110011000100010111101", 
    41 => "10111101010010110010011000100001", 
    42 => "10111101000100000011001100101101", 
    43 => "10111101010000011110101001010010", 
    44 => "10111101001100101001010110010101", 
    45 => "10111100000110110110101111111010", 
    46 => "10111101001110010011011011011101", 
    47 => "10111101000010111000001100000101", 
    48 => "00111100100011010011000100000000", 
    49 => "00111100101011110000011011100010", 
    50 => "10111111101010110101000010011000", 
    51 => "10111111100011010100010110011100", 
    52 => "10111101000101001100110100111000", 
    53 => "10111101001101011110101101010111", 
    54 => "00111111011110110111111101011000", 
    55 => "10111101000100010011001001111010", 
    56 => "10111101000110010110111111110010", 
    57 => "10111100101000110000010001000011", 
    58 => "10111101010011110001100010111100", 
    59 => "10111100000001111000111010011010", 
    60 => "10111101010000010010001110101100", 
    61 => "10111101001000010000100110001010", 
    62 => "10111101000000000010101001001010", 
    63 => "10111101010101000010100010101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_35 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_35 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_35_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_35_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_35_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


