-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_59_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_59_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111110010100011111101", 
    1 => "10111101101010110011001010110001", 
    2 => "00111011110101110011100110011010", 
    3 => "10111101101111001110001011101101", 
    4 => "10111101110000011100100111111111", 
    5 => "00111110101100110000000110010100", 
    6 => "00111110111000110111011111011000", 
    7 => "10111101110010111010000010101000", 
    8 => "10111101101111100000111010111100", 
    9 => "10111101110101011011011100101100", 
    10 => "10111101101000000101010111001101", 
    11 => "00111100111101100011100111000010", 
    12 => "00111111000011111111101111101111", 
    13 => "10111110101111111011010110011110", 
    14 => "00111110011110010010111011101110", 
    15 => "00111111000110000100001100010001", 
    16 => "00111111010010100110100001001001", 
    17 => "00111100010011111000111010100110", 
    18 => "00111110100001100011111101111100", 
    19 => "00111110100000000101001010100100", 
    20 => "00111111001111010101000100010001", 
    21 => "10111101101101111101111111100100", 
    22 => "00111111001100011100100100010000", 
    23 => "00111110100010010111101101010110", 
    24 => "10111100101010010010011100000010", 
    25 => "00111110110110111111010101001110", 
    26 => "10111100000010001010101001111111", 
    27 => "10111101001100100001011100100011", 
    28 => "00111101101010101100011010011010", 
    29 => "00111110101110000000000011111010", 
    30 => "10111101101110010101011011101010", 
    31 => "00111100001011111100000001101101", 
    32 => "00111110001110011001010110100000", 
    33 => "10111101101000111100100100010010", 
    34 => "10111101101101010111100000101110", 
    35 => "00111111100001100010110010110001", 
    36 => "00111110110001001101000001111011", 
    37 => "10111101101111010101011100110100", 
    38 => "00111110010000001110010010101010", 
    39 => "10111101011000100110010001111001", 
    40 => "10111110001010111001010001010010", 
    41 => "10111101110010001001110101101011", 
    42 => "10111101101100000000101001001001", 
    43 => "10111101100111101000001101110100", 
    44 => "10111101101111101001100100101110", 
    45 => "00111100110000001111110001111001", 
    46 => "10111101101000001001110010001110", 
    47 => "10111101101111110110000011000011", 
    48 => "10111101100001000000101101011100", 
    49 => "00111100011010111111001100011100", 
    50 => "00111110101000010010010000001100", 
    51 => "00111110111100011010010001000001", 
    52 => "10111101110000011010111111000110", 
    53 => "10111101101110110000101111000001", 
    54 => "00111110111000110110101110111110", 
    55 => "10111101011011100001011111111111", 
    56 => "10111101110001000111010110010101", 
    57 => "00111011001110110001000010101010", 
    58 => "10111101101110000101110000110111", 
    59 => "10111110110101110011101101010111", 
    60 => "10111101000111000000110101010011", 
    61 => "00111100010010101110110010001111", 
    62 => "10111101101100011100110111110101", 
    63 => "10111101101111101100101001011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_59 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_59 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_59_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_59_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_59_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


