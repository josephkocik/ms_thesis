// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_lstm_krnl_lstm_unit_Block_split2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unit_ind_dout,
        unit_ind_empty_n,
        unit_ind_read,
        w_xi_out_out_din,
        w_xi_out_out_full_n,
        w_xi_out_out_write,
        w_xc_out_out_din,
        w_xc_out_out_full_n,
        w_xc_out_out_write,
        w_xo_out_out_din,
        w_xo_out_out_full_n,
        w_xo_out_out_write,
        b_i_out_out_din,
        b_i_out_out_full_n,
        b_i_out_out_write,
        b_c_out_out_din,
        b_c_out_out_full_n,
        b_c_out_out_write,
        b_o_out_out_din,
        b_o_out_out_full_n,
        b_o_out_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] unit_ind_dout;
input   unit_ind_empty_n;
output   unit_ind_read;
output  [31:0] w_xi_out_out_din;
input   w_xi_out_out_full_n;
output   w_xi_out_out_write;
output  [31:0] w_xc_out_out_din;
input   w_xc_out_out_full_n;
output   w_xc_out_out_write;
output  [31:0] w_xo_out_out_din;
input   w_xo_out_out_full_n;
output   w_xo_out_out_write;
output  [31:0] b_i_out_out_din;
input   b_i_out_out_full_n;
output   b_i_out_out_write;
output  [31:0] b_c_out_out_din;
input   b_c_out_out_full_n;
output   b_c_out_out_write;
output  [31:0] b_o_out_out_din;
input   b_o_out_out_full_n;
output   b_o_out_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unit_ind_read;
reg w_xi_out_out_write;
reg w_xc_out_out_write;
reg w_xo_out_out_write;
reg b_i_out_out_write;
reg b_c_out_out_write;
reg b_o_out_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] W_xf_address0;
reg    W_xf_ce0;
wire   [31:0] W_xf_q0;
wire   [5:0] W_xi_address0;
reg    W_xi_ce0;
wire   [31:0] W_xi_q0;
wire   [5:0] W_xc_address0;
reg    W_xc_ce0;
wire   [31:0] W_xc_q0;
wire   [5:0] W_xo_address0;
reg    W_xo_ce0;
wire   [31:0] W_xo_q0;
wire   [5:0] B_f_address0;
reg    B_f_ce0;
wire   [31:0] B_f_q0;
wire   [5:0] B_i_address0;
reg    B_i_ce0;
wire   [31:0] B_i_q0;
wire   [5:0] B_c_address0;
reg    B_c_ce0;
wire   [31:0] B_c_q0;
wire   [5:0] B_o_address0;
reg    B_o_ce0;
wire   [31:0] B_o_q0;
reg    unit_ind_blk_n;
reg    w_xi_out_out_blk_n;
wire    ap_CS_fsm_state2;
reg    w_xc_out_out_blk_n;
reg    w_xo_out_out_blk_n;
reg    b_i_out_out_blk_n;
reg    b_c_out_out_blk_n;
reg    b_o_out_out_blk_n;
wire   [31:0] unit_ind_cast_i_fu_208_p1;
reg    ap_block_state1;
reg    ap_block_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xf #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
W_xf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_xf_address0),
    .ce0(W_xf_ce0),
    .q0(W_xf_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xi #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
W_xi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_xi_address0),
    .ce0(W_xi_ce0),
    .q0(W_xi_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xc #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
W_xc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_xc_address0),
    .ce0(W_xc_ce0),
    .q0(W_xc_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xo #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
W_xo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_xo_address0),
    .ce0(W_xo_ce0),
    .q0(W_xo_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_f #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
B_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_f_address0),
    .ce0(B_f_ce0),
    .q0(B_f_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_i #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
B_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_i_address0),
    .ce0(B_i_ce0),
    .q0(B_i_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_c #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
B_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_c_address0),
    .ce0(B_c_ce0),
    .q0(B_c_q0)
);

krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_o #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
B_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_o_address0),
    .ce0(B_o_ce0),
    .q0(B_o_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_c_ce0 = 1'b1;
    end else begin
        B_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_f_ce0 = 1'b1;
    end else begin
        B_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_i_ce0 = 1'b1;
    end else begin
        B_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_o_ce0 = 1'b1;
    end else begin
        B_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        W_xc_ce0 = 1'b1;
    end else begin
        W_xc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        W_xf_ce0 = 1'b1;
    end else begin
        W_xf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        W_xi_ce0 = 1'b1;
    end else begin
        W_xi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        W_xo_ce0 = 1'b1;
    end else begin
        W_xo_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_c_out_out_blk_n = b_c_out_out_full_n;
    end else begin
        b_c_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        b_c_out_out_write = 1'b1;
    end else begin
        b_c_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_i_out_out_blk_n = b_i_out_out_full_n;
    end else begin
        b_i_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        b_i_out_out_write = 1'b1;
    end else begin
        b_i_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_o_out_out_blk_n = b_o_out_out_full_n;
    end else begin
        b_o_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        b_o_out_out_write = 1'b1;
    end else begin
        b_o_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        unit_ind_blk_n = unit_ind_empty_n;
    end else begin
        unit_ind_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        unit_ind_read = 1'b1;
    end else begin
        unit_ind_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w_xc_out_out_blk_n = w_xc_out_out_full_n;
    end else begin
        w_xc_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        w_xc_out_out_write = 1'b1;
    end else begin
        w_xc_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w_xi_out_out_blk_n = w_xi_out_out_full_n;
    end else begin
        w_xi_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        w_xi_out_out_write = 1'b1;
    end else begin
        w_xi_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w_xo_out_out_blk_n = w_xo_out_out_full_n;
    end else begin
        w_xo_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        w_xo_out_out_write = 1'b1;
    end else begin
        w_xo_out_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_c_address0 = unit_ind_cast_i_fu_208_p1;

assign B_f_address0 = unit_ind_cast_i_fu_208_p1;

assign B_i_address0 = unit_ind_cast_i_fu_208_p1;

assign B_o_address0 = unit_ind_cast_i_fu_208_p1;

assign W_xc_address0 = unit_ind_cast_i_fu_208_p1;

assign W_xf_address0 = unit_ind_cast_i_fu_208_p1;

assign W_xi_address0 = unit_ind_cast_i_fu_208_p1;

assign W_xo_address0 = unit_ind_cast_i_fu_208_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (unit_ind_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((b_o_out_out_full_n == 1'b0) | (b_c_out_out_full_n == 1'b0) | (b_i_out_out_full_n == 1'b0) | (w_xo_out_out_full_n == 1'b0) | (w_xc_out_out_full_n == 1'b0) | (w_xi_out_out_full_n == 1'b0));
end

assign ap_return_0 = W_xf_q0;

assign ap_return_1 = B_f_q0;

assign b_c_out_out_din = B_c_q0;

assign b_i_out_out_din = B_i_q0;

assign b_o_out_out_din = B_o_q0;

assign unit_ind_cast_i_fu_208_p1 = unit_ind_dout;

assign w_xc_out_out_din = W_xc_q0;

assign w_xi_out_out_din = W_xi_q0;

assign w_xo_out_out_din = W_xo_q0;

endmodule //krnl_lstm_krnl_lstm_unit_Block_split2_proc
