-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_12_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010100110111110000010", 
    1 => "10111100110111101010001111100100", 
    2 => "10111101010001000000101101100101", 
    3 => "00111101000011100100011101101011", 
    4 => "10111100111001011001110100001100", 
    5 => "00111101001010011111100010000010", 
    6 => "10111101000101100111100010101011", 
    7 => "10111101000010100110000001010110", 
    8 => "00111100110110010100100101001001", 
    9 => "10111100111011011001010010000001", 
    10 => "10111100011000110100110100101111", 
    11 => "10111101001010110000010110011010", 
    12 => "10111100100000111111110111100000", 
    13 => "00111100101010010010011000001010", 
    14 => "10111101010100001100001011000011", 
    15 => "10111101001010011101100000110101", 
    16 => "00111101001010110000101010001111", 
    17 => "10111100100111100011101101010001", 
    18 => "10111100111011101001110010010011", 
    19 => "10111100111110110001001000111100", 
    20 => "10111101001011000110111010100001", 
    21 => "00111101001101101010110111110101", 
    22 => "00111101101001110111100100111100", 
    23 => "10111101000110011100010001001110", 
    24 => "00111100110011010001100010111111", 
    25 => "00111101001001001011001110100010", 
    26 => "10111100111110111000101010101000", 
    27 => "10111101000010101111110010100100", 
    28 => "00111100110000111101100111010101", 
    29 => "10111100011010010000101110011011", 
    30 => "10111101000110101000100101111100", 
    31 => "00111100100101111011111110000100", 
    32 => "10111101000100011001100001001000", 
    33 => "00111100101010111111010010101101", 
    34 => "10111100111100010110101100011110", 
    35 => "10111101001011100101011111111000", 
    36 => "10111001111110001011101100111110", 
    37 => "10111100101001001000111110110011", 
    38 => "00111100111111111110110000011101", 
    39 => "00111101001001001101010110010110", 
    40 => "10111101001010010001100100011101", 
    41 => "00111100111010000011101111111101", 
    42 => "00111100100111101000110001010010", 
    43 => "00111101000000001100110001001110", 
    44 => "10111100101111110110100011011000", 
    45 => "00111100100101110101011110111100", 
    46 => "10111100110100000011010100101110", 
    47 => "00111100110100100100011000010011", 
    48 => "00111101000000111001001101011011", 
    49 => "10111011000001001011001111000011", 
    50 => "10111101000001010110011101111101", 
    51 => "00111101000111001001000101001100", 
    52 => "00111100101010001001011111000000", 
    53 => "10111100101111011000111011000111", 
    54 => "10111101001011100001110110100100", 
    55 => "10111101001010001101110111101100", 
    56 => "10111100101010111000001101100100", 
    57 => "00111100001010101101111110011010", 
    58 => "10111100110110011011101000000001", 
    59 => "10111100111101001100000101011111", 
    60 => "00111101000101111101000010010000", 
    61 => "10111101000000000010110100111100", 
    62 => "00111101001010111010111100001011", 
    63 => "00111101001011000001000110000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_12 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_12_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


