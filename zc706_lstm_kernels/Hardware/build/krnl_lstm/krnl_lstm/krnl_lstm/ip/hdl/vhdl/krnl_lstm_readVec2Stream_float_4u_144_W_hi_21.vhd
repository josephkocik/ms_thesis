-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_21_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000101100111101111011100", 
    1 => "00111101001110001010110100100101", 
    2 => "00111101000010111011100011111111", 
    3 => "00111100111111011111000101001000", 
    4 => "00111100111100101010100111010011", 
    5 => "00111110000100100011010011111001", 
    6 => "00111101111101100101111010101110", 
    7 => "00111101010010010001101011011110", 
    8 => "00111100110100100000110110000000", 
    9 => "00111101000101010010111101011110", 
    10 => "00111101000100000000000011000000", 
    11 => "00111101000100010000101101110101", 
    12 => "10111011111100000100011001011110", 
    13 => "00111101001011011101001111100101", 
    14 => "00111110100001011001110101111011", 
    15 => "00111111010101011011011010010001", 
    16 => "00111111010110001110010011110000", 
    17 => "00111101000100011000101011110100", 
    18 => "10111110001000000110001101110100", 
    19 => "00111101000111010100110111010101", 
    20 => "00111111010110000101011000100010", 
    21 => "00111101001100101101100011100110", 
    22 => "10111101010011010110111110011111", 
    23 => "00111100111000111000100111100010", 
    24 => "00111101000001011010101110001011", 
    25 => "00111110010110111111100010100101", 
    26 => "00111101000110101101000010111010", 
    27 => "00111101001000100100011101111101", 
    28 => "00111101000101101111110010011011", 
    29 => "00111110101110011001110101010000", 
    30 => "00111101010011111110010000110001", 
    31 => "00111101000011110111010011111010", 
    32 => "00111011100111011001100001110000", 
    33 => "00111101000010101111010000111100", 
    34 => "00111101001001000111011010101111", 
    35 => "00111101001111001010111010110010", 
    36 => "00111110101010110111001011101101", 
    37 => "00111101000000101001000011111101", 
    38 => "00111101000111110101100111001000", 
    39 => "00111100011101001111111101010110", 
    40 => "00111100011101011110110000011111", 
    41 => "00111100111000101110001001110001", 
    42 => "00111101000111000110001111011100", 
    43 => "00111101001110111001010110101110", 
    44 => "00111101000001000010111001101000", 
    45 => "00111100111000001100100001000011", 
    46 => "00111100111111110000110011101010", 
    47 => "00111101001111100101110111100011", 
    48 => "00111101000010100111101100011100", 
    49 => "00111101001000111101011101111111", 
    50 => "10111011110000001000010100100011", 
    51 => "00111101111000110101100001100001", 
    52 => "00111100110101011010100000010100", 
    53 => "00111101001010001011110110101011", 
    54 => "00111111010011000111000101110100", 
    55 => "00111101000110110000111000110101", 
    56 => "00111101000001001000111111111111", 
    57 => "00111101000101100111111010000011", 
    58 => "00111101000000100101110010100011", 
    59 => "00111100011100111011011110111000", 
    60 => "00111101011000111111000111000111", 
    61 => "00111101001011110101000011010000", 
    62 => "00111101000110111001010111000011", 
    63 => "00111101100010111001101000011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_21 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_21_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


