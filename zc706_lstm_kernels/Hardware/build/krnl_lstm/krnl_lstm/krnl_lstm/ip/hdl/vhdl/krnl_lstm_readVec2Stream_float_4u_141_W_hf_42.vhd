-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_42_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_42_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100001110000011101", 
    1 => "00111101100011101001000001101001", 
    2 => "00111101100101111001010000100001", 
    3 => "00111101100100111011010110100000", 
    4 => "00111101011101111111111011011101", 
    5 => "00111101101000111000111101100111", 
    6 => "00111101000101101000101011010111", 
    7 => "00111101100001111000110011101001", 
    8 => "00111101011011111000011100001111", 
    9 => "00111101100100100101000111001111", 
    10 => "00111101100010011010101100001011", 
    11 => "00111101011101100111010100001010", 
    12 => "00111101100110000011011101001111", 
    13 => "00111101001111001011111101111001", 
    14 => "00111101100001000001111011001000", 
    15 => "00111101001111100100110110000101", 
    16 => "00111101010111000111001010101010", 
    17 => "00111101100000110110110111111110", 
    18 => "00111101011010110010011101100011", 
    19 => "00111101100001101101000011110001", 
    20 => "00111101011001010100011010011111", 
    21 => "00111101100100000110100111001011", 
    22 => "00111101101100000000100101111011", 
    23 => "00111100111011010011101111011001", 
    24 => "00111101011100100010101101111001", 
    25 => "00111101100011010101001110011100", 
    26 => "00111101100010011011110000111010", 
    27 => "00111101100000100001010110100101", 
    28 => "00111101100010000100100001001010", 
    29 => "10111101011001101100101111100011", 
    30 => "00111101100000101001101111011010", 
    31 => "00111101100000100101011010000111", 
    32 => "00111101001011011001000100010011", 
    33 => "00111101100001100101111110100000", 
    34 => "00111101100100001001100000000000", 
    35 => "00111101100010110011110000000100", 
    36 => "00111100100111101101100100010110", 
    37 => "00111101100001010110111111001001", 
    38 => "00111101100001000011010011001110", 
    39 => "10111100000101011011001100111011", 
    40 => "00111101001011000111010110010011", 
    41 => "00111101100001010100111110100100", 
    42 => "00111101011101110001011101100011", 
    43 => "00111101100100011010101110100100", 
    44 => "00111101100001011001010101000000", 
    45 => "00111101011010010000000001011001", 
    46 => "00111101100100010000111110100011", 
    47 => "00111101100101110011000100100101", 
    48 => "00111101011111010111011010100000", 
    49 => "00111101100010100000010000011110", 
    50 => "00111100111011101110000001010100", 
    51 => "00111101011001100101101010010001", 
    52 => "00111101100001010101101101011000", 
    53 => "00111101100011101100010111110001", 
    54 => "00111101011000101101010111101001", 
    55 => "00111101100000111001111101010001", 
    56 => "00111101100000101101010010011000", 
    57 => "00111101100010111001101000110111", 
    58 => "00111101011101011110000010000011", 
    59 => "00111101000101100000011000001001", 
    60 => "00111101011111111001000011001101", 
    61 => "00111101100010000111101101100000", 
    62 => "00111101011100100001111010011110", 
    63 => "00111101100010000001010010000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_42 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_42 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_42_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_42_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_42_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


