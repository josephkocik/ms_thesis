-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_37_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_37_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010000011111100110111", 
    1 => "00111101000000111100011101110111", 
    2 => "00111101001010000011110110001011", 
    3 => "10111101000010111000010100011101", 
    4 => "00111101000110001011111101000010", 
    5 => "10111110111001101101000011101110", 
    6 => "00111101101100000110111001010111", 
    7 => "00111101001110010111100101000111", 
    8 => "10111101000100001001001010110011", 
    9 => "00111101001000000000001101010110", 
    10 => "00111100101111111100110000011010", 
    11 => "00111101001001110101111010111001", 
    12 => "10111101101001010111110001111010", 
    13 => "10111100101100011001011001000001", 
    14 => "00111110111000011011000000000111", 
    15 => "00111100101111001111010100011000", 
    16 => "10111011010101100101011111011010", 
    17 => "00111100110101000110001110101101", 
    18 => "00111100111101001110001110011110", 
    19 => "00111101000101000011110110101010", 
    20 => "00111100101000011011101001011001", 
    21 => "10111101001000010001101100010001", 
    22 => "10111101010011111010110111000110", 
    23 => "00111101000110000011110111111111", 
    24 => "10111101000010011100110100100000", 
    25 => "10111101001001010010100101010010", 
    26 => "00111101000100111100100000001001", 
    27 => "00111101000010110100010000000110", 
    28 => "10111100111110100000100011111000", 
    29 => "00111110110000101101000111111010", 
    30 => "00111101000110111110010000000010", 
    31 => "10111100110010111111111100111010", 
    32 => "00111101000011101000101010001110", 
    33 => "10111100111000001011001011010101", 
    34 => "00111101001001010111100001011010", 
    35 => "10111100100001101111011100011011", 
    36 => "00111110100011100110000101100001", 
    37 => "00111100110110110000011111010010", 
    38 => "10111101000101010111000011101010", 
    39 => "10111100111011010000110010101100", 
    40 => "00111101001001111101000010101110", 
    41 => "10111101001000010110010100100111", 
    42 => "10111100110111111011000010111101", 
    43 => "10111101001011011110111100011111", 
    44 => "00111101000000101011101011000100", 
    45 => "10111100110101010000101110101110", 
    46 => "00111101000011011011011001001100", 
    47 => "10111101000000110100111101000011", 
    48 => "10111101000001000100101010011010", 
    49 => "00111100101000011111000110011001", 
    50 => "00111110100100100110100001110000", 
    51 => "10111101100100010111100110001100", 
    52 => "10111100111001100011001111110100", 
    53 => "00111101000001010011111100000010", 
    54 => "00111101101001000100100100111011", 
    55 => "00111101001001110111100111011100", 
    56 => "00111100111010010110000001011101", 
    57 => "10111100111001111010101011100100", 
    58 => "00111101000101011001100101011110", 
    59 => "00111100111010100000110100001110", 
    60 => "10111101001100011111101010100001", 
    61 => "00111101000100011001110111001011", 
    62 => "10111101000100010110110001100001", 
    63 => "10111101010001100001000100011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_37 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_37 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_37_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_37_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_37_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


