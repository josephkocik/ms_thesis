-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_25_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111010100000001110000110010", 
    1 => "00111100110110111100111111011101", 
    2 => "00111110100111111111010000011011", 
    3 => "00111100110110100111100100000011", 
    4 => "00111101000100100011100000111100", 
    5 => "00111111101110100011111001111110", 
    6 => "00111111001010110111001100100001", 
    7 => "00111101001010010000010000001100", 
    8 => "00111101010011100111110011100101", 
    9 => "00111100110111110011001100110111", 
    10 => "00111100110001010111101001101010", 
    11 => "00111110110100100000111101111010", 
    12 => "00111111100110100001110011001010", 
    13 => "10111111110000011101111011111010", 
    14 => "00111111001010010011100011110110", 
    15 => "00111111110001000001011010010011", 
    16 => "01000000000100000111011000010010", 
    17 => "00111111001000001100111010110111", 
    18 => "00111111100010110010000010101011", 
    19 => "00111111011100101111111001110010", 
    20 => "01000000000111011010110111010001", 
    21 => "00111100100011010011100011110001", 
    22 => "00111111101000110000100001000111", 
    23 => "00111110101111001001000011111101", 
    24 => "00111110011011000010010100001101", 
    25 => "11000000000011110101111000111110", 
    26 => "00111110110101111001111111101001", 
    27 => "00111011000110000100010100100101", 
    28 => "00111110010010000011110101011111", 
    29 => "00111111111010110001101100110111", 
    30 => "00111100110011011001001110011010", 
    31 => "00111111001000000110101110111110", 
    32 => "00111100110111101000010011110100", 
    33 => "00111100110111111110111010010000", 
    34 => "00111100110110101001100011011010", 
    35 => "00111111101100000001011111111111", 
    36 => "01000000001010110100011011100101", 
    37 => "00111100110001011000011110111111", 
    38 => "00111111011111100011111111001110", 
    39 => "10111110000001111001001001110110", 
    40 => "10111111101101001100111100000101", 
    41 => "00111100110100100100001011111111", 
    42 => "00111101100011000100001000110011", 
    43 => "00111100100011011011101000011010", 
    44 => "00111100111110110010100000011001", 
    45 => "00111110110001001010000001011000", 
    46 => "00111100011111101111000101000101", 
    47 => "00111101110110010111001000110000", 
    48 => "00111101111100110011010111011011", 
    49 => "00111101111000101010001110101110", 
    50 => "00111110111011100100111011100011", 
    51 => "00111111011001001111001000100010", 
    52 => "00111100111011011111101100110100", 
    53 => "00111101001001010010010101100100", 
    54 => "01000000000001011001001000001000", 
    55 => "00111110101010010011010111101110", 
    56 => "00111101000000000100101101010101", 
    57 => "00111110001111000110100110111101", 
    58 => "00111101100100011011001111010001", 
    59 => "10111111101000001011000000000000", 
    60 => "00111110010111101001101000001101", 
    61 => "00111110001100100111111000001111", 
    62 => "00111100110000011011001100011110", 
    63 => "00111101000111010010100110111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_25 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_25_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


