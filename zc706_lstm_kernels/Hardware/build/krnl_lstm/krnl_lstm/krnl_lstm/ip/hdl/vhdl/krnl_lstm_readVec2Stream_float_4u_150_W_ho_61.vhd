-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_61_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_61_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110010101110011011000011", 
    1 => "10111101100011010100101001101111", 
    2 => "00111101001010001001101011100101", 
    3 => "10111101100100001000010000000010", 
    4 => "10111101100000100101001110100100", 
    5 => "00111110001010101101010100010111", 
    6 => "00111110110100111001111000100101", 
    7 => "10111101100001110000011011101011", 
    8 => "10111101011011110110011110011001", 
    9 => "10111101100000011110101011111111", 
    10 => "10111101100011000110100011001111", 
    11 => "00111101001100100110111110010010", 
    12 => "00111110100001101110110101011011", 
    13 => "00111111001100000110110100111000", 
    14 => "00111110100101100101010011010111", 
    15 => "00111110110010000000101011001000", 
    16 => "00111110110000101001010100001110", 
    17 => "00111101000111001111100101010100", 
    18 => "00111110110000100001000000010001", 
    19 => "00111101101011100000100000000100", 
    20 => "00111110101011000011100101101100", 
    21 => "10111101100110001101111001111101", 
    22 => "00111110110000010101010010001000", 
    23 => "00111110110100111001100100110011", 
    24 => "00111100111010010000010111111101", 
    25 => "00111111000110001011010110110101", 
    26 => "00111101010000100010111101101101", 
    27 => "00111110100000100011100111000011", 
    28 => "00111100110000001110011101100000", 
    29 => "00111110011101000101100011100000", 
    30 => "10111101011101110011100010110110", 
    31 => "00111101000110001011001101110000", 
    32 => "00111110110011001100001011001100", 
    33 => "10111101100100100001001100110100", 
    34 => "10111101100011110111000111001011", 
    35 => "00111111000000000101110101111110", 
    36 => "00111110001000001101001000010110", 
    37 => "10111101100100010001111111101001", 
    38 => "00111101111001110111111001000000", 
    39 => "00111110100000101010010011010001", 
    40 => "00111110110110100101011000000111", 
    41 => "10111101100011010101100110000010", 
    42 => "10111101011010110101101000000100", 
    43 => "10111101100000110010101100010110", 
    44 => "10111101011110110101010100100110", 
    45 => "00111101001000001011111100000110", 
    46 => "10111101100011110011110100000100", 
    47 => "10111101001101110000111110111010", 
    48 => "10111100101111001010011000111000", 
    49 => "00111100111110011000001100101100", 
    50 => "00111110110011000101110000001111", 
    51 => "00111110110110000111011000001001", 
    52 => "10111101100010101101110011001001", 
    53 => "10111101100000010011101010000110", 
    54 => "00111110010100011000011111111001", 
    55 => "00111010110100001000100111110000", 
    56 => "10111101100010110100101000111100", 
    57 => "00111100000001010011100001100011", 
    58 => "10111101001011111010000100111010", 
    59 => "00111110100111011010001010011110", 
    60 => "00111100001100111001101100101111", 
    61 => "10111100100001100011100011010001", 
    62 => "10111101100010100100111101011100", 
    63 => "10111101100010111000000101010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_61 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_61 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_61_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_61_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_61_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


