-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_26_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000001110001001001", 
    1 => "10111101010000010100000101010000", 
    2 => "10111101000101001011000100001101", 
    3 => "10111101000001101111111001010001", 
    4 => "10111101011101111110110111010010", 
    5 => "10111110000100101010101110110000", 
    6 => "10111101111101001000000000011001", 
    7 => "10111101100100001011011011011010", 
    8 => "10111101011010011001101001001010", 
    9 => "10111101100010000011101010010001", 
    10 => "10111101000110000100110100010101", 
    11 => "10111101000100011011000110010010", 
    12 => "00111011110011000001111111100001", 
    13 => "10111101010000011110001000000011", 
    14 => "10111110100110111000000011010011", 
    15 => "10111111010101010100111110110011", 
    16 => "10111111010110000101010101001100", 
    17 => "10111101000110001010011011100100", 
    18 => "00111110000111111011010001010110", 
    19 => "10111101001000100010101100111001", 
    20 => "10111111010110000010101100101000", 
    21 => "10111101001010101011110101000100", 
    22 => "00111101001010011110011100001000", 
    23 => "10111100110110110110010111101101", 
    24 => "10111101100000100000111011110100", 
    25 => "10111110010110100010011010010000", 
    26 => "10111101000111111101010000000110", 
    27 => "10111101000111111000110100000101", 
    28 => "10111101000111111010011110000010", 
    29 => "10111110101110111110110001011010", 
    30 => "10111101010111101010010110111100", 
    31 => "10111101000101111000010011001111", 
    32 => "10111011011111100001001101010101", 
    33 => "10111101000101010000011001000001", 
    34 => "10111101100001011110110101011100", 
    35 => "10111101001111000010101000100011", 
    36 => "10111110100101111110000110010011", 
    37 => "10111101000101101110111110101111", 
    38 => "10111101001001000101110001110011", 
    39 => "10111100011010000001101011111010", 
    40 => "10111100011010001010001111010100", 
    41 => "10111101011011110101010010001110", 
    42 => "10111101010010100010011001110001", 
    43 => "10111101100010011000001010110011", 
    44 => "10111101011111010000000001011110", 
    45 => "10111101000100001100110000010010", 
    46 => "10111101100000000110000111111100", 
    47 => "10111101010101101000101111101111", 
    48 => "10111101000010110000011010111101", 
    49 => "10111101001010001100101111001111", 
    50 => "00111100000110101111110000001111", 
    51 => "10111101110111111001010001101101", 
    52 => "10111101001000010110010010001111", 
    53 => "10111101100000001000011110101000", 
    54 => "10111111010011001000100000100001", 
    55 => "10111101000111100001001010011000", 
    56 => "10111101011001100010000000100111", 
    57 => "10111101000111000001110110111001", 
    58 => "10111101011111110100110100011110", 
    59 => "10111100011000001010000110010001", 
    60 => "10111101011110001110111100101010", 
    61 => "10111101001100101001011000001101", 
    62 => "10111101001000001101010111011110", 
    63 => "10111101100000000111110011111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_26 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_26_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


