-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_34_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_34_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111100001011110111100", 
    1 => "10111101100011101111110110001101", 
    2 => "10111101100101111011000111010010", 
    3 => "10111101100100111001010100010101", 
    4 => "10111101011101010110101010100100", 
    5 => "10111101101000111001001101011011", 
    6 => "10111101000101101011010000010001", 
    7 => "10111101100001101101111100001001", 
    8 => "10111101011011011101000101111001", 
    9 => "10111101100100000100011011011011", 
    10 => "10111101100010011000011110010110", 
    11 => "10111101011101100111101101000001", 
    12 => "10111101100110000101100100001000", 
    13 => "10111101001111001000000011101111", 
    14 => "10111101100001000001010001000111", 
    15 => "10111101001111100101011100011010", 
    16 => "10111101010111000111110011010001", 
    17 => "10111101100000110101000001111011", 
    18 => "10111101011010110111000110101101", 
    19 => "10111101100001101011101100011001", 
    20 => "10111101011001010011101110101010", 
    21 => "10111101100100000101010100111101", 
    22 => "10111101101100000011001010110111", 
    23 => "10111100111011010110011010111111", 
    24 => "10111101011011110001100011010100", 
    25 => "10111101100011010101011100011000", 
    26 => "10111101100010011010001111101101", 
    27 => "10111101100000011111010000011010", 
    28 => "10111101100010000010101101001111", 
    29 => "00111101011001101101100010010111", 
    30 => "10111101100000100101001100100000", 
    31 => "10111101100000100011011101110100", 
    32 => "10111101001011010111111001001011", 
    33 => "10111101100001100011110111011111", 
    34 => "10111101100011100101010000110101", 
    35 => "10111101100010110001000100011111", 
    36 => "10111100100111101101100111000110", 
    37 => "10111101100001010100100010100110", 
    38 => "10111101100001000001110111110111", 
    39 => "00111100000101110110010111001001", 
    40 => "10111101001010111110011111011001", 
    41 => "10111101100001010001001101010110", 
    42 => "10111101011101011101000101100101", 
    43 => "10111101100011100100100111011011", 
    44 => "10111101100000100110100101001010", 
    45 => "10111101011010000111000110110101", 
    46 => "10111101100011111011000001010000", 
    47 => "10111101100101110010111011101101", 
    48 => "10111101011111010010011010110111", 
    49 => "10111101100010100000000100111110", 
    50 => "10111100111011110011010011100100", 
    51 => "10111101011001101001010001000001", 
    52 => "10111101100001010010111110010011", 
    53 => "10111101100011101100000000101111", 
    54 => "10111101011000101100100011110000", 
    55 => "10111101100000111001000111101000", 
    56 => "10111101100000100001001010101001", 
    57 => "10111101100010110111101111110011", 
    58 => "10111101011101010110001101011001", 
    59 => "10111101000101010101011101111111", 
    60 => "10111101011110011111010000111111", 
    61 => "10111101100010000111011100101110", 
    62 => "10111101011100100111011110001101", 
    63 => "10111101100001010110011000000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_34 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_34 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_34_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_34_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_34_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


