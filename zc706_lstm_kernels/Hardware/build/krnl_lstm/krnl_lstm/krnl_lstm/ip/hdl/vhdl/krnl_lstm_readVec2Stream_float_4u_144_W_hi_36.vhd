-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_36_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_36_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101110011001101110010", 
    1 => "10111101010000010110010010111010", 
    2 => "10111101000100111101010101101000", 
    3 => "10111101000001100000101101001101", 
    4 => "10111101011110000101101000001010", 
    5 => "10111110000100101100001010000110", 
    6 => "10111110000101100000011010110101", 
    7 => "10111101100100010000100111000011", 
    8 => "10111101011010100011000000000001", 
    9 => "10111101100010000111100010001111", 
    10 => "10111101000110000100011100010001", 
    11 => "10111101000100001010100111000111", 
    12 => "00111100011110110110111111110000", 
    13 => "10111101010000101111001111110011", 
    14 => "10111110110001011100000100110000", 
    15 => "10111111010010100111000111101010", 
    16 => "10111111010010110010110100111000", 
    17 => "10111101000110001011001100110101", 
    18 => "00111111001000010100010111011111", 
    19 => "10111101001000011001010110010111", 
    20 => "10111111010010100111010001001000", 
    21 => "10111101001010101100011011110100", 
    22 => "00111101011101011010101010101001", 
    23 => "10111100110111001000000010010010", 
    24 => "10111101100000101011011010000110", 
    25 => "00111110111011001011100101010110", 
    26 => "10111101000111110111101001010001", 
    27 => "10111101000111101001101100110111", 
    28 => "10111101000111111010101101100000", 
    29 => "10111110100000000010110101110011", 
    30 => "10111101010111101111100011011001", 
    31 => "10111101000101111010101000100111", 
    32 => "10111011101110011010000011011111", 
    33 => "10111101000101001111010101110011", 
    34 => "10111101100001100010001100001100", 
    35 => "10111101001111101110100000111110", 
    36 => "10111110010010001101011100001101", 
    37 => "10111101000101101110111111100000", 
    38 => "10111101001000111010001011000100", 
    39 => "10111011100111111010010111101011", 
    40 => "10111100011000011001011000101000", 
    41 => "10111101011011110100110100101110", 
    42 => "10111101010010110010111101101111", 
    43 => "10111101100010011011101110000011", 
    44 => "10111101011111011101000111111001", 
    45 => "10111101000100010100000111000111", 
    46 => "10111101100000001001111000011100", 
    47 => "10111101010101110001010000001001", 
    48 => "10111101000010101010101000110010", 
    49 => "10111101001010001010100110000010", 
    50 => "10111110101011011011011111010001", 
    51 => "10111110111010110010011000111001", 
    52 => "10111101001000010101000011010000", 
    53 => "10111101100000001101001010100010", 
    54 => "10111111010000010001110111000101", 
    55 => "10111101000111010100010011101010", 
    56 => "10111101011001100111110010111110", 
    57 => "10111101000110110110101010110111", 
    58 => "10111101011111110011000001111010", 
    59 => "10111100010110111011110010000010", 
    60 => "10111101011110010011100101001001", 
    61 => "10111101001100100111110100100111", 
    62 => "10111101001000001001001100010110", 
    63 => "10111101100000001011010010010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_36 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_36 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_36_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_36_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_36_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


