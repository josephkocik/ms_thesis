-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001000100111100010000110", 
    1 => "00111101011011100001001111101011", 
    2 => "00111101011101111010100100100100", 
    3 => "00111101011111000011100110101011", 
    4 => "00111101011001100001001011010010", 
    5 => "00111101000010011100100010101010", 
    6 => "00111101000001000000011011101101", 
    7 => "00111101011100111111111100010101", 
    8 => "00111101010111101111100110000100", 
    9 => "00111101100001011110010110101010", 
    10 => "00111101011010010111011111100000", 
    11 => "00111101000011111000001111000000", 
    12 => "00111101110011101111011000001011", 
    13 => "00111101001111101010100001100010", 
    14 => "00111101001000101000101000010010", 
    15 => "00111101101111100111011110011100", 
    16 => "00111101100110011101101001000101", 
    17 => "00111101011001000011110110010011", 
    18 => "10111111101001110101001000011011", 
    19 => "00111101010110001110011010101110", 
    20 => "00111101011110000010001011011101", 
    21 => "00111101011001010111101101001110", 
    22 => "00111101101100001000001111101001", 
    23 => "00111101101001100011110011001010", 
    24 => "00111101011001010110111110001010", 
    25 => "00111101011000000101001001101100", 
    26 => "00111101010111011110110001000110", 
    27 => "00111101001110111010100000110011", 
    28 => "00111101011011001000111011101000", 
    29 => "00111110111101111001010011111110", 
    30 => "00111101000100111101010001101101", 
    31 => "00111101011001001011010100011011", 
    32 => "00111101000101000011110101011010", 
    33 => "00111101010111100110011011000010", 
    34 => "00111101100001000101101111111000", 
    35 => "00111101100010011111111001000101", 
    36 => "00111101100011110000011100011110", 
    37 => "00111101011000011011110010111111", 
    38 => "00111101010101100101100001101111", 
    39 => "10111111000001000111101011001010", 
    40 => "10111011010100100001001011010110", 
    41 => "00111101011001000110011110100001", 
    42 => "00111101011010011011101010011101", 
    43 => "00111101100001100011101101111110", 
    44 => "00111101011101110000101110011100", 
    45 => "00111101010110000000100100011001", 
    46 => "00111101100001000111100010100011", 
    47 => "00111101011101111101000001111011", 
    48 => "00111101010010111111010110110110", 
    49 => "00111101011010001011000011111011", 
    50 => "10111100110000011010011001011111", 
    51 => "00111101010111000000111101100011", 
    52 => "00111101011000110011111110000101", 
    53 => "00111101011111100011110101010000", 
    54 => "00111101100011111100111000101001", 
    55 => "00111101001110011101011101110110", 
    56 => "00111101011011111011001001011101", 
    57 => "00111101010100011000100010101101", 
    58 => "00111101010111101100110001100011", 
    59 => "10111100000110001001101011110010", 
    60 => "00111101011011101100011100010010", 
    61 => "00111101011001111110001011010110", 
    62 => "00111101001000100011101111101110", 
    63 => "00111101100000000000110001111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_16 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_16_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


