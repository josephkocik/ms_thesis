-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_12_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001101111111111111100110", 
    1 => "00111101010111001000101110101101", 
    2 => "00111101100001110000000000110101", 
    3 => "00111101011111111001111100101111", 
    4 => "00111101001111101011100111001001", 
    5 => "00111101001001101110000110101011", 
    6 => "00111101000000011000000100110000", 
    7 => "00111101010010000011001100111011", 
    8 => "00111100110000110111000001001101", 
    9 => "00111101010010110100000101001010", 
    10 => "00111101010010110110110110100111", 
    11 => "00111101001011100000010110101111", 
    12 => "00111101100111101101101110100101", 
    13 => "00111101001100001000110101011010", 
    14 => "00111101001100100101100100110101", 
    15 => "00111101001001101000010101011110", 
    16 => "00111101001001010100100011011010", 
    17 => "00111101011010111000100011110100", 
    18 => "00111100100101111010100010010011", 
    19 => "00111101011001001001011000110000", 
    20 => "00111101001001101101100101101010", 
    21 => "00111101100000010000010010011010", 
    22 => "00111101101110101111110010011001", 
    23 => "00111101000000110111100001010110", 
    24 => "00111101001100110111101111100011", 
    25 => "00111100011100010110110100010101", 
    26 => "00111101011010111110001010111100", 
    27 => "00111101001110010110001000101001", 
    28 => "00111101011010100000101111101110", 
    29 => "00111101010010011100110101000110", 
    30 => "00111101000011111000101011111001", 
    31 => "00111101011010101011101011011000", 
    32 => "10111011110001110000101010000101", 
    33 => "00111101011010101110010010001001", 
    34 => "00111101010010100110011010111110", 
    35 => "00111101010110101011100110110110", 
    36 => "00111101001110101110011110011110", 
    37 => "00111101011011010110101110100100", 
    38 => "00111101011001101100110000000010", 
    39 => "10111101001001011000010101100011", 
    40 => "10111011011000101111011010001101", 
    41 => "00111101011011011110010100100010", 
    42 => "00111101001110001101111000110110", 
    43 => "00111101010000001011100011010010", 
    44 => "00111101001111001111001000100101", 
    45 => "00111101000001010010001010101001", 
    46 => "00111101010011011110010011001100", 
    47 => "00111101010111001011000111011111", 
    48 => "00111100011111011101110001111001", 
    49 => "00111101101010011101101011010000", 
    50 => "00111101010110011111110010101000", 
    51 => "00111101001001110110000001011010", 
    52 => "00111101011011011010111010110111", 
    53 => "00111101010101000001011111011011", 
    54 => "00111101001001110100001001001010", 
    55 => "00111101010010111010101100101011", 
    56 => "00111101001110100001100010001001", 
    57 => "00111101100101010100000001111000", 
    58 => "00111101010111010001000110000000", 
    59 => "10111011000110110011101011101101", 
    60 => "00111101001101111010101010010001", 
    61 => "00111101011011110110010000011000", 
    62 => "00111101001110000010001001011111", 
    63 => "00111101010001000110100011101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_12 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_12_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


