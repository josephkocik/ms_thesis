-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_35_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_35_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111011000111001001111", 
    1 => "10111101110101000011100100100100", 
    2 => "10111101101110011011101110110011", 
    3 => "10111101110100100010011110110111", 
    4 => "10111101110010001011110000000000", 
    5 => "10111110111100001010000011101111", 
    6 => "10111111001110101000011011000000", 
    7 => "10111101110001101101010001101001", 
    8 => "10111101101101101011010100011010", 
    9 => "10111101110001101101110010000010", 
    10 => "10111101110110111001101111011010", 
    11 => "10111110101000000100011101010110", 
    12 => "10111111001001100110110101000011", 
    13 => "00111111100101000111011111011101", 
    14 => "10111111001110110110001010100000", 
    15 => "10111111001100110011011010111110", 
    16 => "10111110111101010000101001000111", 
    17 => "10111110110110111011110110010000", 
    18 => "00111111011101000111000100000110", 
    19 => "10111110100011111010100001111001", 
    20 => "10111110101100011100110000000110", 
    21 => "10111101110101110101001010111000", 
    22 => "10111111010000011000111011110111", 
    23 => "10111111010111001011100100111101", 
    24 => "10111110010011011001111010011000", 
    25 => "00111111101110111000110001110001", 
    26 => "10111110100000111000010111101111", 
    27 => "00111110101010111110111001110011", 
    28 => "10111110001010111111100001111110", 
    29 => "10111111000001111000010001001001", 
    30 => "10111101101100001010110010011111", 
    31 => "10111110110111011011101010111111", 
    32 => "00111110111000001011111100001010", 
    33 => "10111101110111101110001101110111", 
    34 => "10111101110010100011010010101100", 
    35 => "10111111100110101001101110011110", 
    36 => "10111111000010010000100001001101", 
    37 => "10111101110101101110010000001100", 
    38 => "10111110100100110110101000101001", 
    39 => "00111110101001110101100001101001", 
    40 => "00111111010100001101010011110000", 
    41 => "10111101110101000100010001001110", 
    42 => "10111101101101000011000010010111", 
    43 => "10111101110000000000101101111111", 
    44 => "10111101101101101111001011110101", 
    45 => "10111110100110101111101101010110", 
    46 => "10111101110100010010000011011010", 
    47 => "10111101100001000110100111001001", 
    48 => "10111110000011001101110110111010", 
    49 => "10111101101110101001001010011000", 
    50 => "00111110101010111101100011010111", 
    51 => "10111011010110100111111111110011", 
    52 => "10111101110010001000011001110111", 
    53 => "10111101101110011001101111001111", 
    54 => "10111111010010101110100101001111", 
    55 => "10111110001010000111011001000011", 
    56 => "10111101110010110000110001101001", 
    57 => "10111101100010001110000101101110", 
    58 => "10111110001000001100001110011000", 
    59 => "00111111001111000110010010000101", 
    60 => "10111100001010100111111101110010", 
    61 => "10111101111110100011001111010001", 
    62 => "10111101110101100000111011000100", 
    63 => "10111101110010110011111110111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_35 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_35 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_35_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_35_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_35_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


