-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_40_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_40_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001010111000001000011", 
    1 => "10111101101000001000001011000111", 
    2 => "10111101100000010010000111011010", 
    3 => "10111101100111000010000100011001", 
    4 => "10111101100001101010011100001000", 
    5 => "10111101101100010100010010010100", 
    6 => "00111100111000100101000000010001", 
    7 => "10111101011011101010011010110100", 
    8 => "10111101100010101011010100000000", 
    9 => "10111101100001010011110010111111", 
    10 => "10111101011010010011000000100000", 
    11 => "10111101100001101111000000001011", 
    12 => "10111101001110000011011011001010", 
    13 => "10111101010101001010011101001100", 
    14 => "10111101100001011111110110011011", 
    15 => "10111101000101101100001110111111", 
    16 => "10111101010100011100010000000110", 
    17 => "10111101100010111001101010011011", 
    18 => "10111110001001100010010000100010", 
    19 => "10111101100011111110110110111001", 
    20 => "10111101011001010101011000111100", 
    21 => "10111101000001100111111100101001", 
    22 => "00111100100100100111110111100100", 
    23 => "00111101101101111011110011100001", 
    24 => "10111101010111101010110001011100", 
    25 => "10111101100000111010111011010001", 
    26 => "10111101100100001101000000001100", 
    27 => "10111101100010011011010100010011", 
    28 => "10111101100011100000011111101110", 
    29 => "00111101011001010111101100000001", 
    30 => "10111101100100110101011110111111", 
    31 => "10111101100010011101001001100001", 
    32 => "10111101110000011110001010011010", 
    33 => "10111101100100100101111010011101", 
    34 => "10111101100001010111000011101011", 
    35 => "10111101000111111111111100001110", 
    36 => "10111100010100101111101010100101", 
    37 => "10111101100011111000011000011110", 
    38 => "10111101100010110000101110011110", 
    39 => "10111101111111110110001110011010", 
    40 => "10111101111011101100010101011100", 
    41 => "10111101100011011110001110001110", 
    42 => "10111101011000001110010001011100", 
    43 => "10111101100001001110110110000110", 
    44 => "10111101011000001010111011010110", 
    45 => "10111101100100100011110101110010", 
    46 => "10111101100001011110010000001001", 
    47 => "10111101101111000111011110111000", 
    48 => "10111101101011100101010000111010", 
    49 => "10111101100000001111000000111001", 
    50 => "10111100111001100111010001101101", 
    51 => "00111101100001000000100001101011", 
    52 => "10111101100011101001111011111001", 
    53 => "10111101100101000000010001101011", 
    54 => "10111101010010111110101001001001", 
    55 => "10111101100010000000110001111010", 
    56 => "10111101011110101010001101110000", 
    57 => "10111101011110110001101110011010", 
    58 => "10111101011111010011101111110010", 
    59 => "10111101110111101011011110000100", 
    60 => "10111101011100001101110101010001", 
    61 => "10111101100111010101110011001000", 
    62 => "10111101100010010011101101110100", 
    63 => "10111101011000001101101011011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_40 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_40 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_40_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_40_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_40_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


