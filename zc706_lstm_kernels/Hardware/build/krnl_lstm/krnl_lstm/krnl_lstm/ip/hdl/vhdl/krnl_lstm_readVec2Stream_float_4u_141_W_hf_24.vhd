-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_24_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100001110001001010", 
    1 => "00111101100011100111111010111010", 
    2 => "00111101100101111100111000100101", 
    3 => "00111101100100111001000000000010", 
    4 => "00111101011101110010100010001011", 
    5 => "00111101101000111000111100110011", 
    6 => "00111101000101101011001011010001", 
    7 => "00111101100001110001111000001111", 
    8 => "00111101011011110000010111000011", 
    9 => "00111101100100010101010100110100", 
    10 => "00111101100010011010110000101100", 
    11 => "00111101011101100111010010010111", 
    12 => "00111101100110000011010001100101", 
    13 => "00111101001111000101001101011101", 
    14 => "00111101100001000001111110111000", 
    15 => "00111101001111100100110001001011", 
    16 => "00111101010111000111000010001111", 
    17 => "00111101100000110110111100110101", 
    18 => "00111101011010110110011100001101", 
    19 => "00111101100001101101001001000110", 
    20 => "00111101011001010100011001101111", 
    21 => "00111101100100000101110011111010", 
    22 => "00111101101100000000000011011011", 
    23 => "00111100111011010111101101100111", 
    24 => "00111101011100010001000100010101", 
    25 => "00111101100011010100011010010110", 
    26 => "00111101100010011011110111010000", 
    27 => "00111101100000100001011011010001", 
    28 => "00111101100010000100100110110001", 
    29 => "10111101011001101100101100110111", 
    30 => "00111101100000100101101100110000", 
    31 => "00111101100000100101011110110111", 
    32 => "00111101001011011011111110110100", 
    33 => "00111101100001100100000010000101", 
    34 => "00111101100011111001010010011111", 
    35 => "00111101100010110011101111101111", 
    36 => "00111100100111101101100001101101", 
    37 => "00111101100001010100101100011000", 
    38 => "00111101100001000011011000110001", 
    39 => "10111100000101011010000000001111", 
    40 => "00111101001011000111001000100001", 
    41 => "00111101100001010010000000010001", 
    42 => "00111101011101101101010110010001", 
    43 => "00111101100100000101000101111111", 
    44 => "00111101100001000000111010111100", 
    45 => "00111101011010001111000110000111", 
    46 => "00111101100100000101010011011011", 
    47 => "00111101100101110001110110101000", 
    48 => "00111101011111010111101010001001", 
    49 => "00111101100010100000001100000000", 
    50 => "00111100111011110011001100010100", 
    51 => "00111101011001101000100000111111", 
    52 => "00111101100001010011001011011011", 
    53 => "00111101100011101011010110001001", 
    54 => "00111101011000101101011001001000", 
    55 => "00111101100000111010000001010010", 
    56 => "00111101100000100011000001000110", 
    57 => "00111101100010111001110001000110", 
    58 => "00111101011101011101001101101100", 
    59 => "00111101000101011110101011100010", 
    60 => "00111101011111011101011011110000", 
    61 => "00111101100010000111101001111101", 
    62 => "00111101011100011101110111010101", 
    63 => "00111101100001110100010100010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_24 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_24 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_24_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


