-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_krnl_lstm_unit_Block_split2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    unit_ind_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    unit_ind_empty_n : IN STD_LOGIC;
    unit_ind_read : OUT STD_LOGIC;
    w_xi_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_xi_out_out_full_n : IN STD_LOGIC;
    w_xi_out_out_write : OUT STD_LOGIC;
    w_xc_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_xc_out_out_full_n : IN STD_LOGIC;
    w_xc_out_out_write : OUT STD_LOGIC;
    w_xo_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_xo_out_out_full_n : IN STD_LOGIC;
    w_xo_out_out_write : OUT STD_LOGIC;
    b_i_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_i_out_out_full_n : IN STD_LOGIC;
    b_i_out_out_write : OUT STD_LOGIC;
    b_c_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_c_out_out_full_n : IN STD_LOGIC;
    b_c_out_out_write : OUT STD_LOGIC;
    b_o_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_o_out_out_full_n : IN STD_LOGIC;
    b_o_out_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of krnl_lstm_krnl_lstm_unit_Block_split2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_xf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_xf_ce0 : STD_LOGIC;
    signal W_xf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_xi_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_xi_ce0 : STD_LOGIC;
    signal W_xi_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_xc_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_xc_ce0 : STD_LOGIC;
    signal W_xc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_xo_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_xo_ce0 : STD_LOGIC;
    signal W_xo_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_f_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_f_ce0 : STD_LOGIC;
    signal B_f_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_i_ce0 : STD_LOGIC;
    signal B_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_c_ce0 : STD_LOGIC;
    signal B_c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_o_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_o_ce0 : STD_LOGIC;
    signal B_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal unit_ind_blk_n : STD_LOGIC;
    signal w_xi_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal w_xc_out_out_blk_n : STD_LOGIC;
    signal w_xo_out_out_blk_n : STD_LOGIC;
    signal b_i_out_out_blk_n : STD_LOGIC;
    signal b_c_out_out_blk_n : STD_LOGIC;
    signal b_o_out_out_blk_n : STD_LOGIC;
    signal unit_ind_cast_i_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_f IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_xf_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xf
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_xf_address0,
        ce0 => W_xf_ce0,
        q0 => W_xf_q0);

    W_xi_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xi
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_xi_address0,
        ce0 => W_xi_ce0,
        q0 => W_xi_q0);

    W_xc_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xc
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_xc_address0,
        ce0 => W_xc_ce0,
        q0 => W_xc_q0);

    W_xo_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_W_xo
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_xo_address0,
        ce0 => W_xo_ce0,
        q0 => W_xo_q0);

    B_f_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_f
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_f_address0,
        ce0 => B_f_ce0,
        q0 => B_f_q0);

    B_i_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_i
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_i_address0,
        ce0 => B_i_ce0,
        q0 => B_i_q0);

    B_c_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_c
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_c_address0,
        ce0 => B_c_ce0,
        q0 => B_c_q0);

    B_o_U : component krnl_lstm_krnl_lstm_unit_Block_split2_proc_B_o
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_o_address0,
        ce0 => B_o_ce0,
        q0 => B_o_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, unit_ind_empty_n, w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    B_c_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    B_c_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_c_ce0 <= ap_const_logic_1;
        else 
            B_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_f_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    B_f_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_f_ce0 <= ap_const_logic_1;
        else 
            B_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_i_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    B_i_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_i_ce0 <= ap_const_logic_1;
        else 
            B_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_o_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    B_o_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_o_ce0 <= ap_const_logic_1;
        else 
            B_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_xc_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    W_xc_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_xc_ce0 <= ap_const_logic_1;
        else 
            W_xc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_xf_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    W_xf_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_xf_ce0 <= ap_const_logic_1;
        else 
            W_xf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_xi_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    W_xi_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_xi_ce0 <= ap_const_logic_1;
        else 
            W_xi_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_xo_address0 <= unit_ind_cast_i_fu_208_p1(6 - 1 downto 0);

    W_xo_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_xo_ce0 <= ap_const_logic_1;
        else 
            W_xo_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, unit_ind_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n)
    begin
                ap_block_state2 <= ((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= W_xf_q0;
    ap_return_1 <= B_f_q0;

    b_c_out_out_blk_n_assign_proc : process(b_c_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_c_out_out_blk_n <= b_c_out_out_full_n;
        else 
            b_c_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_c_out_out_din <= B_c_q0;

    b_c_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_c_out_out_write <= ap_const_logic_1;
        else 
            b_c_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    b_i_out_out_blk_n_assign_proc : process(b_i_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_i_out_out_blk_n <= b_i_out_out_full_n;
        else 
            b_i_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_i_out_out_din <= B_i_q0;

    b_i_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_i_out_out_write <= ap_const_logic_1;
        else 
            b_i_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    b_o_out_out_blk_n_assign_proc : process(b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_o_out_out_blk_n <= b_o_out_out_full_n;
        else 
            b_o_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_o_out_out_din <= B_o_q0;

    b_o_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_o_out_out_write <= ap_const_logic_1;
        else 
            b_o_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    unit_ind_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            unit_ind_blk_n <= unit_ind_empty_n;
        else 
            unit_ind_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    unit_ind_cast_i_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(unit_ind_dout),32));

    unit_ind_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, unit_ind_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (unit_ind_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            unit_ind_read <= ap_const_logic_1;
        else 
            unit_ind_read <= ap_const_logic_0;
        end if; 
    end process;


    w_xc_out_out_blk_n_assign_proc : process(w_xc_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_xc_out_out_blk_n <= w_xc_out_out_full_n;
        else 
            w_xc_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_xc_out_out_din <= W_xc_q0;

    w_xc_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w_xc_out_out_write <= ap_const_logic_1;
        else 
            w_xc_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    w_xi_out_out_blk_n_assign_proc : process(w_xi_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_xi_out_out_blk_n <= w_xi_out_out_full_n;
        else 
            w_xi_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_xi_out_out_din <= W_xi_q0;

    w_xi_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w_xi_out_out_write <= ap_const_logic_1;
        else 
            w_xi_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    w_xo_out_out_blk_n_assign_proc : process(w_xo_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_xo_out_out_blk_n <= w_xo_out_out_full_n;
        else 
            w_xo_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_xo_out_out_din <= W_xo_q0;

    w_xo_out_out_write_assign_proc : process(w_xi_out_out_full_n, w_xc_out_out_full_n, w_xo_out_out_full_n, b_i_out_out_full_n, b_c_out_out_full_n, b_o_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((b_o_out_out_full_n = ap_const_logic_0) or (b_c_out_out_full_n = ap_const_logic_0) or (b_i_out_out_full_n = ap_const_logic_0) or (w_xo_out_out_full_n = ap_const_logic_0) or (w_xc_out_out_full_n = ap_const_logic_0) or (w_xi_out_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w_xo_out_out_write <= ap_const_logic_1;
        else 
            w_xo_out_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
