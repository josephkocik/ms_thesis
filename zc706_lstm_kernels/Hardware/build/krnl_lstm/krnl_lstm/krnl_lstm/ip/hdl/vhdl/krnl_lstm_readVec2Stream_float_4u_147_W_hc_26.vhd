-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_26_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010001000010110111100", 
    1 => "00111101000000110010110100001010", 
    2 => "00111101001010001111010010101001", 
    3 => "10111101000010101001111000001110", 
    4 => "00111101000111111110000010011110", 
    5 => "10111110111001101111100001010111", 
    6 => "00111101101100000110101100101101", 
    7 => "00111101001111100001100100001011", 
    8 => "10111101000110000011100011110010", 
    9 => "00111101001001101011011001111100", 
    10 => "00111100110011010111101001100101", 
    11 => "00111101001001111010110101010100", 
    12 => "10111101101001010110110000110111", 
    13 => "10111100101011101000111000100110", 
    14 => "00111110111000011100111000111101", 
    15 => "00111100101111010110010000010000", 
    16 => "10111011010110011111111100010101", 
    17 => "00111100110101100110000001101101", 
    18 => "00111100111101000011100100001100", 
    19 => "00111101000101000111110110000110", 
    20 => "00111100101000100011101010110010", 
    21 => "10111101001000100001101100010110", 
    22 => "10111101010100011001101111000011", 
    23 => "00111101000110000111110001101010", 
    24 => "10111101000100100110101101000111", 
    25 => "10111101001010000010011001110110", 
    26 => "00111101000101000001001010101111", 
    27 => "00111101000010111011111100110001", 
    28 => "10111100111110110101000001101011", 
    29 => "00111110100001001010011100100101", 
    30 => "00111101000111000111110001011001", 
    31 => "10111100110011101011010000001010", 
    32 => "00111101000011110010110100010001", 
    33 => "10111100111000111100001101000101", 
    34 => "00111101001010110111010110000010", 
    35 => "10111100100001100100001001110001", 
    36 => "00111110001111110001001010000010", 
    37 => "00111100111000001001010101001001", 
    38 => "10111101000101011011101100001100", 
    39 => "10111100111011101001010111010000", 
    40 => "00111101001010001010001100110110", 
    41 => "10111101001001111000110011011101", 
    42 => "10111100111011100110110010000000", 
    43 => "10111101001100110010101100000100", 
    44 => "00111101000010100011000100010100", 
    45 => "10111100111001001001011111110000", 
    46 => "00111101000101001010110110101010", 
    47 => "10111101000000110111110111101011", 
    48 => "10111101000001000101101100001101", 
    49 => "00111100101000110110111011110101", 
    50 => "00111110100100100110111100111001", 
    51 => "10111101100100011000101010001110", 
    52 => "10111100111100000000010110000000", 
    53 => "00111101000010001011110011010001", 
    54 => "00111101101001000111010100111100", 
    55 => "00111101001001111100001100010010", 
    56 => "00111100111100001011100011101010", 
    57 => "10111100111010010001001011001101", 
    58 => "00111101000111001100111000111111", 
    59 => "00111100111010110101111010011110", 
    60 => "10111101001101000111000010110001", 
    61 => "00111101000100011001101101111110", 
    62 => "10111101000100010111001011111111", 
    63 => "10111101010010000010001011011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_26 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_26_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


