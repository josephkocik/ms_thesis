-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_53_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_53_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010000100101001100100", 
    1 => "00111101000000111011111100100000", 
    2 => "00111101001001101000110011110100", 
    3 => "10111101000010110000101110100111", 
    4 => "00111100111111011001110000000110", 
    5 => "10111110111001101101001000111100", 
    6 => "00111101101011111111111101100001", 
    7 => "00111101001001110110000011101111", 
    8 => "10111100111010011011011101111101", 
    9 => "00111101000001100000000001011010", 
    10 => "00111100100110100001100010101010", 
    11 => "00111101001001110110101100110100", 
    12 => "10111101101001001000111111111101", 
    13 => "10111100101110001001011001000100", 
    14 => "00111110111000011011001110010011", 
    15 => "00111100101111010000101010101010", 
    16 => "10111011010101110000111010110111", 
    17 => "00111100110100010011011011000001", 
    18 => "00111100111101110100010001110101", 
    19 => "00111101000101000100010000100000", 
    20 => "00111100101000011101000111011111", 
    21 => "10111101000111100010111011000100", 
    22 => "10111101001111111101110110000101", 
    23 => "00111101000101110101011111010010", 
    24 => "10111100110110001110000010111000", 
    25 => "10111101001001110001110100110100", 
    26 => "00111101000100111101000000101100", 
    27 => "00111101000010011111010011010001", 
    28 => "10111100111110011100101010010110", 
    29 => "00111110101011011101111100100100", 
    30 => "00111101000110101101100101000101", 
    31 => "10111100110001101111111100010011", 
    32 => "00111101000011001110111000101101", 
    33 => "10111100110110111010100111110111", 
    34 => "00111101000011011100110110010111", 
    35 => "10111100100100110001101110100110", 
    36 => "00111110011101011100010101010110", 
    37 => "00111100110011001010001111101011", 
    38 => "10111101000101010111100111000000", 
    39 => "10111100111010001101110111111000", 
    40 => "00111101001001010111101100110010", 
    41 => "10111101000010001110001011110011", 
    42 => "10111100101100011001000101001100", 
    43 => "10111101000110010101010101011001", 
    44 => "00111100110101001110100000011001", 
    45 => "10111100101001110000010010010000", 
    46 => "00111100111001110111111100010101", 
    47 => "10111100111111110110000010110101", 
    48 => "10111101000001000011110110010100", 
    49 => "00111100100111111011000100000000", 
    50 => "00111110100100100101010001100111", 
    51 => "10111101100100010100111011110001", 
    52 => "10111100110001101110100011010000", 
    53 => "00111100111010010101001010111001", 
    54 => "00111101101001000100111111001000", 
    55 => "00111101001001111000010110110000", 
    56 => "00111100110001100011001011101000", 
    57 => "10111100111001110000100011011101", 
    58 => "00111100111110000101000111100101", 
    59 => "00111100111001011101110010011110", 
    60 => "10111101001010100011101100111100", 
    61 => "00111101000100011001110101111001", 
    62 => "10111101000100011011111111101110", 
    63 => "10111101001111110111001100110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_53 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_53 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_53_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_53_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_53_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


