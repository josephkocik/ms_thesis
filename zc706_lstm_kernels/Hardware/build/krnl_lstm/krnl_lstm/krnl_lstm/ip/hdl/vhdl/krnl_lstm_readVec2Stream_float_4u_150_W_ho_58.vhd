-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_58_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_58_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110010100010110001010011", 
    1 => "10111101100011001000101100011110", 
    2 => "00111101001001111111111110101000", 
    3 => "10111101100011111101001011010011", 
    4 => "10111101100000011011110100000111", 
    5 => "00111110001010101001100101100100", 
    6 => "00111110110100111101101010111110", 
    7 => "10111101100001100110111011111001", 
    8 => "10111101011011101000000110010100", 
    9 => "10111101100000010101111000000110", 
    10 => "10111101100010111001111100001101", 
    11 => "00111101001100101010111011111110", 
    12 => "00111110100001101100110011101011", 
    13 => "00111111001100000110111100000100", 
    14 => "00111110100101100011110111100100", 
    15 => "00111110110001111110110001010110", 
    16 => "00111110110000100111010011110011", 
    17 => "00111101000111100110000101101000", 
    18 => "00111110110000100110001101110001", 
    19 => "00111101101011011010000001110001", 
    20 => "00111110101011000001101000110010", 
    21 => "10111101100110000010101110111111", 
    22 => "00111110110000010001111000110001", 
    23 => "00111110110100111101011111010111", 
    24 => "00111100111010100101000111011110", 
    25 => "00111111000110001100100011000101", 
    26 => "00111101010000011110000011001000", 
    27 => "00111110100000100111000111101110", 
    28 => "00111100110000010001110011010001", 
    29 => "00111110011101000010001100101100", 
    30 => "10111101011101100101010011110111", 
    31 => "00111101000110100010101101001010", 
    32 => "00111110110011001111100110011010", 
    33 => "10111101100100010011010011110001", 
    34 => "10111101100011101100011100011001", 
    35 => "00111111000000000100011001001101", 
    36 => "00111110001000001001111010110011", 
    37 => "10111101100100000110010010010000", 
    38 => "00111101111001110001101011100100", 
    39 => "00111110100000101101001100100101", 
    40 => "00111110110110101000001111100011", 
    41 => "10111101100011001011000101010101", 
    42 => "10111101011010101000010000111101", 
    43 => "10111101100000101000010100011000", 
    44 => "10111101011110100110000110001101", 
    45 => "00111101001000011010001111000000", 
    46 => "10111101100011100111101101100010", 
    47 => "10111101001101101001100000111101", 
    48 => "10111100101110111101101111000101", 
    49 => "00111100111101111011010110110010", 
    50 => "00111110110011010001011000001100", 
    51 => "00111110110110010010101001001011", 
    52 => "10111101100010100100001101011010", 
    53 => "10111101100000001011100000111101", 
    54 => "00111110010100010011111100110101", 
    55 => "00111010110001110001010100101001", 
    56 => "10111101100010101010011111111000", 
    57 => "00111100000001001011100011100001", 
    58 => "10111101001011101010011110010110", 
    59 => "00111110100111011101100100010000", 
    60 => "00111100001100101011111110100101", 
    61 => "10111100100010000100000100001000", 
    62 => "10111101100010011001000110010011", 
    63 => "10111101100010101101101101011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_58 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_58 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_58_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_58_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_58_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


