-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_41_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_41_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010000011111011001010", 
    1 => "10111101000001000001010110101011", 
    2 => "10111101001001111110110111000000", 
    3 => "00111101000010111011101010101000", 
    4 => "10111100111101010001101111001100", 
    5 => "00111110111001101101000110011001", 
    6 => "10111101101100000110001110100110", 
    7 => "10111101001000110000100001110111", 
    8 => "00111100111000011101110010000011", 
    9 => "10111101000000100001100110011001", 
    10 => "10111100100110000101111110111000", 
    11 => "10111101001001110101111001000101", 
    12 => "00111101101001011000111101111000", 
    13 => "00111100101100101001010111011001", 
    14 => "10111110111000011010111111101011", 
    15 => "10111100101111001111010001101101", 
    16 => "00111011010101100101000100100111", 
    17 => "10111100110100010011111001010111", 
    18 => "10111100111101010100100011001010", 
    19 => "10111101000101000011110100011100", 
    20 => "10111100101000011011100110100000", 
    21 => "00111101001000000111100000100110", 
    22 => "00111101010011001111111000110000", 
    23 => "10111101000110000001111011100010", 
    24 => "00111100110101101010110011011100", 
    25 => "00111101001001010001110111000010", 
    26 => "10111101000100111100011100101001", 
    27 => "10111101000010110001001101010101", 
    28 => "00111100111110011011001100111111", 
    29 => "10111110110001101100111010001010", 
    30 => "10111101000110111001001010000101", 
    31 => "00111100110001101110111110001101", 
    32 => "10111101000011100100110100011110", 
    33 => "00111100110111000101001001001111", 
    34 => "10111101000010011001101000001111", 
    35 => "00111100100010000001001010101010", 
    36 => "10111110100100110110011101111000", 
    37 => "10111100110011010000100010111101", 
    38 => "00111101000101010111000000111000", 
    39 => "00111100111011000110100111000111", 
    40 => "10111101001001110111011101010111", 
    41 => "00111101000001010010000011101000", 
    42 => "00111100101100110111000000001010", 
    43 => "00111101000101001000010111010010", 
    44 => "10111100110100100001001010100010", 
    45 => "00111100101001010101101110110011", 
    46 => "10111100111000111111110011111001", 
    47 => "00111101000000110110101110110000", 
    48 => "00111101000001000100101101111001", 
    49 => "10111100100111111001011100110001", 
    50 => "10111110100100100110010101101100", 
    51 => "00111101100100010111000110000111", 
    52 => "00111100110001101110100110101100", 
    53 => "10111100111100110100100100111010", 
    54 => "10111101101001000100100011111111", 
    55 => "10111101001001110111100101101100", 
    56 => "10111100110100100000100110011111", 
    57 => "00111100111001110110111100101100", 
    58 => "10111100111100011100100011101001", 
    59 => "10111100111010010110011000110011", 
    60 => "00111101001010000110011111110110", 
    61 => "10111101000100011001110111011001", 
    62 => "00111101000100010111101000011111", 
    63 => "00111101001111100100110100110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_41 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_41 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_41_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_41_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_41_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


