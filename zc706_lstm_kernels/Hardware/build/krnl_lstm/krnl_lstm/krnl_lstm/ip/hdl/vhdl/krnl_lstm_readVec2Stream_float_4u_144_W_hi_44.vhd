-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_44_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_44_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000010000010010011", 
    1 => "10111101001101101001000110101011", 
    2 => "10111101000100001110110000010101", 
    3 => "10111101000010000000101100001110", 
    4 => "10111101011011111011011101111111", 
    5 => "10111110000100101000011110101100", 
    6 => "10111101111101001001110000101011", 
    7 => "10111101100011000011100101010011", 
    8 => "10111101010111000010110110111101", 
    9 => "10111101011111101011000000010001", 
    10 => "10111101000101110100000000000010", 
    11 => "10111101000100011111011001111110", 
    12 => "00111100010111111110011111111001", 
    13 => "10111101001100111110010111010101", 
    14 => "10111110100011110100010100010001", 
    15 => "10111111010101010100111001011001", 
    16 => "10111111010110000101001111111100", 
    17 => "10111101000101111001001010110010", 
    18 => "00111110000111111001110111010000", 
    19 => "10111101001000011011000101110001", 
    20 => "10111111010110000001111101100100", 
    21 => "10111101000111101011011110000000", 
    22 => "00111101010010101101111101100011", 
    23 => "10111100110110111111000010010000", 
    24 => "10111101010111010100011011110111", 
    25 => "10111110010111100001111100011001", 
    26 => "10111101000111110100010100101110", 
    27 => "10111101000111110110110000111000", 
    28 => "10111101000111100011001111000001", 
    29 => "10111110110111110011111011110101", 
    30 => "10111101010010011100010111000010", 
    31 => "10111101000101100010111010101010", 
    32 => "10111011100000101110000111001111", 
    33 => "10111101000101001100110101010101", 
    34 => "10111101011111110100101000010100", 
    35 => "10111101001101000100101101110111", 
    36 => "10111110101101000011110010010100", 
    37 => "10111101000101010010111111001110", 
    38 => "10111101001000111100110000001111", 
    39 => "10111100011010100101010110100011", 
    40 => "10111100011010110011011000001110", 
    41 => "10111101011010101010110000100011", 
    42 => "10111101001011110111001111011011", 
    43 => "10111101100000110000100110000000", 
    44 => "10111101010110100001100101010101", 
    45 => "10111101000001101110111101011101", 
    46 => "10111101011100000010101010111111", 
    47 => "10111101010001101111010110110011", 
    48 => "10111101000001110011010010001010", 
    49 => "10111101001010001011100111100010", 
    50 => "00111100000110111000100000001010", 
    51 => "10111101110111111001000101100100", 
    52 => "10111101000101101011011100000101", 
    53 => "10111101011010000101100110011001", 
    54 => "10111111010011000111001000111001", 
    55 => "10111101000111011110011101010110", 
    56 => "10111101010011100100001010110011", 
    57 => "10111101000110111000001011100010", 
    58 => "10111101011110000010101010010011", 
    59 => "10111100011001001010010001100100", 
    60 => "10111101011101100000100110101110", 
    61 => "10111101001100101000100110100100", 
    62 => "10111101000110001010000011011010", 
    63 => "10111101011110110001111001000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_44 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_44 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_44_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_44_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_44_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


