-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_33_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_33_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100001011010001101", 
    1 => "00111101100011110010010110011000", 
    2 => "00111101100101111111101111011001", 
    3 => "00111101100100111011010001100011", 
    4 => "00111101011101111100000001111010", 
    5 => "00111101101000111001001110100000", 
    6 => "00111101000101100011010101111010", 
    7 => "00111101100001111111110000011000", 
    8 => "00111101011011110000001000011101", 
    9 => "00111101100100110010000101011101", 
    10 => "00111101100010011000001110110010", 
    11 => "00111101011101100111101101011100", 
    12 => "00111101100110001000111001110010", 
    13 => "00111101001111001111000000001111", 
    14 => "00111101100001000001001011111111", 
    15 => "00111101001111100101011101101011", 
    16 => "00111101010111000111110011100100", 
    17 => "00111101100000110100110110001110", 
    18 => "00111101011010101100001010011001", 
    19 => "00111101100001101011100100000111", 
    20 => "00111101011001010011100111001110", 
    21 => "00111101100100000110110011101111", 
    22 => "00111101101100000100000101100010", 
    23 => "00111100111011001000110000001001", 
    24 => "00111101011100100000001001011000", 
    25 => "00111101100011010101011101101011", 
    26 => "00111101100010011010000110110011", 
    27 => "00111101100000011111101010100001", 
    28 => "00111101100010000010100001010110", 
    29 => "10111101011001101101101101101101", 
    30 => "00111101100001000001111001111100", 
    31 => "00111101100000100011010000111010", 
    32 => "00111101001011010011000001010100", 
    33 => "00111101100001100111001011100111", 
    34 => "00111101100100010101100011110101", 
    35 => "00111101100010110100000100110000", 
    36 => "00111100100111101101011010101100", 
    37 => "00111101100001011000000110111001", 
    38 => "00111101100001000001101111000011", 
    39 => "10111100000101101011111010001010", 
    40 => "00111101001011000011110010100101", 
    41 => "00111101100001010110010110100001", 
    42 => "00111101011101101001100001101010", 
    43 => "00111101100100101110001101010110", 
    44 => "00111101100010000000000101001001", 
    45 => "00111101011010000110111100011100", 
    46 => "00111101100100011000000001011010", 
    47 => "00111101100101110111100111101101", 
    48 => "00111101011111010010011111110010", 
    49 => "00111101100010100000000010111101", 
    50 => "00111100111011100010011110110110", 
    51 => "00111101011001100000001010000110", 
    52 => "00111101100001010110111001001010", 
    53 => "00111101100011101111001010000100", 
    54 => "00111101011000101100011100100110", 
    55 => "00111101100000111001000001101110", 
    56 => "00111101100000110111111111010010", 
    57 => "00111101100010110111100000001101", 
    58 => "00111101011101011000011110000000", 
    59 => "00111101000101011010011111111101", 
    60 => "00111101100000000011000000010010", 
    61 => "00111101100010000111011010001101", 
    62 => "00111101011100110011110010110011", 
    63 => "00111101100010000110110001111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_33 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_33 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_33_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_33_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_33_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


