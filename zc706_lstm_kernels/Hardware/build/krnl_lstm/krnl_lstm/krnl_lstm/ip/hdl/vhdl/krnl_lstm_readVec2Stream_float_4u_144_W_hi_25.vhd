-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_25_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110111101000110010111100", 
    1 => "10111011111100110000001100111100", 
    2 => "00111101101100101010010100011111", 
    3 => "00111101001110110110000011011101", 
    4 => "00111011110101011010000101010100", 
    5 => "10111101000101110011001001101100", 
    6 => "11000000001100111000001010110101", 
    7 => "10111100001100101000100000110010", 
    8 => "10111100110101111101101101110010", 
    9 => "10111011110101111110111101110111", 
    10 => "10111100111001101100011010010010", 
    11 => "10111100111000110001011010111010", 
    12 => "10111100110001011111100010011100", 
    13 => "10111011011111110101000011111100", 
    14 => "10111110001111001001101011001010", 
    15 => "10111101001111011101111011000010", 
    16 => "10111101001000111001110100000101", 
    17 => "10111100100001111011001101001111", 
    18 => "10111111000000100110101110111111", 
    19 => "10111100110000010110001010101100", 
    20 => "10111101000001001001111100010011", 
    21 => "00111110111111101001000011011110", 
    22 => "11000000000010101100010111010000", 
    23 => "10111110111101000010110111101000", 
    24 => "10111100001100001110110011100111", 
    25 => "00111111101001011011110100000000", 
    26 => "10111100101000010110010000001001", 
    27 => "00111101001010000100001000100110", 
    28 => "10111100010110101010010100001010", 
    29 => "00111101110100101111011100011000", 
    30 => "10111100000111001000010100101001", 
    31 => "10111100011011011101010100100001", 
    32 => "00111111001001100100000100000111", 
    33 => "10111010111011000100110001101100", 
    34 => "10111011101010101110011110101110", 
    35 => "10111101001110100101101000100100", 
    36 => "00111101100100001000000111000100", 
    37 => "00111011000110100111101110110111", 
    38 => "10111100101010001110001100111101", 
    39 => "10111110001001010100010001100010", 
    40 => "10111101110110000011011010111010", 
    41 => "00111011100010101110010110001000", 
    42 => "10111011011100111001001110110011", 
    43 => "10111100000001111100111011000111", 
    44 => "10111100011110110011111011011010", 
    45 => "10111100101111100001101011010100", 
    46 => "10111011101000011010000110011101", 
    47 => "10111011101000000111001010100010", 
    48 => "00111010011010000110000111010110", 
    49 => "10111101000100101111111001000001", 
    50 => "10111111100011010010111001101110", 
    51 => "11000000001010010000000101011101", 
    52 => "00111011010001100001000111010011", 
    53 => "10111011100100101011010011101111", 
    54 => "10111101000011101110101000010001", 
    55 => "10111100110011110111010000001001", 
    56 => "10111100000101010111100100011000", 
    57 => "10111100111011001101100000001011", 
    58 => "10111011100110011101111000111001", 
    59 => "00111101110001000010101011101011", 
    60 => "10111011110000010111101000000000", 
    61 => "10111101001000011110000101000101", 
    62 => "00111100100101110010011101111011", 
    63 => "10111100000001110000000000001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_25 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_25_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


