-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000001100100001000010000", 
    1 => "10111101100011111000000001110001", 
    2 => "00111110111100011000010111001000", 
    3 => "10111101100110110111110011010110", 
    4 => "10111101100101011001110101110100", 
    5 => "00111111001001110110011110101110", 
    6 => "10111111011000110000011101100010", 
    7 => "10111101101000110011000010100100", 
    8 => "10111101100001110010011011111011", 
    9 => "10111101100111100000110111010101", 
    10 => "10111101100011001000111101100010", 
    11 => "00111110111001101001000111001001", 
    12 => "00111111011100100010010000110111", 
    13 => "11000000000110100100001110100101", 
    14 => "10111111100011101011101011001100", 
    15 => "10111100111100111101101101000010", 
    16 => "00111100110000111101011000110101", 
    17 => "00111110110100000001011100001101", 
    18 => "00111111110011111111001010110000", 
    19 => "00111111001111011011000110101110", 
    20 => "00111110111010001110100001110011", 
    21 => "10111101100111000010101011100110", 
    22 => "00111111011011010000011000010001", 
    23 => "10111111100001010001101001100100", 
    24 => "00111110000000000110001000100011", 
    25 => "10111110111100100101100000001101", 
    26 => "00111110100100011010000100001000", 
    27 => "00111100100101100010101110101110", 
    28 => "00111110001110111111111110110110", 
    29 => "10111010101101001000011101010110", 
    30 => "10111101100001001110110111010011", 
    31 => "00111110110100000110100110000101", 
    32 => "00111111001101011001001100101010", 
    33 => "10111101011101011110101101101011", 
    34 => "10111101100101010010100111011010", 
    35 => "00111111010011110110110001110110", 
    36 => "00111110110011010000010110001110", 
    37 => "10111101100111001010101100100111", 
    38 => "00111110110101100000101100000001", 
    39 => "00111101010110111101100111111111", 
    40 => "00111110101111110001100110010101", 
    41 => "10111101100110110110111111101100", 
    42 => "10111101011100000011001011001111", 
    43 => "10111101010101100100110100010110", 
    44 => "10111101100011101010000011110001", 
    45 => "00111110110111010111001011111110", 
    46 => "10111101011011101011111010001000", 
    47 => "10111101011001000001010110101011", 
    48 => "00111001000001101110101000110000", 
    49 => "00111101111100101011100111000010", 
    50 => "00111111011011101110000100001001", 
    51 => "00111110111001011100010011111101", 
    52 => "10111101100110001100000101000000", 
    53 => "10111101100010101110111101001101", 
    54 => "00111110101111100100001011100001", 
    55 => "00111100011010101110000101011100", 
    56 => "10111101100111010010000111011110", 
    57 => "00111101110011100001000110001011", 
    58 => "10111101001101001010100100010000", 
    59 => "00111100101001111010011001100010", 
    60 => "00111100100110000000010111110101", 
    61 => "00111101110011011101101011000111", 
    62 => "10111101100000110110110100111000", 
    63 => "10111101100101111001010101100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_13 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_13_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


