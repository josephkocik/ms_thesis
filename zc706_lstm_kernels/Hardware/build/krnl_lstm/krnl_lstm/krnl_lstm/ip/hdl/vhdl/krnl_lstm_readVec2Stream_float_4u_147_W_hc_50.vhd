-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_50_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_50_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001011100000001001100", 
    1 => "00111100111011100000011101110110", 
    2 => "00111101000011101010001101000101", 
    3 => "10111100111101011010100011100000", 
    4 => "00111101000110100100001011011101", 
    5 => "10111101010011111100100110110101", 
    6 => "00111100111101010101101100101100", 
    7 => "00111101001011111110010011011010", 
    8 => "10111101000101111010001110100110", 
    9 => "00111101000111110111100010000000", 
    10 => "00111100111010000000101111011001", 
    11 => "00111101001001000000110101101000", 
    12 => "10111101111100011010110100011010", 
    13 => "10111100101001111011100000111010", 
    14 => "00111110010001111111011100010011", 
    15 => "10111101001101110011011100111010", 
    16 => "10111101010011111000111101001000", 
    17 => "00111100101011101001101010111011", 
    18 => "00111100111100010010010101111111", 
    19 => "00111101000000011100000001101011", 
    20 => "00111101010100111011100101001110", 
    21 => "10111100100000001010000111101011", 
    22 => "10111100111100101110000011100111", 
    23 => "00111101000110110011100101010110", 
    24 => "10111101000011010010101001000101", 
    25 => "10111101000010110101101110001101", 
    26 => "00111101000000000011000010111001", 
    27 => "00111101000011111011011000010110", 
    28 => "10111100110011000011100100000100", 
    29 => "10111101110000111010110100010000", 
    30 => "00111101000110100000101101011101", 
    31 => "10111100101010011110111101011100", 
    32 => "00111101000011100101001110010100", 
    33 => "10111100110000110111100111011100", 
    34 => "00111101001000100100011001110001", 
    35 => "10111100110001011111110110000001", 
    36 => "10111101010101001101010001110110", 
    37 => "00111100110001011110001100101001", 
    38 => "10111101000000100110100100001101", 
    39 => "10111100111001110100100100010001", 
    40 => "00111101001010011110110010001101", 
    41 => "10111101000110101111110011001001", 
    42 => "10111100110110111101100011010110", 
    43 => "10111101001010011101110010010100", 
    44 => "00111101000000001110101101001000", 
    45 => "10111100110111011101011001000010", 
    46 => "00111101000011010110011001010001", 
    47 => "10111100110011110001111100001111", 
    48 => "10111101000010110100101010110001", 
    49 => "00111100101111001110101001100010", 
    50 => "00111101010111001110111100001000", 
    51 => "10111101001001000101011010100000", 
    52 => "10111100110101111101111110000110", 
    53 => "00111100110111000111010011111010", 
    54 => "00111101001010111101101100111100", 
    55 => "00111101001001000001001101111101", 
    56 => "00111100111000000100010010100001", 
    57 => "10111101000000011110101010110111", 
    58 => "00111101000100100001101100101000", 
    59 => "00111100111011111001000011010101", 
    60 => "10111101001011001100010100001010", 
    61 => "00111101000000101000001000101010", 
    62 => "10111101000100000101010110010000", 
    63 => "10111101001110010011111000111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_50 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_50 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_50_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_50_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_50_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


