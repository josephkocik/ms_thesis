-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_35_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_35_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010111100001110010001011001", 
    1 => "10111100101011110110101011111101", 
    2 => "10111101011000110010011001011110", 
    3 => "10111101011001001010111110001111", 
    4 => "10111101000010111000000001101101", 
    5 => "00111101001000010110001010011101", 
    6 => "10111100110011110000111100110010", 
    7 => "10111101000100010111000011100011", 
    8 => "10111011001100000100101011000001", 
    9 => "10111101000101111010001010100110", 
    10 => "00111100111101111011100011100011", 
    11 => "10111001101110100000001100000111", 
    12 => "10111101011000100010110010011111", 
    13 => "10111101001100101001010111010011", 
    14 => "00111101000001111001011111110101", 
    15 => "10111101001010001011100110100010", 
    16 => "10111101001010001000011111111100", 
    17 => "10111100111110010010110001001010", 
    18 => "00111110110001101111100000100010", 
    19 => "10111100100001101010001111000110", 
    20 => "10111101001010000101111010101100", 
    21 => "10111101010110101011100011001011", 
    22 => "10111101110100001000100001110001", 
    23 => "10111101110010000000101111100011", 
    24 => "10111101000101101011111101011100", 
    25 => "00111011100000110110001010110110", 
    26 => "10111100100110010110100010011110", 
    27 => "10111100101110001000011100010001", 
    28 => "10111100111011100110111001010101", 
    29 => "10111101111000111001111011001011", 
    30 => "00111100001000101010010110111110", 
    31 => "10111101000001001111101101011010", 
    32 => "10111100001111110011111110000011", 
    33 => "10111100111000000101010011001001", 
    34 => "10111101000101011100110101010110", 
    35 => "10111101011010110101011000110101", 
    36 => "10111101100100010000100111000010", 
    37 => "10111101000000111110011110010000", 
    38 => "10111100100011010011000101110100", 
    39 => "00111101001000010001011000111011", 
    40 => "00111101001110010001111001111100", 
    41 => "10111101000100000011101111111100", 
    42 => "10111101000110100101100111001000", 
    43 => "10111101000011000110010000110000", 
    44 => "10111101000101000110001001001111", 
    45 => "10111100011000100001101010010110", 
    46 => "10111101000110000101100100000011", 
    47 => "10111100110001000110001001010000", 
    48 => "00111011010110000011100010110101", 
    49 => "00111101000001101010100101101111", 
    50 => "10111111010111010001000111010111", 
    51 => "10111101111001011011010101100110", 
    52 => "10111101000010100101001101011000", 
    53 => "10111101000011101111111111010010", 
    54 => "10111101001001001000010101000100", 
    55 => "10111011101100011110111100000101", 
    56 => "10111101000000000110110000111010", 
    57 => "00111110000110001100100010000111", 
    58 => "10111101000110110011100100011110", 
    59 => "00111101001111000110110010001010", 
    60 => "10111101000010101110010011110101", 
    61 => "10111100111100011010000000000111", 
    62 => "10111100010111010010000111100101", 
    63 => "10111101001000010010000000011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_35 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_35 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_35_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_35_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_35_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


