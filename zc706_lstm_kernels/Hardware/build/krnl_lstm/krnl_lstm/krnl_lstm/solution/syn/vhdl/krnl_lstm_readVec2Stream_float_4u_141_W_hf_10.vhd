-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_10_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111100001101010111011", 
    1 => "10111101100011110001011000001111", 
    2 => "10111101100110000010011010001000", 
    3 => "10111101100100110010110101101000", 
    4 => "10111101011110000101101111110101", 
    5 => "10111101101000111001000011000000", 
    6 => "10111101000101101011001100110101", 
    7 => "10111101100001111111001000111110", 
    8 => "10111101011011111011000010110111", 
    9 => "10111101100100011111100100011110", 
    10 => "10111101100010011010101100001100", 
    11 => "10111101011101100111011110010011", 
    12 => "10111101100110001000111110011001", 
    13 => "10111101001111001110101001110000", 
    14 => "10111101100001000001101010100001", 
    15 => "10111101001111100101000011110001", 
    16 => "10111101010111000111011101000100", 
    17 => "10111101100000110110001011000111", 
    18 => "10111101011010110110010111101011", 
    19 => "10111101100001101100100001000101", 
    20 => "10111101011001010100001100101101", 
    21 => "10111101100100001010010110011100", 
    22 => "10111101101100000011011101001000", 
    23 => "10111100111011010111000100101001", 
    24 => "10111101011100110001101011110101", 
    25 => "10111101100011010101001101011011", 
    26 => "10111101100010011011001010000010", 
    27 => "10111101100000100001010110011110", 
    28 => "10111101100010000011110101000001", 
    29 => "00111101011001101100111011111000", 
    30 => "10111101100000111110011000100110", 
    31 => "10111101100000100100101011010111", 
    32 => "10111101001011011100000110010100", 
    33 => "10111101100001011111100011010100", 
    34 => "10111101100100000101110011110101", 
    35 => "10111101100010101111001110111100", 
    36 => "10111100100111101101110011011111", 
    37 => "10111101100001001111000010001001", 
    38 => "10111101100001000010101110111011", 
    39 => "00111100000101001111111110111000", 
    40 => "10111101001011001001011110011011", 
    41 => "10111101100001001100000101001000", 
    42 => "10111101011101111010011100100110", 
    43 => "10111101100100011101100001010110", 
    44 => "10111101100001111000011110100110", 
    45 => "10111101011010001110100011010010", 
    46 => "10111101100100001001100001100101", 
    47 => "10111101100101110111011110111011", 
    48 => "10111101011111010101000010011000", 
    49 => "10111101100010100000001101110011", 
    50 => "10111100111011110001010100000110", 
    51 => "10111101011001100111100100111000", 
    52 => "10111101100001001101000111001001", 
    53 => "10111101100011101111000110000000", 
    54 => "10111101011000101101000110011101", 
    55 => "10111101100000111001100111110001", 
    56 => "10111101100000111001101011000110", 
    57 => "10111101100010111001111100010100", 
    58 => "10111101011101011100101001000010", 
    59 => "10111101000101011001110100101111", 
    60 => "10111101100000000011101011001001", 
    61 => "10111101100010000111101000111001", 
    62 => "10111101011100110011101001010000", 
    63 => "10111101100010000111101110011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_10 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_10_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


