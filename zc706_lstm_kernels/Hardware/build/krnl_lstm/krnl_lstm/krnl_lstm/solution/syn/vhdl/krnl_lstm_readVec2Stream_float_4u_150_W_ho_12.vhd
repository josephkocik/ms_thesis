-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_12_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100100001110000101101", 
    1 => "00111101110010111000101011011111", 
    2 => "00111101101010111011000000001011", 
    3 => "00111101110011000010010110100111", 
    4 => "00111101110001110011001010010110", 
    5 => "00111110011111000001110001101100", 
    6 => "10111010001010010000111001011010", 
    7 => "00111101110000110001000001100110", 
    8 => "00111101101100011010011100001101", 
    9 => "00111101110010011001011011010101", 
    10 => "00111101110110011001010111001011", 
    11 => "00111110100100010101001010101001", 
    12 => "00111110101101011000100111000000", 
    13 => "10111111011010010011011100011011", 
    14 => "00111110100100100110010000011011", 
    15 => "00111110111000111110110111011011", 
    16 => "00111111000111001100000000010100", 
    17 => "00111110110011010011000010110111", 
    18 => "10111110100101101011110100010000", 
    19 => "00111110001101001111100001100100", 
    20 => "00111111001000001010001011111001", 
    21 => "00111101110100000011100100100001", 
    22 => "00111110101101001011000010001111", 
    23 => "10111101110010000000110110111000", 
    24 => "00111110010001110001001101111011", 
    25 => "10111110111011001001011111010010", 
    26 => "00111110011110101101000101100010", 
    27 => "10111110100100101010111110001101", 
    28 => "00111110001001101101110000010010", 
    29 => "00111110101100010100111110100101", 
    30 => "00111101101011111001001100101101", 
    31 => "00111110110011110011011000010000", 
    32 => "10111110001000000100011100101101", 
    33 => "00111101110010100111111011111001", 
    34 => "00111101110001001001000010101110", 
    35 => "00111110101101110101011011101110", 
    36 => "00111110110100000011100011010111", 
    37 => "00111101110011101111000011000110", 
    38 => "00111110011011000011011111000001", 
    39 => "10111110100011101101110110110111", 
    40 => "10111110101010011010101101111001", 
    41 => "00111101110011110111011011010001", 
    42 => "00111101101011010110000001101010", 
    43 => "00111101101101000110101110101010", 
    44 => "00111101101101001010110010100101", 
    45 => "00111110100100101011000000000100", 
    46 => "00111101110010110111111101011101", 
    47 => "00111101101001000101011110010111", 
    48 => "00111101111111000001111100100000", 
    49 => "00111101111000010111100001010101", 
    50 => "10111101100101111011110011000011", 
    51 => "00111011000010100110111001111001", 
    52 => "00111101110000101010110111010111", 
    53 => "00111101101101101110110000100110", 
    54 => "00111110110100000001011100100010", 
    55 => "00111110000001111000000000010001", 
    56 => "00111101110010000111001010010000", 
    57 => "00111101100101001110101111010011", 
    58 => "00111110000011000001001001011111", 
    59 => "10111110111001010110011000110010", 
    60 => "00111100110010011001100010101011", 
    61 => "00111101101101001001111110000011", 
    62 => "00111101110010101000101101000011", 
    63 => "00111101110001010100100010010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_12 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_12_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


