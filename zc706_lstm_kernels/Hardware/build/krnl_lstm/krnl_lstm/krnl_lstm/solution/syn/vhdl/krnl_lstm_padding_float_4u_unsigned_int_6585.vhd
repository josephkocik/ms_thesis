-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_padding_float_4u_unsigned_int_6585 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    l_data2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    l_data2_empty_n : IN STD_LOGIC;
    l_data2_read : OUT STD_LOGIC;
    l_pad3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_pad3_full_n : IN STD_LOGIC;
    l_pad3_write : OUT STD_LOGIC );
end;


architecture behav of krnl_lstm_padding_float_4u_unsigned_int_6585 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal l_data2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal l_pad3_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state16 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l_data2_empty_n, l_pad3_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state1 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state10 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state11 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state12 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state13 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state14 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state15_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state15 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state16 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state2 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state3 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state4 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state5 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state6 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state7 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state8 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(l_data2_empty_n, l_pad3_full_n)
    begin
                ap_block_state9 <= ((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, l_data2_empty_n, l_pad3_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(l_data2_empty_n, l_pad3_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    l_data2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_data2_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_data2_blk_n <= l_data2_empty_n;
        else 
            l_data2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_data2_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_data2_empty_n, l_pad3_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_data2_read <= ap_const_logic_1;
        else 
            l_data2_read <= ap_const_logic_0;
        end if; 
    end process;


    l_pad3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_pad3_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_pad3_blk_n <= l_pad3_full_n;
        else 
            l_pad3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_pad3_din <= l_data2_dout;

    l_pad3_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, l_data2_empty_n, l_pad3_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l_pad3_full_n = ap_const_logic_0) or (l_data2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_pad3_write <= ap_const_logic_1;
        else 
            l_pad3_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
