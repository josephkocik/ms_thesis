-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_readVec2Stream_float_32u_152 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    str_in12_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    str_in12_full_n : IN STD_LOGIC;
    str_in12_write : OUT STD_LOGIC;
    p_in_offset_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    p_in_offset_empty_n : IN STD_LOGIC;
    p_in_offset_read : OUT STD_LOGIC );
end;


architecture behav of krnl_lstm_readVec2Stream_float_32u_152 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal W_hi_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_0_ce0 : STD_LOGIC;
    signal W_hi_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_1_ce0 : STD_LOGIC;
    signal W_hi_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_2_ce0 : STD_LOGIC;
    signal W_hi_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_3_ce0 : STD_LOGIC;
    signal W_hi_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_4_ce0 : STD_LOGIC;
    signal W_hi_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_5_ce0 : STD_LOGIC;
    signal W_hi_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_6_ce0 : STD_LOGIC;
    signal W_hi_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_7_ce0 : STD_LOGIC;
    signal W_hi_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_8_ce0 : STD_LOGIC;
    signal W_hi_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_9_ce0 : STD_LOGIC;
    signal W_hi_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_10_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_10_ce0 : STD_LOGIC;
    signal W_hi_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_11_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_11_ce0 : STD_LOGIC;
    signal W_hi_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_12_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_12_ce0 : STD_LOGIC;
    signal W_hi_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_13_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_13_ce0 : STD_LOGIC;
    signal W_hi_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_14_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_14_ce0 : STD_LOGIC;
    signal W_hi_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_15_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_15_ce0 : STD_LOGIC;
    signal W_hi_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_16_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_16_ce0 : STD_LOGIC;
    signal W_hi_16_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_17_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_17_ce0 : STD_LOGIC;
    signal W_hi_17_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_18_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_18_ce0 : STD_LOGIC;
    signal W_hi_18_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_19_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_19_ce0 : STD_LOGIC;
    signal W_hi_19_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_20_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_20_ce0 : STD_LOGIC;
    signal W_hi_20_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_21_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_21_ce0 : STD_LOGIC;
    signal W_hi_21_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_22_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_22_ce0 : STD_LOGIC;
    signal W_hi_22_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_23_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_23_ce0 : STD_LOGIC;
    signal W_hi_23_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_24_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_24_ce0 : STD_LOGIC;
    signal W_hi_24_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_25_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_25_ce0 : STD_LOGIC;
    signal W_hi_25_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_26_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_26_ce0 : STD_LOGIC;
    signal W_hi_26_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_27_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_27_ce0 : STD_LOGIC;
    signal W_hi_27_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_28_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_28_ce0 : STD_LOGIC;
    signal W_hi_28_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_29_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_29_ce0 : STD_LOGIC;
    signal W_hi_29_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_30_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_30_ce0 : STD_LOGIC;
    signal W_hi_30_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_hi_31_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal W_hi_31_ce0 : STD_LOGIC;
    signal W_hi_31_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal str_in12_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_in_offset_blk_n : STD_LOGIC;
    signal p_in_offset_cast_i_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_val_V_248_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_247_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_246_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_245_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_244_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_243_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_242_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_241_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_240_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_239_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_238_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_237_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_236_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_235_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_234_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_233_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_232_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_231_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_230_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_229_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_228_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_227_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_226_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_225_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_224_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_223_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_222_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_221_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_220_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_219_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_218_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_17 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_18 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_19 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_20 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_21 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_22 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_23 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_24 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_25 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_26 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_27 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_28 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_29 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_30 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_lstm_readVec2Stream_float_32u_152_W_hi_31 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_hi_0_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_0
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_0_address0,
        ce0 => W_hi_0_ce0,
        q0 => W_hi_0_q0);

    W_hi_1_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_1
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_1_address0,
        ce0 => W_hi_1_ce0,
        q0 => W_hi_1_q0);

    W_hi_2_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_2
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_2_address0,
        ce0 => W_hi_2_ce0,
        q0 => W_hi_2_q0);

    W_hi_3_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_3
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_3_address0,
        ce0 => W_hi_3_ce0,
        q0 => W_hi_3_q0);

    W_hi_4_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_4_address0,
        ce0 => W_hi_4_ce0,
        q0 => W_hi_4_q0);

    W_hi_5_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_5
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_5_address0,
        ce0 => W_hi_5_ce0,
        q0 => W_hi_5_q0);

    W_hi_6_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_6
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_6_address0,
        ce0 => W_hi_6_ce0,
        q0 => W_hi_6_q0);

    W_hi_7_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_7
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_7_address0,
        ce0 => W_hi_7_ce0,
        q0 => W_hi_7_q0);

    W_hi_8_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_8
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_8_address0,
        ce0 => W_hi_8_ce0,
        q0 => W_hi_8_q0);

    W_hi_9_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_9
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_9_address0,
        ce0 => W_hi_9_ce0,
        q0 => W_hi_9_q0);

    W_hi_10_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_10
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_10_address0,
        ce0 => W_hi_10_ce0,
        q0 => W_hi_10_q0);

    W_hi_11_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_11
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_11_address0,
        ce0 => W_hi_11_ce0,
        q0 => W_hi_11_q0);

    W_hi_12_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_12
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_12_address0,
        ce0 => W_hi_12_ce0,
        q0 => W_hi_12_q0);

    W_hi_13_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_13
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_13_address0,
        ce0 => W_hi_13_ce0,
        q0 => W_hi_13_q0);

    W_hi_14_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_14
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_14_address0,
        ce0 => W_hi_14_ce0,
        q0 => W_hi_14_q0);

    W_hi_15_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_15
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_15_address0,
        ce0 => W_hi_15_ce0,
        q0 => W_hi_15_q0);

    W_hi_16_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_16
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_16_address0,
        ce0 => W_hi_16_ce0,
        q0 => W_hi_16_q0);

    W_hi_17_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_17
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_17_address0,
        ce0 => W_hi_17_ce0,
        q0 => W_hi_17_q0);

    W_hi_18_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_18
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_18_address0,
        ce0 => W_hi_18_ce0,
        q0 => W_hi_18_q0);

    W_hi_19_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_19
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_19_address0,
        ce0 => W_hi_19_ce0,
        q0 => W_hi_19_q0);

    W_hi_20_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_20
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_20_address0,
        ce0 => W_hi_20_ce0,
        q0 => W_hi_20_q0);

    W_hi_21_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_21
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_21_address0,
        ce0 => W_hi_21_ce0,
        q0 => W_hi_21_q0);

    W_hi_22_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_22
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_22_address0,
        ce0 => W_hi_22_ce0,
        q0 => W_hi_22_q0);

    W_hi_23_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_23
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_23_address0,
        ce0 => W_hi_23_ce0,
        q0 => W_hi_23_q0);

    W_hi_24_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_24
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_24_address0,
        ce0 => W_hi_24_ce0,
        q0 => W_hi_24_q0);

    W_hi_25_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_25
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_25_address0,
        ce0 => W_hi_25_ce0,
        q0 => W_hi_25_q0);

    W_hi_26_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_26
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_26_address0,
        ce0 => W_hi_26_ce0,
        q0 => W_hi_26_q0);

    W_hi_27_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_27
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_27_address0,
        ce0 => W_hi_27_ce0,
        q0 => W_hi_27_q0);

    W_hi_28_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_28
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_28_address0,
        ce0 => W_hi_28_ce0,
        q0 => W_hi_28_q0);

    W_hi_29_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_29
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_29_address0,
        ce0 => W_hi_29_ce0,
        q0 => W_hi_29_q0);

    W_hi_30_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_30
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_30_address0,
        ce0 => W_hi_30_ce0,
        q0 => W_hi_30_q0);

    W_hi_31_U : component krnl_lstm_readVec2Stream_float_32u_152_W_hi_31
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_hi_31_address0,
        ce0 => W_hi_31_ce0,
        q0 => W_hi_31_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((str_in12_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, str_in12_full_n, p_in_offset_empty_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((str_in12_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    W_hi_0_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_0_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_0_ce0 <= ap_const_logic_1;
        else 
            W_hi_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_10_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_10_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_10_ce0 <= ap_const_logic_1;
        else 
            W_hi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_11_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_11_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_11_ce0 <= ap_const_logic_1;
        else 
            W_hi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_12_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_12_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_12_ce0 <= ap_const_logic_1;
        else 
            W_hi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_13_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_13_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_13_ce0 <= ap_const_logic_1;
        else 
            W_hi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_14_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_14_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_14_ce0 <= ap_const_logic_1;
        else 
            W_hi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_15_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_15_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_15_ce0 <= ap_const_logic_1;
        else 
            W_hi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_16_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_16_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_16_ce0 <= ap_const_logic_1;
        else 
            W_hi_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_17_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_17_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_17_ce0 <= ap_const_logic_1;
        else 
            W_hi_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_18_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_18_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_18_ce0 <= ap_const_logic_1;
        else 
            W_hi_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_19_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_19_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_19_ce0 <= ap_const_logic_1;
        else 
            W_hi_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_1_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_1_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_1_ce0 <= ap_const_logic_1;
        else 
            W_hi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_20_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_20_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_20_ce0 <= ap_const_logic_1;
        else 
            W_hi_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_21_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_21_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_21_ce0 <= ap_const_logic_1;
        else 
            W_hi_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_22_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_22_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_22_ce0 <= ap_const_logic_1;
        else 
            W_hi_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_23_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_23_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_23_ce0 <= ap_const_logic_1;
        else 
            W_hi_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_24_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_24_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_24_ce0 <= ap_const_logic_1;
        else 
            W_hi_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_25_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_25_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_25_ce0 <= ap_const_logic_1;
        else 
            W_hi_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_26_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_26_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_26_ce0 <= ap_const_logic_1;
        else 
            W_hi_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_27_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_27_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_27_ce0 <= ap_const_logic_1;
        else 
            W_hi_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_28_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_28_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_28_ce0 <= ap_const_logic_1;
        else 
            W_hi_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_29_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_29_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_29_ce0 <= ap_const_logic_1;
        else 
            W_hi_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_2_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_2_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_2_ce0 <= ap_const_logic_1;
        else 
            W_hi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_30_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_30_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_30_ce0 <= ap_const_logic_1;
        else 
            W_hi_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_31_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_31_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_31_ce0 <= ap_const_logic_1;
        else 
            W_hi_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_3_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_3_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_3_ce0 <= ap_const_logic_1;
        else 
            W_hi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_4_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_4_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_4_ce0 <= ap_const_logic_1;
        else 
            W_hi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_5_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_5_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_5_ce0 <= ap_const_logic_1;
        else 
            W_hi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_6_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_6_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_6_ce0 <= ap_const_logic_1;
        else 
            W_hi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_7_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_7_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_7_ce0 <= ap_const_logic_1;
        else 
            W_hi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_8_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_8_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_8_ce0 <= ap_const_logic_1;
        else 
            W_hi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_hi_9_address0 <= p_in_offset_cast_i_fu_521_p1(6 - 1 downto 0);

    W_hi_9_ce0_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W_hi_9_ce0 <= ap_const_logic_1;
        else 
            W_hi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_in_offset_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, str_in12_full_n, ap_CS_fsm_state2)
    begin
        if (((str_in12_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(str_in12_full_n, ap_CS_fsm_state2)
    begin
        if (((str_in12_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_val_V_218_fu_561_p1 <= W_hi_1_q0;
    l_val_V_219_fu_565_p1 <= W_hi_2_q0;
    l_val_V_220_fu_569_p1 <= W_hi_3_q0;
    l_val_V_221_fu_573_p1 <= W_hi_4_q0;
    l_val_V_222_fu_577_p1 <= W_hi_5_q0;
    l_val_V_223_fu_581_p1 <= W_hi_6_q0;
    l_val_V_224_fu_585_p1 <= W_hi_7_q0;
    l_val_V_225_fu_589_p1 <= W_hi_8_q0;
    l_val_V_226_fu_593_p1 <= W_hi_9_q0;
    l_val_V_227_fu_597_p1 <= W_hi_10_q0;
    l_val_V_228_fu_601_p1 <= W_hi_11_q0;
    l_val_V_229_fu_605_p1 <= W_hi_12_q0;
    l_val_V_230_fu_609_p1 <= W_hi_13_q0;
    l_val_V_231_fu_613_p1 <= W_hi_14_q0;
    l_val_V_232_fu_617_p1 <= W_hi_15_q0;
    l_val_V_233_fu_621_p1 <= W_hi_16_q0;
    l_val_V_234_fu_625_p1 <= W_hi_17_q0;
    l_val_V_235_fu_629_p1 <= W_hi_18_q0;
    l_val_V_236_fu_633_p1 <= W_hi_19_q0;
    l_val_V_237_fu_637_p1 <= W_hi_20_q0;
    l_val_V_238_fu_641_p1 <= W_hi_21_q0;
    l_val_V_239_fu_645_p1 <= W_hi_22_q0;
    l_val_V_240_fu_649_p1 <= W_hi_23_q0;
    l_val_V_241_fu_653_p1 <= W_hi_24_q0;
    l_val_V_242_fu_657_p1 <= W_hi_25_q0;
    l_val_V_243_fu_661_p1 <= W_hi_26_q0;
    l_val_V_244_fu_665_p1 <= W_hi_27_q0;
    l_val_V_245_fu_669_p1 <= W_hi_28_q0;
    l_val_V_246_fu_673_p1 <= W_hi_29_q0;
    l_val_V_247_fu_677_p1 <= W_hi_30_q0;
    l_val_V_248_fu_681_p1 <= W_hi_31_q0;
    l_val_V_fu_557_p1 <= W_hi_0_q0;

    p_in_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_blk_n <= p_in_offset_empty_n;
        else 
            p_in_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_in_offset_cast_i_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_in_offset_dout),32));

    p_in_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_in_offset_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (p_in_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_in_offset_read <= ap_const_logic_1;
        else 
            p_in_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    str_in12_blk_n_assign_proc : process(str_in12_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            str_in12_blk_n <= str_in12_full_n;
        else 
            str_in12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    str_in12_din <= (((((((((((((((((((((((((((((((l_val_V_248_fu_681_p1 & l_val_V_247_fu_677_p1) & l_val_V_246_fu_673_p1) & l_val_V_245_fu_669_p1) & l_val_V_244_fu_665_p1) & l_val_V_243_fu_661_p1) & l_val_V_242_fu_657_p1) & l_val_V_241_fu_653_p1) & l_val_V_240_fu_649_p1) & l_val_V_239_fu_645_p1) & l_val_V_238_fu_641_p1) & l_val_V_237_fu_637_p1) & l_val_V_236_fu_633_p1) & l_val_V_235_fu_629_p1) & l_val_V_234_fu_625_p1) & l_val_V_233_fu_621_p1) & l_val_V_232_fu_617_p1) & l_val_V_231_fu_613_p1) & l_val_V_230_fu_609_p1) & l_val_V_229_fu_605_p1) & l_val_V_228_fu_601_p1) & l_val_V_227_fu_597_p1) & l_val_V_226_fu_593_p1) & l_val_V_225_fu_589_p1) & l_val_V_224_fu_585_p1) & l_val_V_223_fu_581_p1) & l_val_V_222_fu_577_p1) & l_val_V_221_fu_573_p1) & l_val_V_220_fu_569_p1) & l_val_V_219_fu_565_p1) & l_val_V_218_fu_561_p1) & l_val_V_fu_557_p1);

    str_in12_write_assign_proc : process(str_in12_full_n, ap_CS_fsm_state2)
    begin
        if (((str_in12_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            str_in12_write <= ap_const_logic_1;
        else 
            str_in12_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
