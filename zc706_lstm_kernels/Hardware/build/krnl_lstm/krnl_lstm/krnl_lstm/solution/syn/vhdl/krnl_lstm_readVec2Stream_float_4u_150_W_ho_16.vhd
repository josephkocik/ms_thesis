-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110100101010001100111111", 
    1 => "00111101100010101110011101001011", 
    2 => "00111100001000011111111100111001", 
    3 => "00111101100010111101001101011100", 
    4 => "00111101011110110100101010110111", 
    5 => "00111101111101010001001000110000", 
    6 => "00111101110101100001110000100000", 
    7 => "00111101100000000000110001110010", 
    8 => "00111101010111110111001110010010", 
    9 => "00111101011110000001000001011111", 
    10 => "00111101100100000010011010100001", 
    11 => "00111110001111100101111100100001", 
    12 => "10111101100100011100110110101110", 
    13 => "10111110110001011011101110011101", 
    14 => "00111111100110101010011100011100", 
    15 => "00111110111000001101001010111010", 
    16 => "00111111001111111101100111011010", 
    17 => "00111110011111101010101001101011", 
    18 => "10111111010011000111101010100101", 
    19 => "00111101000110101011100101011110", 
    20 => "00111111010100111000101011110010", 
    21 => "00111101100101110111100010010100", 
    22 => "10111101100000110110001100001010", 
    23 => "10111110010000011001001101000101", 
    24 => "00111101101111011001100100111101", 
    25 => "00111110111111010010100100000001", 
    26 => "00111101111111001001001011111110", 
    27 => "10111110100110000001000111110100", 
    28 => "10111100100010111110010001011111", 
    29 => "00111110101111001000111001100000", 
    30 => "00111101011010001001111001010011", 
    31 => "00111110011111100101001100010110", 
    32 => "10111110110010001011010110010111", 
    33 => "00111101100011110110110000010110", 
    34 => "00111101100010101111010100111011", 
    35 => "10111110000111011100000000101001", 
    36 => "00111111000001101100111010010011", 
    37 => "00111101100011010010110111011010", 
    38 => "00111101110001111111010011001100", 
    39 => "10111110101011011000101010111100", 
    40 => "10111111010101100101011011100011", 
    41 => "00111101100010000001101001000001", 
    42 => "00111101010110100110100000101111", 
    43 => "00111101100000110001000011110001", 
    44 => "00111101011011001110111001100010", 
    45 => "00111110001110000101010111011110", 
    46 => "00111101100100010100110011111110", 
    47 => "00111101001001110100101101100011", 
    48 => "00111100100010011101101110101001", 
    49 => "00111101000110010001010101000110", 
    50 => "10111110100110111000000101100000", 
    51 => "10111110001011000110010101100100", 
    52 => "00111101100001000101000100011100", 
    53 => "00111101011100111101011000001010", 
    54 => "00111110101111001111110111110101", 
    55 => "10111100000100000001100000011011", 
    56 => "00111101100001011001111000010000", 
    57 => "10111011010011000010110100001001", 
    58 => "00111101000111001110101100111000", 
    59 => "10111111110000011000101001111101", 
    60 => "00111011010111110011000000111100", 
    61 => "00111100001010100011001110100010", 
    62 => "00111101100001110111000101011000", 
    63 => "00111101100001011101110000001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_16 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_16_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


