-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_59_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_59_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001011101110011111110", 
    1 => "00111100111100010000010100100111", 
    2 => "00111101000000111100011011100010", 
    3 => "00111100010101011100010110011101", 
    4 => "00111101000111011010000011110111", 
    5 => "10111110111110101101001110101001", 
    6 => "00111101001000100100011100001111", 
    7 => "00111101001100011101001000101111", 
    8 => "10111101000110111000001010000011", 
    9 => "00111101001000110010001101001110", 
    10 => "00111101000000001111000011110011", 
    11 => "00111101001000110111100010000000", 
    12 => "10111101100101111101011101010011", 
    13 => "10111100101010101000001000101011", 
    14 => "00111110111001011110101100001110", 
    15 => "00111100100011110101101100110101", 
    16 => "00111011001100000101010010000110", 
    17 => "00111100110000010000011110000101", 
    18 => "00111100111101110010001000101011", 
    19 => "00111101000010101000110011001010", 
    20 => "00111100011010000000000011110110", 
    21 => "00111100111111100101101101111101", 
    22 => "00111101101001011111000000111101", 
    23 => "10111100110101100101001010110010", 
    24 => "10111101000011111111010001010001", 
    25 => "10111101001001110010100010011110", 
    26 => "00111101000010001011001001011110", 
    27 => "00111101000100010100100001111000", 
    28 => "10111100111000001101100001111010", 
    29 => "00111110010001000010101110011100", 
    30 => "00111101000110011110001100011100", 
    31 => "10111100101110111000101010011101", 
    32 => "10111100111010001001010100101111", 
    33 => "10111100110101000011011010110100", 
    34 => "00111101001001101000110100010010", 
    35 => "10111100111111100110110101101101", 
    36 => "00111110010010010110000000100010", 
    37 => "00111100110101011101001001110010", 
    38 => "10111101000010110000000011101011", 
    39 => "10111011111000010110100010011001", 
    40 => "10111100101000100001011001001011", 
    41 => "10111101001000001001100110011111", 
    42 => "10111100111001011101010011101110", 
    43 => "10111101001011100000101011111101", 
    44 => "00111101000000110100010110101111", 
    45 => "10111100111010011101100110111011", 
    46 => "00111101000100011011010001000100", 
    47 => "10111100101111001111001010000010", 
    48 => "10111101000011010101011000111110", 
    49 => "00111100111010001110000100011011", 
    50 => "00111110100100101011100000011011", 
    51 => "10111101100100011101000001010010", 
    52 => "10111100111001100111100001001010", 
    53 => "00111100110101011100010011101010", 
    54 => "00111101101001000001110110110111", 
    55 => "00111101001001001000011110110110", 
    56 => "00111100111010101100000011001101", 
    57 => "10111101000100101000101110010100", 
    58 => "00111101000101101110011010111010", 
    59 => "10111101000011001001100010011110", 
    60 => "10111101001011110011100110001101", 
    61 => "00111101000010011110101101111000", 
    62 => "10111101000100000100111000110101", 
    63 => "10111101001101111011011100011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_59 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_59 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_59_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_59_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_59_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


