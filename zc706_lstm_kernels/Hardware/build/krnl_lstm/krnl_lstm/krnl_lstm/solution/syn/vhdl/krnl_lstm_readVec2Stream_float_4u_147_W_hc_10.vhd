-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_10_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010000101011001011000", 
    1 => "00111101000000110110010111000001", 
    2 => "00111101001010000110001010010110", 
    3 => "10111101000010101100000110010011", 
    4 => "00111101000110101101011001100100", 
    5 => "10111110111001101101011110101101", 
    6 => "00111101101100001000001010111110", 
    7 => "00111101001110101100010000010100", 
    8 => "10111101000100101101000101101111", 
    9 => "00111101001000011110001011100011", 
    10 => "00111100110001000000001011011100", 
    11 => "00111101001001110111100001100001", 
    12 => "10111101101001010101101010101011", 
    13 => "10111100101100000111101001001000", 
    14 => "00111110111000011011100011010011", 
    15 => "00111100101111010001111011100100", 
    16 => "10111011010101111011101100111000", 
    17 => "00111100110101010101010100110000", 
    18 => "00111100111101000011101000100010", 
    19 => "00111101000101000101011111101111", 
    20 => "00111100101000011110100001111111", 
    21 => "10111101001000010011001110000011", 
    22 => "10111101010100000000001111111001", 
    23 => "00111101000110000111110000000101", 
    24 => "10111101000011000111111100010100", 
    25 => "10111101001010000001110000100100", 
    26 => "00111101000100111110010111110100", 
    27 => "00111101000010111000101101101101", 
    28 => "10111100111110101000111110011000", 
    29 => "00111110100111111011101011111001", 
    30 => "00111101000111000000000011000111", 
    31 => "10111100110011010010011101110111", 
    32 => "00111101000011101111000000000001", 
    33 => "10111100111000100011000101111011", 
    34 => "00111101001001110010000001101111", 
    35 => "10111100100001111111000001010001", 
    36 => "00111110011000100010000000101011", 
    37 => "00111100110111010000100011101100", 
    38 => "10111101000101011000111000000010", 
    39 => "10111100111011011101100100000001", 
    40 => "00111101001010000011010110000001", 
    41 => "10111101001000110000001000010111", 
    42 => "10111100111001000011001000111011", 
    43 => "10111101001011110101101111000111", 
    44 => "00111101000001010010101011101000", 
    45 => "10111100110110011111000111100000", 
    46 => "00111101000011111100111001110000", 
    47 => "10111101000000110001000110001100", 
    48 => "10111101000001000010010100100110", 
    49 => "00111100101000101000010010100100", 
    50 => "00111110100100100110111110001001", 
    51 => "10111101100100011000111000101111", 
    52 => "10111100111010010011110110111110", 
    53 => "00111101000001100011001110101110", 
    54 => "00111101101001000101011011000011", 
    55 => "00111101001001111001000111101110", 
    56 => "00111100111011000000010001010010", 
    57 => "10111100111001111001110001001110", 
    58 => "00111101000101111100011000101011", 
    59 => "00111100111010101000101110010111", 
    60 => "10111101001100101001101000000100", 
    61 => "00111101000100011001110110000100", 
    62 => "10111101000100010101110001101100", 
    63 => "10111101010001101001011100001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_10 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_10_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


