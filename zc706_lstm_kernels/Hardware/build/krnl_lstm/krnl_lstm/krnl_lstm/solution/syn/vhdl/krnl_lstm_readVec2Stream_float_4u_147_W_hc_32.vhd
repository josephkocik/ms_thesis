-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_32_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_32_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001100000010011011110", 
    1 => "00111100111101111001110010000010", 
    2 => "00111101000001110100000001100000", 
    3 => "10111100111110011010010001000011", 
    4 => "00111101000111010010011111111001", 
    5 => "10111111000000001111111101000101", 
    6 => "00111101111001010011111111001101", 
    7 => "00111101001101000111101110011110", 
    8 => "10111101000110101101000001110001", 
    9 => "00111101001000101011000101110100", 
    10 => "00111100111110100111001111101111", 
    11 => "00111101001000111110101001110000", 
    12 => "10111101110000011000111100110111", 
    13 => "10111100101001111000010101101001", 
    14 => "00111110111001110111001010011101", 
    15 => "00111100101000010011110000100111", 
    16 => "00111010110000001010001111111111", 
    17 => "00111100101110010000111000000001", 
    18 => "00111100111101001100100110100011", 
    19 => "00111101000001100010000000011101", 
    20 => "00111100010111010111110001101101", 
    21 => "10111100100001010011011001001110", 
    22 => "10111100110011011001101000001100", 
    23 => "10111100110101010101001111100011", 
    24 => "10111101000011110100111010000110", 
    25 => "10111101001011010010110101010000", 
    26 => "00111101000001000011111101111110", 
    27 => "00111101001011100101100111011111", 
    28 => "10111100110101011101000101100000", 
    29 => "00111110010001111000100111010110", 
    30 => "00111101000110101100100111000010", 
    31 => "10111100101101000111001111010011", 
    32 => "10111100111001100010011001011100", 
    33 => "10111100110011111000101010011011", 
    34 => "00111101001001100010100111011010", 
    35 => "10111100110000000000101111111101", 
    36 => "00111110010010110010010100110111", 
    37 => "00111100110100100110011110000111", 
    38 => "10111101000001101011001001001110", 
    39 => "10111011001110001101001100110010", 
    40 => "10111100100001011001111010001101", 
    41 => "10111101000111110111101001000111", 
    42 => "10111100111000110101000110010011", 
    43 => "10111101001011011011110111010001", 
    44 => "00111101000001010000001110100111", 
    45 => "10111100111001110101111010101100", 
    46 => "00111101000100010010110100001100", 
    47 => "10111100110111100011000001001111", 
    48 => "10111101000011001110100001011011", 
    49 => "00111100110101000111010110011111", 
    50 => "00111110101010100100110001101101", 
    51 => "10111101100011001101101010100110", 
    52 => "10111100111000110100111010010110", 
    53 => "00111100111010100001010010111001", 
    54 => "00111101101001100001100010010100", 
    55 => "00111101001001000101101000111000", 
    56 => "00111100111010101101100010111100", 
    57 => "10111101000011000101000010111010", 
    58 => "00111101000101010110111011011010", 
    59 => "10111101000010100100000111010101", 
    60 => "10111101001100000100111011011111", 
    61 => "00111101000001011010001101101001", 
    62 => "10111101000100001000110111101101", 
    63 => "10111101001111100101000111001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_32 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_32 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_32_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_32_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_32_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


