-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_21_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010000101100111001010", 
    1 => "10111101000000101011011101100010", 
    2 => "10111101001001111000111111001011", 
    3 => "00111101000010110001111100011000", 
    4 => "10111100000101110100010010010111", 
    5 => "00111110111001101111011100111100", 
    6 => "10111101101100011001001011001101", 
    7 => "10111100010101011000010011100000", 
    8 => "00111011111011111111110001001110", 
    9 => "10111100001010100101101000000011", 
    10 => "10111100001000100011001000100110", 
    11 => "10111101001001110111110111100001", 
    12 => "00111101101001011110011001001110", 
    13 => "00111100101100001111001011010001", 
    14 => "10111110111000011111101110010000", 
    15 => "10111100101111011100011111111101", 
    16 => "00111011010110100101101010110011", 
    17 => "10111100110001001101110010000110", 
    18 => "10111100111011100100000110011110", 
    19 => "10111101000100111000111011011011", 
    20 => "10111100101000100001000101001111", 
    21 => "00111101000101000001010100110000", 
    22 => "00111101010000110000101100001010", 
    23 => "10111101000110100000111001000011", 
    24 => "00111100001000101100110001010110", 
    25 => "00111101001001111010011010010100", 
    26 => "10111101000100110010000001011110", 
    27 => "10111101000011100111010010000011", 
    28 => "00111100111101101111011011011001", 
    29 => "10111110011110111011110100010110", 
    30 => "10111101000110101001000011101011", 
    31 => "00111100101101110101000000111100", 
    32 => "10111101000100011010111100010101", 
    33 => "00111100110000000010010111011110", 
    34 => "10111100001100101001100001001010", 
    35 => "00111100100001100011101110000110", 
    36 => "10111110100000000010000111001100", 
    37 => "10111100101000111111110101010111", 
    38 => "00111101000101001101001011101011", 
    39 => "00111100111100101000111011000000", 
    40 => "10111101001010101100000110010001", 
    41 => "00111100010001101100011110100110", 
    42 => "00111100010011001011111100100111", 
    43 => "00111100001101100011110101100001", 
    44 => "10111100010011001011010001011110", 
    45 => "00111100000111111100000001101011", 
    46 => "10111100001110001001101011001110", 
    47 => "00111100111110111111100101100100", 
    48 => "00111101000001001000000110101000", 
    49 => "10111100100110011111000110010101", 
    50 => "10111110100100101110010111000101", 
    51 => "00111101100100111011101101011111", 
    52 => "00111100100001011110100001000000", 
    53 => "10111100101111000001000110111101", 
    54 => "10111101101001000101010101111010", 
    55 => "10111101001001111001000101000110", 
    56 => "10111100100101000000001100100000", 
    57 => "00111100110111110010100110100111", 
    58 => "10111100001110110111000010110101", 
    59 => "10111100111100110101001000000110", 
    60 => "00111100100110010010110011001001", 
    61 => "10111101000100011000001101011101", 
    62 => "00111101000100011001100111101011", 
    63 => "00111100101100111000111001011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_21 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_21_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


