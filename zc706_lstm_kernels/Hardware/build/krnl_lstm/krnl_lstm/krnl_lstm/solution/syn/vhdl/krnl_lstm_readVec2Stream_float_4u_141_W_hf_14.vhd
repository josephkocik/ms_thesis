-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_14_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100100001111001100101", 
    1 => "10111101011010001010111010101101", 
    2 => "10111101011011111001010001000100", 
    3 => "10111101011101000110111010001100", 
    4 => "10111101011001011000011010010000", 
    5 => "10111100010111100111001100101011", 
    6 => "10111101000010100011010011001100", 
    7 => "10111101011100100101100101001111", 
    8 => "10111101010111101000000000011000", 
    9 => "10111101100001011000111100100110", 
    10 => "10111101011001100100100110010000", 
    11 => "10111100111111011110011111001110", 
    12 => "10111101101110111100001101011100", 
    13 => "10111101001111100110010001101110", 
    14 => "10111100101111111010110011010011", 
    15 => "10111101101001010111101110101101", 
    16 => "10111101100010100011011010001100", 
    17 => "10111101010111001101010011100010", 
    18 => "00111111011001111010001110000100", 
    19 => "10111101010011100110100011000000", 
    20 => "10111101011001101110011111101110", 
    21 => "10111101010111011010001110100010", 
    22 => "10111101101100001011100100101111", 
    23 => "10111101110100011111011110010111", 
    24 => "10111101011001110000011110110100", 
    25 => "10111101011001001100110010100110", 
    26 => "10111101010100110010011111011010", 
    27 => "10111101001011101000011010001111", 
    28 => "10111101011001010000000110010110", 
    29 => "10111111000110101011110101011001", 
    30 => "10111101000000011001110011111101", 
    31 => "10111101010111100000100000111001", 
    32 => "00111101000000000100111011110011", 
    33 => "10111101010110100101000001011010", 
    34 => "10111101100001000000001010110101", 
    35 => "10111101100010010101100000111010", 
    36 => "10111101111100110001100100011101", 
    37 => "10111101010111101001110011001111", 
    38 => "10111101010010101110010110110010", 
    39 => "10111110000000000000110011000111", 
    40 => "00111011110010101111100111110111", 
    41 => "10111101011000011111011011011101", 
    42 => "10111101011010101100101000000100", 
    43 => "10111101100001011110011110010101", 
    44 => "10111101011101100011000101001110", 
    45 => "10111101010101111001110100101000", 
    46 => "10111101100001000001111001111011", 
    47 => "10111101011100010011001101110011", 
    48 => "10111101010000111001010011110011", 
    49 => "10111101011001010011111000111000", 
    50 => "10111101011010001101001011111101", 
    51 => "10111101100111101110001111101111", 
    52 => "10111101011000001000010110101011", 
    53 => "10111101011111000010011100100110", 
    54 => "10111101100000001111010011100101", 
    55 => "10111101001010110011100111111100", 
    56 => "10111101011011101111001010111101", 
    57 => "10111101010010011100111011001111", 
    58 => "10111101010110101111011111111101", 
    59 => "00111100010010111111110001011110", 
    60 => "10111101011011100001001100010110", 
    61 => "10111101011001001001110001110010", 
    62 => "10111101000110001011001111110001", 
    63 => "10111101011111110110011110000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_14 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_14_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


