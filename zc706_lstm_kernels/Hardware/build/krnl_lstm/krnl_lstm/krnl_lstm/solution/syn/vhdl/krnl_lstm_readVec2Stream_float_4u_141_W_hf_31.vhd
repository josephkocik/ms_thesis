-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_31_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100001111100001100", 
    1 => "00111101100011110011001100101010", 
    2 => "00111101100110000110101000010011", 
    3 => "00111101100100110100000101111010", 
    4 => "00111101011110001011110010000001", 
    5 => "00111101101000111000111001000111", 
    6 => "00111101000101100111111001001101", 
    7 => "00111101100010000010010111011000", 
    8 => "00111101011100000001011010110010", 
    9 => "00111101100100100011110001111110", 
    10 => "00111101100010011011001101111001", 
    11 => "00111101011101100111000101111110", 
    12 => "00111101100110001101101101111011", 
    13 => "00111101001111010111010101111100", 
    14 => "00111101100001000010011111010100", 
    15 => "00111101001111100100101010000101", 
    16 => "00111101010111000110110001001011", 
    17 => "00111101100000110111111000011011", 
    18 => "00111101011010110000011000110011", 
    19 => "00111101100001101101111010110001", 
    20 => "00111101011001010100111001101011", 
    21 => "00111101100100001110111101101010", 
    22 => "00111101101100000110110001000110", 
    23 => "00111100111011010001000110010010", 
    24 => "00111101011100111111110011100110", 
    25 => "00111101100011001000001011010101", 
    26 => "00111101100010011100101100011101", 
    27 => "00111101100000100001011011011110", 
    28 => "00111101100010000101100010110100", 
    29 => "10111101011001101011001101001010", 
    30 => "00111101100001000010011100011100", 
    31 => "00111101100000100110011100101100", 
    32 => "00111101001011110100100110101001", 
    33 => "00111101100001100000011011101010", 
    34 => "00111101100100001010011010010111", 
    35 => "00111101100010110010110101011001", 
    36 => "00111100100111101101100010011010", 
    37 => "00111101100001001111110000010010", 
    38 => "00111101100001000100001100101111", 
    39 => "10111100000101010100010110011111", 
    40 => "00111101001011000110101100010000", 
    41 => "00111101100001001100110100101000", 
    42 => "00111101011110000100101001101110", 
    43 => "00111101100100100011111011001101", 
    44 => "00111101100010000000111000101111", 
    45 => "00111101011010010100001111100100", 
    46 => "00111101100100001100101111010001", 
    47 => "00111101100101111010010101001010", 
    48 => "00111101011111011101000100110101", 
    49 => "00111101100010011111111000101000", 
    50 => "00111100111011101111001010100101", 
    51 => "00111101011001100100100000100011", 
    52 => "00111101100001001101110100011111", 
    53 => "00111101100011110001101001000100", 
    54 => "00111101011000101101111100010111", 
    55 => "00111101100000111010100010010011", 
    56 => "00111101100000111100010000111000", 
    57 => "00111101100010111001111110101011", 
    58 => "00111101011101100001100110100110", 
    59 => "00111101000101010111000000111101", 
    60 => "00111101100000001001001010110000", 
    61 => "00111101100010000111011010111011", 
    62 => "00111101011100111001010010100100", 
    63 => "00111101100010001101111101011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_31 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_31 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_31_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


