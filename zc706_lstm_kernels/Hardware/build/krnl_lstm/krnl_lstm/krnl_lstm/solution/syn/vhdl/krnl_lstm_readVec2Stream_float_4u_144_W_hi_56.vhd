-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_56_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_56_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000001111110101000", 
    1 => "10111101010000100110000100001000", 
    2 => "10111101000100001101001110100111", 
    3 => "10111101000001011010100101010001", 
    4 => "10111101011100010000100110000111", 
    5 => "10111110000100101000011111011011", 
    6 => "10111101111101000100101000010111", 
    7 => "10111101100010010111101001100101", 
    8 => "10111101010110101101001010000100", 
    9 => "10111101100000110101101011110000", 
    10 => "10111101000101101111001010100110", 
    11 => "10111101000100011111010110010011", 
    12 => "00111100001110101010100000000111", 
    13 => "10111101001011111100000100111010", 
    14 => "10111110100011111011111010111011", 
    15 => "10111111010101010100111001001111", 
    16 => "10111111010110000101001111110010", 
    17 => "10111101000101110101000000010101", 
    18 => "00111110000111111101001011110100", 
    19 => "10111101001000011001111000001111", 
    20 => "10111111010110000001111101011011", 
    21 => "10111101000101010101000101110011", 
    22 => "00111101010001001011110011101000", 
    23 => "10111100110110100111001110010010", 
    24 => "10111101010111100011011001100011", 
    25 => "10111110010111100011011000101010", 
    26 => "10111101000111110010111111100011", 
    27 => "10111101000111110000100100111001", 
    28 => "10111101000111011101101001100000", 
    29 => "10111110110111000111000011100110", 
    30 => "10111101010011001011000000001000", 
    31 => "10111101000101011101101001000011", 
    32 => "10111011011100011101110001111101", 
    33 => "10111101000101000001011000111101", 
    34 => "10111101100000110110001110111000", 
    35 => "10111101001110110110111010111000", 
    36 => "10111110101100011011010001010111", 
    37 => "10111101000100111000011100110000", 
    38 => "10111101001000111011011111101100", 
    39 => "10111100011000111010111101101001", 
    40 => "10111100011000111101001010000010", 
    41 => "10111101011011000010011010000100", 
    42 => "10111101001100001111101110010100", 
    43 => "10111101100001110010011110101000", 
    44 => "10111101010111010000010001101001", 
    45 => "10111101000001001000000111001001", 
    46 => "10111101011101001100001000111010", 
    47 => "10111101001101111111000010000000", 
    48 => "10111101000010101010001110110011", 
    49 => "10111101001010001000110111110110", 
    50 => "00111100000111010001011111110111", 
    51 => "10111101110111110111111010100000", 
    52 => "10111101000100011110001011100101", 
    53 => "10111101010110000010100001101111", 
    54 => "10111111010011000111001001001101", 
    55 => "10111101000111011110010010010101", 
    56 => "10111101010101110000100110011100", 
    57 => "10111101000110110111001100010100", 
    58 => "10111101011110100101011100111001", 
    59 => "10111100010111011110101110011001", 
    60 => "10111101011100110111010100010011", 
    61 => "10111101001100100111000100010001", 
    62 => "10111101000111000100011000001111", 
    63 => "10111101011101010101100111000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_56 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_56 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_56_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_56_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_56_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


