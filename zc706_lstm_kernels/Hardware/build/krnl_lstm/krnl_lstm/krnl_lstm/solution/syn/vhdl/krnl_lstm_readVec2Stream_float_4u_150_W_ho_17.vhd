-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_17_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110010010101000101111000", 
    1 => "10111101100011001110100000111001", 
    2 => "00111101000110111100111001111001", 
    3 => "10111101100100000001000111111101", 
    4 => "10111101100000100000010000111110", 
    5 => "00111110001001010001100001111111", 
    6 => "00111110110100101000111011010100", 
    7 => "10111101100001101000101110010000", 
    8 => "10111101011011101100111101011001", 
    9 => "10111101100000011001000111000111", 
    10 => "10111101100011000001110011001001", 
    11 => "00111100101111000011101000100101", 
    12 => "00111110100000110110011110001001", 
    13 => "00111111001100000101111011001001", 
    14 => "00111110100011011001110101111110", 
    15 => "00111110110000110111011110010101", 
    16 => "00111110101111011001010010001011", 
    17 => "00111100110001011000001000011101", 
    18 => "00111110110000100110010010011010", 
    19 => "00111101100111000111100010001010", 
    20 => "00111110101001110010010000110111", 
    21 => "10111101100110000010110110011101", 
    22 => "00111110101111011101001000100001", 
    23 => "00111110110100111010001111101001", 
    24 => "00111100100010000111111111000111", 
    25 => "00111111000110001011110111001001", 
    26 => "00111101000001011010110000110000", 
    27 => "00111110100000100111001011010101", 
    28 => "00111100100010111111110010101001", 
    29 => "00111110011010011001101111000000", 
    30 => "10111101011101101001101110100010", 
    31 => "00111100101111111110011100001010", 
    32 => "00111110110011001110001010011100", 
    33 => "10111101100100011001001011111000", 
    34 => "10111101100011110000100010011101", 
    35 => "00111110111111011010010000100110", 
    36 => "00111110000100111100010111110000", 
    37 => "10111101100100001010100001111010", 
    38 => "00111101101110101111100111001101", 
    39 => "00111110100000101101010010110001", 
    40 => "00111110110110101001100010111111", 
    41 => "10111101100011001110100000000011", 
    42 => "10111101011010101011100000001010", 
    43 => "10111101100000110000100110000011", 
    44 => "10111101011110101001110101110111", 
    45 => "00111100110011011110101000101011", 
    46 => "10111101100011101111100010001110", 
    47 => "10111101001101110111101111101110", 
    48 => "10111100101111010111111111011100", 
    49 => "00111100101001111101011111000000", 
    50 => "00111110110010110010101101101000", 
    51 => "00111110110101110100011100110101", 
    52 => "10111101100010100110011001011010", 
    53 => "10111101100000001101010100110010", 
    54 => "00111110010010110110001011111100", 
    55 => "00111010101011010111110000001001", 
    56 => "10111101100010101101111000010000", 
    57 => "00111011111011100011111110011010", 
    58 => "10111101001011101111000101010100", 
    59 => "00111110100111011110101010101100", 
    60 => "00111100001000101110000010011010", 
    61 => "10111100100010010010001100100001", 
    62 => "10111101100010011111011100101011", 
    63 => "10111101100010110001011000000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_17 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_17 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_17_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


