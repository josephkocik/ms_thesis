-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001101010110100011110", 
    1 => "00111100111001110110001101100011", 
    2 => "00111100000001111100001100110001", 
    3 => "10111100011001111000001000101100", 
    4 => "00111101010101010111001010101010", 
    5 => "10111101000011101000010010101000", 
    6 => "10111101010110001010001110100011", 
    7 => "00111101010011101000011011110010", 
    8 => "00111101011011001110100101101110", 
    9 => "00111101010010111110111111011110", 
    10 => "00111100111110101100111100110110", 
    11 => "00111100111000001001000110000111", 
    12 => "00111110101010001100010010010010", 
    13 => "00111100100100101001001110110111", 
    14 => "10111110000001001100011010111001", 
    15 => "10111111100100000110101110010000", 
    16 => "10111111101001000010010001111010", 
    17 => "00111100111100010110011000111001", 
    18 => "10111111001100001001110010101110", 
    19 => "00111100111010100101001110101100", 
    20 => "10111111100001001001111000111000", 
    21 => "10111011100000000110000000001100", 
    22 => "00111110000001100100110000100111", 
    23 => "00111100011110101101110000101101", 
    24 => "00111101001111110100110010110000", 
    25 => "11000000000010010110001111001001", 
    26 => "00111100111010010111001010100101", 
    27 => "00111101010000100000010011001011", 
    28 => "00111100111010111001011111011111", 
    29 => "10111110000000101100010010100011", 
    30 => "00111101001100001001001011100100", 
    31 => "00111100111100011000100101001001", 
    32 => "00111101011011001101110001110101", 
    33 => "00111100110110111100001011101111", 
    34 => "00111101010000111010001110000101", 
    35 => "00111100101110000111000000001111", 
    36 => "10111110001111001110010100000101", 
    37 => "00111100111000110101100100010010", 
    38 => "00111100111001000110000101110010", 
    39 => "10111110100001111010000110011011", 
    40 => "00111101011101010001101101000101", 
    41 => "00111101001011011000011010000010", 
    42 => "00111100110111100001111110001001", 
    43 => "00111101010010110111010011001110", 
    44 => "00111101010000001101010111100001", 
    45 => "00111101000010101110011111101110", 
    46 => "00111101001110000000010100110010", 
    47 => "00111101000000011111011011110100", 
    48 => "00111101000101001001000110110000", 
    49 => "00111101000101110000110100100101", 
    50 => "00111111100010100101110100001010", 
    51 => "00111101111000101101101011111000", 
    52 => "00111100110100010001001101101110", 
    53 => "00111101001000100101100001101011", 
    54 => "10111111011001010110000011100000", 
    55 => "00111100111010011011001100000011", 
    56 => "00111101001000000010101000100010", 
    57 => "00111100111010001011001001010100", 
    58 => "00111101010001110101010111101010", 
    59 => "00111101011011111111100111100011", 
    60 => "00111101010000010011110100010000", 
    61 => "00111101001000110100010101111011", 
    62 => "00111100110011110100101101111001", 
    63 => "00111101000101110100100000011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_18 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_18_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


