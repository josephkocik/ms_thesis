-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_59_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_59_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110011000010110011011", 
    1 => "10111101001100011110010000011100", 
    2 => "10111100110110011111101101000101", 
    3 => "00111100101100001110110111100110", 
    4 => "10111101011101101000110110001000", 
    5 => "10111110001011011100100110000100", 
    6 => "10111101011001010001001100100010", 
    7 => "10111101011011000010011110110001", 
    8 => "10111101100010111000110100001110", 
    9 => "10111101011100010010111000110111", 
    10 => "10111101000100001011011000101001", 
    11 => "10111101000100110001011000110001", 
    12 => "10111101000010000001101000001011", 
    13 => "10111101010100011010100010110111", 
    14 => "10111110101101111111110100110110", 
    15 => "10111111010110110111011011111111", 
    16 => "10111111010111110010000000001011", 
    17 => "10111101000110011110111011010111", 
    18 => "00111101110011011001000110100111", 
    19 => "10111101001001111110000110010110", 
    20 => "10111111011010100100101110001011", 
    21 => "00111100000001100110001100100111", 
    22 => "00111110100010110111100000011100", 
    23 => "00111101000110000100101000110110", 
    24 => "10111101011001101100010101110001", 
    25 => "10111110010010010000101011011011", 
    26 => "10111101001000100111000010001100", 
    27 => "10111101001010011101110010000101", 
    28 => "10111101000111001011100110001000", 
    29 => "10111110101100001010101011111011", 
    30 => "10111101010011001011100110000101", 
    31 => "10111101000101111000110100001100", 
    32 => "10111101011011101110001110000101", 
    33 => "10111101000101010000100110101111", 
    34 => "10111101011010110111100011011111", 
    35 => "00111010110110011111100000010111", 
    36 => "10111110101000101000000111000001", 
    37 => "10111101000101010101000000110010", 
    38 => "10111101001010000111010010110000", 
    39 => "10111101000000001000110111011110", 
    40 => "10111101011101011101111000000110", 
    41 => "10111101010110000101011100100000", 
    42 => "10111101000111111100011001011000", 
    43 => "10111101011100110100011001111110", 
    44 => "10111101010111111111000010001111", 
    45 => "10111101001110010111010111101011", 
    46 => "10111101011000100010000010111000", 
    47 => "10111101010000000010001010100011", 
    48 => "10111101010111101101001010110010", 
    49 => "10111101001001111110011100011010", 
    50 => "00111010101100110101101011000001", 
    51 => "10111101110111000110100111011100", 
    52 => "10111101000111101000110101000111", 
    53 => "10111101010010001001011110101001", 
    54 => "10111111011001100000000100010111", 
    55 => "10111101001000000100101001010101", 
    56 => "10111101010100101100001010010111", 
    57 => "10111101000101110000100111001110", 
    58 => "10111101011011011111110011110000", 
    59 => "10111101010101100010000111100111", 
    60 => "10111101011001000101001110110000", 
    61 => "10111101001111001000010101010111", 
    62 => "10111101000100100110101011100101", 
    63 => "10111101001110010100011001100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_59 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_59 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_59_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_59_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_59_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


