-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_25_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111111010001010011111001", 
    1 => "10111011101110100110110110101110", 
    2 => "00111101001000110011011101000110", 
    3 => "10111100001001101011010111010001", 
    4 => "00111010101110111011111001010101", 
    5 => "10111101000100000010001101000101", 
    6 => "10111111110100100100100100001001", 
    7 => "10111011111110100011100000100001", 
    8 => "10111101000010010001000111000101", 
    9 => "10111011111101011001100011000001", 
    10 => "10111101000101000100111111101100", 
    11 => "10111100111111100011101110100011", 
    12 => "00111101000101010010110101001110", 
    13 => "10111011010110110100011010101000", 
    14 => "10111101001110101001011100011011", 
    15 => "10111101110110110010000100001001", 
    16 => "10111101100111101000000011010010", 
    17 => "10111100111010111101110011000001", 
    18 => "00111111111110111110010111101110", 
    19 => "10111100111011101010011100010011", 
    20 => "10111101010001110101110110110101", 
    21 => "00111101101111110011110110111111", 
    22 => "10111100000101101111011111101000", 
    23 => "10111110101110101110111101110010", 
    24 => "10111011101110101000110001110000", 
    25 => "10111101001000101100010110000010", 
    26 => "10111100110011101000011011110110", 
    27 => "00111101011010111001000000101110", 
    28 => "10111100111100001010110101110100", 
    29 => "10111111011000001000011111101100", 
    30 => "00111110111000100111101010111111", 
    31 => "10111100111001001100100000101101", 
    32 => "00111111110001110010100001110110", 
    33 => "10111100101110011101010100001100", 
    34 => "10111100000010110001011100001001", 
    35 => "10111100001110101011101110001111", 
    36 => "10111101011101010110111010000100", 
    37 => "10111100100110100101010110011101", 
    38 => "10111100110110001001100101111111", 
    39 => "10111110111011101100110111111110", 
    40 => "10111111001000010001101101110000", 
    41 => "10111100100000110001111111010111", 
    42 => "10111011101100100111011110111111", 
    43 => "10111100001010000000000011011000", 
    44 => "10111100000101101111101111111100", 
    45 => "10111100111100110000100011011010", 
    46 => "10111100000101000010000111111011", 
    47 => "10111011100110001100010111100110", 
    48 => "00111011100110100010010101100001", 
    49 => "10111101000110111100010001110100", 
    50 => "10111110100111100010101001101001", 
    51 => "10111111101000000001111111001111", 
    52 => "10111100100101001111101000010000", 
    53 => "10111011111000100110001111110011", 
    54 => "10111101011100001100010001001010", 
    55 => "10111100111011101001101011001111", 
    56 => "10111100000001011110110110100101", 
    57 => "10111101000101010011010111010010", 
    58 => "10111100101011011100100101010111", 
    59 => "10111110111111000111101000111101", 
    60 => "10111100000110101100110001111110", 
    61 => "10111101001010010000100110111001", 
    62 => "00111101111011110010110101000010", 
    63 => "10111100100000000100000110111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_25 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_25_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


