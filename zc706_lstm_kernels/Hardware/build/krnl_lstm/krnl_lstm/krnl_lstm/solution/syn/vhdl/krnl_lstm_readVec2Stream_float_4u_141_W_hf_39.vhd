-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_39_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_39_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011100001010110011011000", 
    1 => "00111101010100011110011100000011", 
    2 => "00111101011100011101100101011001", 
    3 => "00111101100010111000001101111011", 
    4 => "00111101010011001010101000000110", 
    5 => "00111101101101100011111101011000", 
    6 => "10111100110110111010010000010111", 
    7 => "00111101000110010000110010101010", 
    8 => "00111101011000100001111101011001", 
    9 => "00111101001111101111100100110010", 
    10 => "00111101001100001100001001100010", 
    11 => "00111101100000001010011000010001", 
    12 => "00111101100000011101111001010010", 
    13 => "00111101010100110100110000101111", 
    14 => "00111101100011100010111010010101", 
    15 => "00111101001110110001011111010111", 
    16 => "00111101010110010010010101110101", 
    17 => "00111101001110011011011010010100", 
    18 => "00111110000101010000111100011101", 
    19 => "00111101010011110111000010111101", 
    20 => "00111101011000101010100110101100", 
    21 => "00111101010110000001011110101010", 
    22 => "00111101010100111111011001111000", 
    23 => "10111101000111010100010001111010", 
    24 => "00111101001100001010000101011001", 
    25 => "00111101000110101011010010111111", 
    26 => "00111101010011100111011001001101", 
    27 => "10111011111010110101000000011111", 
    28 => "00111101010000011100011100001010", 
    29 => "10111101100001100101011000101011", 
    30 => "00111101100000000001100111100010", 
    31 => "00111101001101100100000110000110", 
    32 => "00111101100100101000111001101100", 
    33 => "00111101001111000011110110011101", 
    34 => "00111101001110111011100100001111", 
    35 => "00111101010010000010101000000010", 
    36 => "00111011100101111010111011000111", 
    37 => "00111101001100100011111101100000", 
    38 => "00111101010010001101100100100001", 
    39 => "00111101100101010101000010100110", 
    40 => "00111101100100010010101010010001", 
    41 => "00111101001011001100100000001000", 
    42 => "00111101001100100100110001110001", 
    43 => "00111101001110010001011101011011", 
    44 => "00111101001000000111110000011000", 
    45 => "00111101011001000110010010010000", 
    46 => "00111101010000000001000001001000", 
    47 => "00111101011001001000010111101100", 
    48 => "00111101101000101100010011000000", 
    49 => "00111101001110101111100000000001", 
    50 => "10111100111101100101100100100100", 
    51 => "00111101010111000001010110010001", 
    52 => "00111101001011110110000111111011", 
    53 => "00111101001110011001111110111001", 
    54 => "00111101010111100011000011011100", 
    55 => "00111101011000000101111000011001", 
    56 => "00111101001110010100100101100100", 
    57 => "00111101010001110111111101010011", 
    58 => "00111101001010000100110101111110", 
    59 => "00111101100101110001111100111100", 
    60 => "00111101001101001000111010100001", 
    61 => "00111101010100000011000001011101", 
    62 => "00111101011111110001000001000010", 
    63 => "00111101001010000101011101001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_39 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_39 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_39_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_39_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_39_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


