-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_62_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_62_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010000100010010011101", 
    1 => "10111100110111000000001110111100", 
    2 => "10111101001001110010110111100100", 
    3 => "00111101000011010010101100011101", 
    4 => "10111101001000100000011011010010", 
    5 => "00111110111001101111001010101111", 
    6 => "10111101101011110111010101100100", 
    7 => "10111101001111100011111101101011", 
    8 => "00111101000110101111000101011011", 
    9 => "10111101001001111111001101010111", 
    10 => "10111100110100000111111000110100", 
    11 => "10111101001001110110011001100011", 
    12 => "00111101101001101010110000001111", 
    13 => "00111100110000010100000100100011", 
    14 => "10111110111000100101110011001100", 
    15 => "10111100101111101100011011001111", 
    16 => "00111011010111011010110111101010", 
    17 => "10111100110101011110101111010010", 
    18 => "10111100111111001111110011101101", 
    19 => "10111101000101000001111010111111", 
    20 => "10111100101000100010000100001000", 
    21 => "00111101000111111011000001000100", 
    22 => "00111101010000000010111101101101", 
    23 => "10111101000101010111001100001001", 
    24 => "00111101000100110111010001110001", 
    25 => "00111101001001110110000000001101", 
    26 => "10111101000100111010111001000110", 
    27 => "10111101000001111111010111111110", 
    28 => "00111100111110100010100111100001", 
    29 => "10111110011111000011000001101000", 
    30 => "10111101000111110101100101000000", 
    31 => "00111100110011101001000011110011", 
    32 => "10111101000010011111110000011101", 
    33 => "00111100111000100110111010011101", 
    34 => "10111101001011010101010011110111", 
    35 => "00111100100010110001111010010100", 
    36 => "10111110011111101010010101001111", 
    37 => "10111100111000000000101111101111", 
    38 => "00111101000101010101001101111010", 
    39 => "00111100111000100010010001001110", 
    40 => "10111101001000100001010100000001", 
    41 => "00111101001010001010001100110110", 
    42 => "00111100111011101100100010001000", 
    43 => "00111101001101010011101101010011", 
    44 => "10111101000010110101010011000100", 
    45 => "00111100111010000101111111111111", 
    46 => "10111101000101100000101111011101", 
    47 => "00111100111101000100001100111110", 
    48 => "00111101000001010000011111001011", 
    49 => "10111100101001000101000110011000", 
    50 => "10111110100100100011001101111100", 
    51 => "00111101100100010000100110010111", 
    52 => "00111100111100000001110000101000", 
    53 => "10111100111111000100000100011011", 
    54 => "10111101101001000011111001100001", 
    55 => "10111101001001110111110100101001", 
    56 => "10111100110011011000001000000010", 
    57 => "00111100111001110010111010001000", 
    58 => "10111101000111101100100011111100", 
    59 => "10111100111000000100001101110101", 
    60 => "00111101001101011010010111100011", 
    61 => "10111101000100011001011110010010", 
    62 => "00111101000101000100001101110101", 
    63 => "00111101010010000111000001110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_62 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_62 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_62_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_62_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_62_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


