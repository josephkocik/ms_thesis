-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100110010100011011101001", 
    1 => "00111011001110010111110001110000", 
    2 => "00111100110011001101001101011010", 
    3 => "00111101000101000000100101101001", 
    4 => "10111100101100101100111111000001", 
    5 => "00111101100010001011001110001000", 
    6 => "00111011110001111100110101000111", 
    7 => "00111100010101001001110100100110", 
    8 => "10111101000110101111101000111001", 
    9 => "10111100101100000111110100011000", 
    10 => "10111100101110101111100111101010", 
    11 => "00111100101001001100111000101110", 
    12 => "00111011110101001001111001001011", 
    13 => "00111100110110011011110111110011", 
    14 => "00111101100000000000010000100110", 
    15 => "10111101000011011011010000010100", 
    16 => "10111101000011000001000101101100", 
    17 => "00111000011110110010011100011101", 
    18 => "00111111000001011101000100101011", 
    19 => "00111100001111000011000010001010", 
    20 => "10111101000010011111101010100000", 
    21 => "00111101011000000111110010010111", 
    22 => "00111101101001111101110110110001", 
    23 => "10111110001001000111100001101011", 
    24 => "10111100110001000110111010010101", 
    25 => "10111101000111000101000001010100", 
    26 => "00111100010111101100000101111011", 
    27 => "00111101001111101000111101000111", 
    28 => "10111010001100010000110100100000", 
    29 => "10111101110001100111001110011011", 
    30 => "00111100111001001100000111100000", 
    31 => "10111011000000001011100011000110", 
    32 => "10111101011000101111010111110010", 
    33 => "00111011101001101111001111100000", 
    34 => "10111100101010011010010010110000", 
    35 => "10111011110000100000101111010110", 
    36 => "10111101100001001001010101111010", 
    37 => "00111011001000101011001100101110", 
    38 => "00111100010101001010100010001000", 
    39 => "10111100100000001001110110010101", 
    40 => "00111110000011001010101110001110", 
    41 => "00111010000000110100111110011110", 
    42 => "10111100110010000011101110010001", 
    43 => "10111100101011100111110001101110", 
    44 => "10111011011001001011110001110101", 
    45 => "10111101000010101101110110001001", 
    46 => "10111100101101010010100101101001", 
    47 => "00111101001100101100101110100011", 
    48 => "00111100100110010100010101101110", 
    49 => "10111100101011111000101001110010", 
    50 => "10111111011101010100011011100100", 
    51 => "10111101001111101001000110010010", 
    52 => "00111010100011000100101010001101", 
    53 => "00111100110011011101010110001100", 
    54 => "10111101000001001100000010011101", 
    55 => "00111100100101001111111010011010", 
    56 => "10111100110000100001000111011110", 
    57 => "10111100100001101011001110001001", 
    58 => "10111100000110110110001101001010", 
    59 => "00111110000111011111001101110001", 
    60 => "10111100001011001011010010111100", 
    61 => "10111010011000010110111100011111", 
    62 => "00111011100011110101011011001010", 
    63 => "10111100001000100111001010011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_13 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_13_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


