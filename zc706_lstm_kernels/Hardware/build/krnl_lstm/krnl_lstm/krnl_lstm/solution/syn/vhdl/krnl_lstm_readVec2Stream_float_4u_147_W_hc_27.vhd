-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_27_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_27_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001011011101100110100", 
    1 => "00111100111101110101110010101001", 
    2 => "00111101000000110001001011000100", 
    3 => "10111100111100000000001001000011", 
    4 => "00111101000111100101101010010110", 
    5 => "10111110111110111111110100100001", 
    6 => "00111101101100011101000100111011", 
    7 => "00111101001101100111011111001111", 
    8 => "10111101000111000010100111010111", 
    9 => "00111101001001000001011001101110", 
    10 => "00111101000000011111000000100011", 
    11 => "00111101001000110101010000001001", 
    12 => "10111101100111010010111101001001", 
    13 => "10111100101010100110110011111110", 
    14 => "00111110111001011110000111110110", 
    15 => "00111100100001001000011010001101", 
    16 => "00111011100001101010100100101000", 
    17 => "00111100101111111001001001110011", 
    18 => "00111100111101001000100100000010", 
    19 => "00111101000010011011001000001111", 
    20 => "00111100010110101011101011010010", 
    21 => "10111100010001101111110100100010", 
    22 => "10111100001100010000011100110010", 
    23 => "00111101000110011110111010101100", 
    24 => "10111101000100000011010100000111", 
    25 => "10111101001010101101011010000101", 
    26 => "00111101000001111100001110111010", 
    27 => "00111101000100000111010001011100", 
    28 => "10111100110111100100011011001111", 
    29 => "00111110011111010111101011000000", 
    30 => "00111101000110101001111101100111", 
    31 => "10111100101110100011010110001001", 
    32 => "00111101000011110100100110001011", 
    33 => "10111100110100110110101010001111", 
    34 => "00111101001001111111110000110100", 
    35 => "10111100110000100000100011010110", 
    36 => "00111110011111100010001110110101", 
    37 => "00111100110101010100100001101011", 
    38 => "10111101000010100001101110011101", 
    39 => "10111100111011101000010010010010", 
    40 => "00111101001010011001000010111001", 
    41 => "10111101001000011001100001010010", 
    42 => "10111100111001010101011100011100", 
    43 => "10111101001011111010001110111010", 
    44 => "00111101000001011011000110011111", 
    45 => "10111100111010011100111100001101", 
    46 => "00111101000100100101001100110111", 
    47 => "10111100111000001110110100000010", 
    48 => "10111101000011011101110011000111", 
    49 => "00111100111001110100111101010010", 
    50 => "00111110100100100111101100000001", 
    51 => "10111101100100011111100010100111", 
    52 => "10111100111001011110101111000001", 
    53 => "00111100111011010000100111001000", 
    54 => "00111101101001000110010111000110", 
    55 => "00111101001001000101001110110110", 
    56 => "00111100111011000101000101001111", 
    57 => "10111101000100110001100000000100", 
    58 => "00111101000101110101001110110100", 
    59 => "00111100111011110011100111100110", 
    60 => "10111101001100011110010000111010", 
    61 => "00111101000010001110111011010011", 
    62 => "10111101000100000110111101100011", 
    63 => "10111101010000000110101111000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_27 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_27 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_27_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_27_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_27_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


