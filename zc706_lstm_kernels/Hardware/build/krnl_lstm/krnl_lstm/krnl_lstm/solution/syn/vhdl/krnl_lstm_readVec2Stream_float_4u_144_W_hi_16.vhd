-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100011101100000011100", 
    1 => "00111101001111010101000101011101", 
    2 => "00111101000010100110100011100010", 
    3 => "00111100111111000110111011010110", 
    4 => "00111101011101101011010110001101", 
    5 => "00111101000010110110100011001110", 
    6 => "00111101000010001110101101110101", 
    7 => "00111101100100001001110100110010", 
    8 => "00111101011010001011000010001011", 
    9 => "00111101100001111100011111000001", 
    10 => "00111101000101001110010000111010", 
    11 => "00111101000010100100100000111000", 
    12 => "00111010010101101111101111100010", 
    13 => "00111101010000111111110000110100", 
    14 => "00111110000000111000011110100010", 
    15 => "00111101010010011011010100100110", 
    16 => "00111101011110001111001101010100", 
    17 => "00111101000101100100101101101011", 
    18 => "10111111110001100111110111000111", 
    19 => "00111101000111010110000101010101", 
    20 => "00111101001111010101001101100101", 
    21 => "00111101001001000000001011001000", 
    22 => "00111110000010000010011101101011", 
    23 => "00111100111000001101110110110010", 
    24 => "00111101100000011001110000110011", 
    25 => "10111111100110100111011000010110", 
    26 => "00111101000111001001001110110101", 
    27 => "00111101000110000000000101111110", 
    28 => "00111101000111001100100011111101", 
    29 => "00111010111100110101100111011101", 
    30 => "00111101010111000001001000100111", 
    31 => "00111101000101010011100100010100", 
    32 => "00111100010001111100001100010110", 
    33 => "00111101000100001110110110111110", 
    34 => "00111101100001010110011101000110", 
    35 => "00111101010000101101001011110111", 
    36 => "00111100000100010111010111110011", 
    37 => "00111101000100101101001001000111", 
    38 => "00111101000111100101111000010111", 
    39 => "10111101000100100111110011011011", 
    40 => "00111100001110010101101001000100", 
    41 => "00111101011011001010001111100010", 
    42 => "00111101010010010101111110001110", 
    43 => "00111101100010010001011001110000", 
    44 => "00111101011111001110101001110010", 
    45 => "00111101000011111010101101001100", 
    46 => "00111101011111111000101010110111", 
    47 => "00111101010101000110011001101111", 
    48 => "00111101000001000101101010011000", 
    49 => "00111101001001100100110000110100", 
    50 => "00111111100011110110101000101100", 
    51 => "00111111100110111110100100100110", 
    52 => "00111101000111010011010111100101", 
    53 => "00111101011111111011111001110111", 
    54 => "00111100111111100001100000110000", 
    55 => "00111101000110010000001100100101", 
    56 => "00111101011000110111100001000001", 
    57 => "00111101000101011011110110100111", 
    58 => "00111101011110001110101111010100", 
    59 => "00111100010000101110011001010101", 
    60 => "00111101011101110011111110000110", 
    61 => "00111101001100001001010000111011", 
    62 => "00111101000110101101010001101000", 
    63 => "00111101011111110111110010011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_16 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_16_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


