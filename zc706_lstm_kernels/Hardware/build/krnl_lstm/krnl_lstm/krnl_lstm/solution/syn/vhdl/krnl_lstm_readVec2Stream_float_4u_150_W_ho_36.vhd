-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_36_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_36_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110100010110100111101101", 
    1 => "10111101100011000110100101011110", 
    2 => "00111101000110011111001101000011", 
    3 => "10111101100011111011100100111011", 
    4 => "10111101100000011100101010011100", 
    5 => "10111101000010110010110010010111", 
    6 => "00111110100101110001000110110010", 
    7 => "10111101100001011101001111011111", 
    8 => "10111101011011010011110110101010", 
    9 => "10111101100000010111010111000101", 
    10 => "10111101100010111001000001110101", 
    11 => "10111101011100010010000000011000", 
    12 => "00111110010111101011010100111111", 
    13 => "00111111001011110010111111101010", 
    14 => "10111101000111001011101000110010", 
    15 => "10111110000100001101111010100010", 
    16 => "10111110100011010001010001011100", 
    17 => "10111101000010000011011111101000", 
    18 => "00111111000111001111001111111101", 
    19 => "00111101010000100100000001010100", 
    20 => "10111110100110001000110011001111", 
    21 => "10111101100110000001100100011111", 
    22 => "00111110101010010110011001101000", 
    23 => "00111110101101111001100101110111", 
    24 => "10111100111000011101101111101100", 
    25 => "00111110111101100111001001100101", 
    26 => "10111100110011110101101000011110", 
    27 => "00111110100001110111011001011000", 
    28 => "00111100011101101000111001111011", 
    29 => "10111110000000111001000111011101", 
    30 => "10111101011101010111011111011011", 
    31 => "10111101000001100101010010001101", 
    32 => "00111110110100100001111111001111", 
    33 => "10111101100100000111000101010110", 
    34 => "10111101100011101100110110111111", 
    35 => "00111110111100100010101001101100", 
    36 => "10111110100000001011010100101011", 
    37 => "10111101100100000011101001001010", 
    38 => "00111100011010000101101101110011", 
    39 => "00111110100001101000001110101010", 
    40 => "00111111010001101000110000100011", 
    41 => "10111101100011001011000010000100", 
    42 => "10111101011010000111011110001101", 
    43 => "10111101100001000000100110001001", 
    44 => "10111101011110010100010010000110", 
    45 => "10111101001110111011101001101010", 
    46 => "10111101100011111010000000000011", 
    47 => "10111101001101110111011110010101", 
    48 => "10111100101101110001000101100001", 
    49 => "10111011101000101010110111011000", 
    50 => "00111111000000001001010011110100", 
    51 => "00111110110111100011011101111100", 
    52 => "10111101100010011101110011000011", 
    53 => "10111101100000000001110011101110", 
    54 => "10111100100000100100101101001101", 
    55 => "00111011001000010010001101111111", 
    56 => "10111101100010101000110000011001", 
    57 => "00111011000001101011110100000111", 
    58 => "10111101001011000010111111000011", 
    59 => "00111111001001010001000010000001", 
    60 => "00111001101000011001000110110011", 
    61 => "10111100011111110000000001010111", 
    62 => "10111101100010011010001011011111", 
    63 => "10111101100010101010001100111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_36 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_36 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_36_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_36_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_36_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


