-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_41_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_41_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100001010111111100", 
    1 => "00111101100011110101010101111111", 
    2 => "00111101100101111110110011110001", 
    3 => "00111101100100111011000001001001", 
    4 => "00111101011101010111110110101011", 
    5 => "00111101101000111001001101111011", 
    6 => "00111101000101100011000001101011", 
    7 => "00111101100001111100111000011010", 
    8 => "00111101011011011101001100111111", 
    9 => "00111101100100001111011011100000", 
    10 => "00111101100010011000000010110011", 
    11 => "00111101011101100111101101100010", 
    12 => "00111101100110001001110010011100", 
    13 => "00111101001111000100111001001111", 
    14 => "00111101100001000001001001011111", 
    15 => "00111101001111100101100011100110", 
    16 => "00111101010111000111110011011001", 
    17 => "00111101100000110100101111100100", 
    18 => "00111101011010101100010010000100", 
    19 => "00111101100001101011011111100100", 
    20 => "00111101011001010011100100010100", 
    21 => "00111101100100001000110000100111", 
    22 => "00111101101100001010101010111010", 
    23 => "00111100111011000110010000111101", 
    24 => "00111101011011110111100001100100", 
    25 => "00111101100011010101011101111110", 
    26 => "00111101100010011010000001110111", 
    27 => "00111101100000011101000101100110", 
    28 => "00111101100010000010011010100001", 
    29 => "10111101011001101101110010000100", 
    30 => "00111101100000111100111111011100", 
    31 => "00111101100000100011001001111101", 
    32 => "00111101001011001110100001100111", 
    33 => "00111101100001100110011000111101", 
    34 => "00111101100011101110110010010110", 
    35 => "00111101100010110101010110010010", 
    36 => "00111100100111101101010100011100", 
    37 => "00111101100001010111001101001001", 
    38 => "00111101100001000001101010010101", 
    39 => "10111100000110010101011111101101", 
    40 => "00111101001010110111001010101110", 
    41 => "00111101100001010100000100011111", 
    42 => "00111101011101100010101011011100", 
    43 => "00111101100011110001010010000010", 
    44 => "00111101100001000010011111100010", 
    45 => "00111101011010000101111011110000", 
    46 => "00111101100100000011000111101110", 
    47 => "00111101100101111011011110111111", 
    48 => "00111101011111010010010010010111", 
    49 => "00111101100010100000000000111010", 
    50 => "00111100111011100010111011000000", 
    51 => "00111101011001100001010100100101", 
    52 => "00111101100001010101110000000100", 
    53 => "00111101100011110011100111101100", 
    54 => "00111101011000101100011001010100", 
    55 => "00111101100000111000111111000101", 
    56 => "00111101100000100111100110001101", 
    57 => "00111101100010110111011001011000", 
    58 => "00111101011101010101011001010101", 
    59 => "00111101000101001111000100101101", 
    60 => "00111101011110100101100101111001", 
    61 => "00111101100010000111011000000110", 
    62 => "00111101011100110100010011111011", 
    63 => "00111101100001011000100110000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_41 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_41 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_41_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_41_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_41_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


