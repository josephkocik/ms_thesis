-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001000010011110111110011", 
    1 => "00111100110010110011101001110110", 
    2 => "00111100100001010010100000101111", 
    3 => "00111101000011010000001110010000", 
    4 => "00111101000101101000001111100010", 
    5 => "00111110111111011001111001001110", 
    6 => "10111110100001110111010000101000", 
    7 => "00111101001011100000111000001011", 
    8 => "10111101000101001011100111111010", 
    9 => "00111101000110110000110110110111", 
    10 => "00111100101110110010110000010010", 
    11 => "00111101000111101011000010001110", 
    12 => "10111101001011001001010110010100", 
    13 => "00111101001011110111101000010110", 
    14 => "10111110110011100011111101000110", 
    15 => "00111101101000111010000010010000", 
    16 => "10111101110010011001110001000111", 
    17 => "00111100011111111111100100101100", 
    18 => "00111100111100001000110111101001", 
    19 => "00111100110100000010011111000110", 
    20 => "00111101100111111011000101010001", 
    21 => "00111101001100011111110001110100", 
    22 => "00111101011101001100010011100011", 
    23 => "10111100010110110111110101110011", 
    24 => "10111101000001100000001100010110", 
    25 => "10111100010111101111001011111011", 
    26 => "00111100110010100110001010111101", 
    27 => "10111100000101111010110001100111", 
    28 => "10111100101000000101111110100110", 
    29 => "10111101110001100111000010111101", 
    30 => "00111101000101100101000001000000", 
    31 => "10111100011100110101100000100001", 
    32 => "10111100110000110001000010110000", 
    33 => "10111100100101000011011110001001", 
    34 => "00111101001000001101001111010111", 
    35 => "00111101101101101100101101000001", 
    36 => "10111101110001001110110110001100", 
    37 => "00111100100011100010011101101000", 
    38 => "10111100110011100111110010011100", 
    39 => "10111010001010100000101001011101", 
    40 => "10111101000010100011010111000100", 
    41 => "10111101000101000111101110010111", 
    42 => "10111100101100000111011011110011", 
    43 => "10111101001010110001101110101101", 
    44 => "00111100110101010011111101000011", 
    45 => "10111100101011101000111110111001", 
    46 => "00111101000000001011100101110011", 
    47 => "10111100010111100010111110000001", 
    48 => "10111101000000011011101110110011", 
    49 => "00111100111101011100110101001101", 
    50 => "10111110111101110101001111101011", 
    51 => "10111101000001111101011011100000", 
    52 => "10111100100111000111100001010110", 
    53 => "00111100100111100000110011100110", 
    54 => "10111100000000001010001000011000", 
    55 => "00111101000111001100110001011000", 
    56 => "00111100101111011011111001111110", 
    57 => "10111101000001101111000011010101", 
    58 => "00111101000011011001101010000001", 
    59 => "10111100100011001010111100011101", 
    60 => "10111101001011100100110010110101", 
    61 => "00111100111001010001101011110111", 
    62 => "10111101000011100001100101000101", 
    63 => "10111101001100011001100110110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_13 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_13_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


