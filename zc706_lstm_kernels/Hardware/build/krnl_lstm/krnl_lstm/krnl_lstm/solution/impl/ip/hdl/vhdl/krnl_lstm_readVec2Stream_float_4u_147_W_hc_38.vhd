-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_38_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_38_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010001000010101100110", 
    1 => "10111101000000110010100101001000", 
    2 => "10111101001010001111010001001010", 
    3 => "00111101000010101001110100111010", 
    4 => "10111101000111111110010000001100", 
    5 => "00111110111001110000010101000000", 
    6 => "10111101101100001001010011001011", 
    7 => "10111101001111100001101111000010", 
    8 => "00111101000110000011110011011100", 
    9 => "10111101001001101011100101111110", 
    10 => "10111100110011010110101111001101", 
    11 => "10111101001001111010110011101010", 
    12 => "00111101101001011010001100110010", 
    13 => "00111100101011101000100101011011", 
    14 => "10111110111000011100111011001011", 
    15 => "10111100101111010110011111111011", 
    16 => "00111011010110011110111000011101", 
    17 => "10111100110101100101100100100011", 
    18 => "10111100111101000011011101100100", 
    19 => "10111101000101000111101101110011", 
    20 => "10111100101000100011100110011000", 
    21 => "00111101001000100001101110010110", 
    22 => "00111101010100011010001001010111", 
    23 => "10111101000110000111110101101011", 
    24 => "00111101000100100110111101101001", 
    25 => "00111101001001011111010011110011", 
    26 => "10111101000101000001000001100111", 
    27 => "10111101000010111100000001001000", 
    28 => "00111100111110110100100110001011", 
    29 => "10111110101111100101011100010101", 
    30 => "10111101000111000111110100000111", 
    31 => "00111100110011101010101111010000", 
    32 => "10111101000011110010111010101100", 
    33 => "00111100111000111100000010111101", 
    34 => "10111101001010110111100001010111", 
    35 => "00111100100001011000000101001010", 
    36 => "10111110100101111111110000111100", 
    37 => "10111100111000001000111101101111", 
    38 => "00111101000101011011100011111110", 
    39 => "00111100111011101001101001100111", 
    40 => "10111101001010001010010101010001", 
    41 => "00111101001001111000111100011001", 
    42 => "00111100111011100110100001100111", 
    43 => "00111101001100110010111000001100", 
    44 => "10111101000010100011000000011001", 
    45 => "00111100111001001001001001000101", 
    46 => "10111101000101001010111000111011", 
    47 => "00111101000000110111110001111111", 
    48 => "00111101000001000101101011101000", 
    49 => "10111100101000110110110000011100", 
    50 => "10111110100100100111011011111100", 
    51 => "00111101100100011000101100110111", 
    52 => "00111100111011111111110100000011", 
    53 => "10111101000010001011101110000100", 
    54 => "10111101101001000111010101100111", 
    55 => "10111101001001111100001010011101", 
    56 => "10111100111100001011010001011111", 
    57 => "00111100111010010001000000111101", 
    58 => "10111101000111001101000100100000", 
    59 => "10111100111010110110001000101111", 
    60 => "00111101001101000111001001101000", 
    61 => "10111101000100011001101100100011", 
    62 => "00111101000100010111001011010001", 
    63 => "00111101010010000010010001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_38 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_38 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_38_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_38_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_38_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


