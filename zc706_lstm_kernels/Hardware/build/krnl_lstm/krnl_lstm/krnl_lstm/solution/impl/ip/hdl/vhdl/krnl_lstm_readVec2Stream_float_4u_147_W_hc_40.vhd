-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_40_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_40_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001011010001110110000", 
    1 => "00111100111100001001001100001101", 
    2 => "00111101000000011111110111010110", 
    3 => "10111011001101010010011101110010", 
    4 => "00111101000111011110001010011011", 
    5 => "10111110111110010010001010100000", 
    6 => "00111101000011111011000110000010", 
    7 => "00111101001100100011101011001111", 
    8 => "10111101000111000001000110010011", 
    9 => "00111101001000110101110110101000", 
    10 => "00111101000000111000100101101010", 
    11 => "00111101001000110010011111111100", 
    12 => "10111101100110001001011101010111", 
    13 => "10111100101000110011010110100101", 
    14 => "00111110111001100000101011111110", 
    15 => "00111100100101100001101000111111", 
    16 => "00111011000011111010001110111011", 
    17 => "00111100110000100010001010100100", 
    18 => "00111100111101011110110011010010", 
    19 => "00111101000010110010010000000010", 
    20 => "00111100011011001001100100011010", 
    21 => "00111101000000111000101001000010", 
    22 => "00111101101000001100101111010100", 
    23 => "10111100101111001111111101001100", 
    24 => "10111101000100000001000000010010", 
    25 => "10111101001001100010100010110110", 
    26 => "00111101000010010100010000001010", 
    27 => "00111101010001000101110001010100", 
    28 => "10111100111000100011010001001101", 
    29 => "00111110010101000110010011000011", 
    30 => "00111101000110011111001101001011", 
    31 => "10111100101111000111001101101111", 
    32 => "10111100110110110110011010011100", 
    33 => "10111100110101000010100010001111", 
    34 => "00111101001001101101011010110101", 
    35 => "10111100111110001110000010101000", 
    36 => "00111110010101110111011000010101", 
    37 => "00111100110101011001101001011111", 
    38 => "10111101000010111000100010001111", 
    39 => "00111011110100100110011101001110", 
    40 => "10111100111110011110010000001000", 
    41 => "10111101001000001101110000010110", 
    42 => "10111100111001011001101011110000", 
    43 => "10111101001011100101010000101111", 
    44 => "00111101000000110101001111101001", 
    45 => "10111100111010100111111010011011", 
    46 => "00111101000100011101111000001000", 
    47 => "10111100101111011011010001101001", 
    48 => "10111101000011100001010001100100", 
    49 => "00111100111011001010001010011110", 
    50 => "00111110011001010010011011100100", 
    51 => "10111101100001011111100110010111", 
    52 => "10111100111001100101011010011011", 
    53 => "00111100110101011000100101001000", 
    54 => "00111101101000110110111000110110", 
    55 => "00111101001001000101110000011011", 
    56 => "00111100111010101101110000100000", 
    57 => "10111101000101010000011111100000", 
    58 => "00111101000101110100010100110010", 
    59 => "10111100111011110001100111111011", 
    60 => "10111101001011110100101110010000", 
    61 => "00111101000010100001111100001111", 
    62 => "10111101000100000011000011111001", 
    63 => "10111101001101101111111001010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_40 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_40 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_40_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_40_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_40_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


