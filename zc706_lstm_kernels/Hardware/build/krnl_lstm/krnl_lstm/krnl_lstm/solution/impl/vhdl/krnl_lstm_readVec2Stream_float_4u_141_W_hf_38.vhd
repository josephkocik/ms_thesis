-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_38_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_38_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111100010001111110100", 
    1 => "00111101100011110010100110110000", 
    2 => "00111101100110001001111010010001", 
    3 => "00111101100100110100101000101110", 
    4 => "00111101011110001110011110001000", 
    5 => "00111101101000111001001001010011", 
    6 => "00111101000101100111111011110001", 
    7 => "00111101100010000000010011101011", 
    8 => "00111101011100000100001010110000", 
    9 => "00111101100100100100001110010001", 
    10 => "00111101100010011001111110001100", 
    11 => "00111101011101100111000101100010", 
    12 => "00111101100110010001101110111001", 
    13 => "00111101001111100001001101000001", 
    14 => "00111101100001000011100000111110", 
    15 => "00111101001111100101110001111110", 
    16 => "00111101010111000110010101111010", 
    17 => "00111101100000110111011011110000", 
    18 => "00111101011010101101000000010001", 
    19 => "00111101100001101110010000001011", 
    20 => "00111101011001010101010000000000", 
    21 => "00111101100100010010010010000100", 
    22 => "00111101101100000111011110000001", 
    23 => "00111100111011010001001111110101", 
    24 => "00111101011101001010011111111110", 
    25 => "00111101100001011001110010111111", 
    26 => "00111101100010011100111001110111", 
    27 => "00111101100000100010111001110101", 
    28 => "00111101100010000101010010000101", 
    29 => "10111101011001101011011111010010", 
    30 => "00111101100001000101101110011101", 
    31 => "00111101100000100101111011000001", 
    32 => "00111101001101000100011010110001", 
    33 => "00111101100001011111000010000100", 
    34 => "00111101100100001010101100101010", 
    35 => "00111101100010110100101001111011", 
    36 => "00111100100111101011100001100110", 
    37 => "00111101100001001101101110011111", 
    38 => "00111101100001000100101001010101", 
    39 => "10111100000100111111011010111110", 
    40 => "00111101001011010011100101101001", 
    41 => "00111101100001001010011010001110", 
    42 => "00111101011110001101001001111010", 
    43 => "00111101100100100100111001000000", 
    44 => "00111101100010000010010110110010", 
    45 => "00111101011010010100111010000000", 
    46 => "00111101100100001100101110100110", 
    47 => "00111101100101111011010101101100", 
    48 => "00111101011111100010000011100111", 
    49 => "00111101100010011101100101000001", 
    50 => "00111100111100000000111111001010", 
    51 => "00111101011001100100110001100001", 
    52 => "00111101100001001011100101000001", 
    53 => "00111101100011110001110010011011", 
    54 => "00111101011000101110100001000111", 
    55 => "00111101100000111011000011000011", 
    56 => "00111101100000111010101010100100", 
    57 => "00111101100010111010000010011101", 
    58 => "00111101011101100000010100000011", 
    59 => "00111101000101100011110111001111", 
    60 => "00111101100000001010111001100111", 
    61 => "00111101100010000101011001101101", 
    62 => "00111101011100111100110010110111", 
    63 => "00111101100010001111111000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_38 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_38 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_38_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_38_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_38_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


