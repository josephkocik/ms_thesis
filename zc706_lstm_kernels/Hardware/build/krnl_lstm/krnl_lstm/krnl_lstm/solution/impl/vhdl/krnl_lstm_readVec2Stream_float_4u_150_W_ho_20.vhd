-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_20_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110011111001010000000111", 
    1 => "10111101100010101100111010011100", 
    2 => "00111000100011101000000110110111", 
    3 => "10111101100010111010110101010110", 
    4 => "10111101011110101011000101110001", 
    5 => "10111110000001000111001011101111", 
    6 => "10111101010100010111111110111101", 
    7 => "10111101100000000010000111000000", 
    8 => "10111101010111111100111001100000", 
    9 => "10111101011101110100001111000100", 
    10 => "10111101100011101010011110111110", 
    11 => "10111110001010000010010110000111", 
    12 => "00111101110001100100010111100010", 
    13 => "00111110110001101101000110000001", 
    14 => "10111111100011011101010101010101", 
    15 => "10111110110011010101100100011101", 
    16 => "10111111001011101010000100110011", 
    17 => "10111110010101011010110011110011", 
    18 => "00111111010010011100010110001010", 
    19 => "10111100101111011111001110000100", 
    20 => "10111111010001010100000011000110", 
    21 => "10111101100101111101000010100100", 
    22 => "00111101101111011011111111100101", 
    23 => "00111110011010010111100111101110", 
    24 => "10111101101010100110010110111010", 
    25 => "10111110110010101011000001000110", 
    26 => "10111101110110110101111010111100", 
    27 => "00111110100101101110101111111101", 
    28 => "00111100100001101101100000011101", 
    29 => "10111110101110100001010011000001", 
    30 => "10111101011010001010010000110111", 
    31 => "10111110010101001010100110101100", 
    32 => "00111110110110001100100101000000", 
    33 => "10111101100011111101000010101111", 
    34 => "10111101100010101101111100110101", 
    35 => "00111110001100011111100000100111", 
    36 => "10111111000011000100101100001101", 
    37 => "10111101100011001111001011101100", 
    38 => "10111101101000001100000110110001", 
    39 => "00111110101010110100000101100110", 
    40 => "00111111010111100011110001100100", 
    41 => "10111101100001111101011000000000", 
    42 => "10111101010110101111000101010011", 
    43 => "10111101100000101011010001000001", 
    44 => "10111101011011010001001101100001", 
    45 => "10111110001000001111011100100101", 
    46 => "10111101100100001011111111011110", 
    47 => "10111101001001001000110110001011", 
    48 => "10111100100001010011000110000111", 
    49 => "10111101000010100011010011100010", 
    50 => "00111110101110101011100001111111", 
    51 => "00111110011000100001110010111011", 
    52 => "10111101100001000111101100000001", 
    53 => "10111101011101000001101010001010", 
    54 => "10111110101110011111111011010011", 
    55 => "00111100000101011100001000111001", 
    56 => "10111101100001011000000000010111", 
    57 => "00111011011111100110100001101111", 
    58 => "10111101000110110101011111100011", 
    59 => "00111111101110001111101010011001", 
    60 => "10111010000110001010111110000000", 
    61 => "10111100001010000101000101001001", 
    62 => "10111101100001111000001111111110", 
    63 => "10111101100001011101010100101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_20 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_20_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


