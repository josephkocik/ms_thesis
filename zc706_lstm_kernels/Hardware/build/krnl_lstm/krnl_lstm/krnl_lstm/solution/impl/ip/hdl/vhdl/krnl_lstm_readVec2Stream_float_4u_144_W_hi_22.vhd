-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000111001001100111011011", 
    1 => "00111100110111101010101111011011", 
    2 => "00111101001011010100110001101011", 
    3 => "00111100101010100100010000100110", 
    4 => "00111101001110001010100101110011", 
    5 => "00111101000111100111101000101000", 
    6 => "00111101000110000010111101011010", 
    7 => "00111101010011001011100100100011", 
    8 => "00111100100111101010011101100110", 
    9 => "00111101001111000010110001011101", 
    10 => "10111011011001101101111010100011", 
    11 => "00111101000110001011010010010010", 
    12 => "00111110001100110000011100110000", 
    13 => "00111101001111101011011010001100", 
    14 => "00111110100011010100000001001000", 
    15 => "00111100100111001010111110101001", 
    16 => "00111101000001100110111011101110", 
    17 => "00111100111011111010001110010001", 
    18 => "10111110110000011001010101111010", 
    19 => "00111101000100100110100000001111", 
    20 => "00111101000111111001111000100100", 
    21 => "00111101001101010110111110111110", 
    22 => "00111110000101100101110101111101", 
    23 => "00111101001001110000110010111011", 
    24 => "00111101000011100101011010000010", 
    25 => "10111111010110110100000110110101", 
    26 => "00111101000100101011011110111110", 
    27 => "00111101010001011110010000010111", 
    28 => "00111100110110110100111001000010", 
    29 => "10111100110101001110110000111101", 
    30 => "00111101000111010100110111111000", 
    31 => "00111100111000110110110010101101", 
    32 => "00111101000110100111001100110001", 
    33 => "00111100110001000010000011100100", 
    34 => "00111101001101010110000011110001", 
    35 => "00111101000000001101101010011101", 
    36 => "10111100111011111101101101000010", 
    37 => "00111100100111010011001011011100", 
    38 => "00111101000101000001000000001111", 
    39 => "10111101000100111011001011101100", 
    40 => "00111100110110010011000111001100", 
    41 => "00111101001110010001110100100011", 
    42 => "00111100110010110100000010010011", 
    43 => "00111101001111100100011001001011", 
    44 => "00111101000011101000111110001011", 
    45 => "00111100001011001010100110111101", 
    46 => "00111101000111001000111010111101", 
    47 => "00111100111011100010001011110110", 
    48 => "10111100001111000010110010000110", 
    49 => "10111100101001100110011000001001", 
    50 => "00111111000100011001100110000000", 
    51 => "00111110101111010001111100001110", 
    52 => "00111100110000111001100110111111", 
    53 => "00111101000100111100110111101110", 
    54 => "00111101000011001110001000001110", 
    55 => "00111101001000000011000111000101", 
    56 => "00111100110110011011111011010111", 
    57 => "00111101001001111000100001111011", 
    58 => "00111101010000011011100110101010", 
    59 => "00111101000000000000010110001101", 
    60 => "00111101010010010110011111010011", 
    61 => "00111101000111111000100110011010", 
    62 => "00111101000010110011011111111110", 
    63 => "00111101010100001111001010100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_22 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_22_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


