-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_28_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_28_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000110000001110010111011", 
    1 => "00111101010000100110010000101100", 
    2 => "00111101000101011101101000100111", 
    3 => "00111101000010000011110110110111", 
    4 => "00111101011110000110101111000111", 
    5 => "00111110000100101010110101010110", 
    6 => "00111101111101000110111111100001", 
    7 => "00111101100100010010111001010000", 
    8 => "00111101011010100000111010101100", 
    9 => "00111101100010000111110111011100", 
    10 => "00111101000110001001100011110111", 
    11 => "00111101000100011000110011111000", 
    12 => "10111011110000011101000000101101", 
    13 => "00111101010000010100111110011010", 
    14 => "00111110100111110110100001111010", 
    15 => "00111111010101010100110100101001", 
    16 => "00111111010110000101000010100111", 
    17 => "00111101000110001110101001000011", 
    18 => "10111110000111111011010110101110", 
    19 => "00111101001000100101100111100010", 
    20 => "00111111010110000010011011001111", 
    21 => "00111101001011000010010010100001", 
    22 => "10111101001010001111101100110001", 
    23 => "00111100110110110001000011010010", 
    24 => "00111101100000100101100001100111", 
    25 => "00111110010111011011001101111111", 
    26 => "00111101001000000000101010000001", 
    27 => "00111101000111110111100111000100", 
    28 => "00111101000111111100101011111010", 
    29 => "00111110101100101110011010100111", 
    30 => "00111101010111101110100010010111", 
    31 => "00111101000101111100100110100000", 
    32 => "00111011011101100111100111001101", 
    33 => "00111101000101011000110101000111", 
    34 => "00111101100001100011110111111100", 
    35 => "00111101001111100000010101010000", 
    36 => "00111110100100000111011011011000", 
    37 => "00111101000101110010101011100110", 
    38 => "00111101001001001001001010011011", 
    39 => "00111100011001011101010010110100", 
    40 => "00111100011001100110011001000100", 
    41 => "00111101011011111111100001010011", 
    42 => "00111101010010110010111110110100", 
    43 => "00111101100010011101101010111111", 
    44 => "00111101011111001010101111110111", 
    45 => "00111101000100010010110000011000", 
    46 => "00111101100000001001010110111001", 
    47 => "00111101010101110111101111011100", 
    48 => "00111101000011000010111001100010", 
    49 => "00111101001010001011000100001000", 
    50 => "10111100000110111101010000000010", 
    51 => "00111101110111111001011111111011", 
    52 => "00111101001000011000001100010001", 
    53 => "00111101100000001101111001011010", 
    54 => "00111111010011001000010001100110", 
    55 => "00111101000111100010001111000101", 
    56 => "00111101011001101101010101010010", 
    57 => "00111101000111000111001001010101", 
    58 => "00111101011111111011011010110111", 
    59 => "00111100010111100110011000011100", 
    60 => "00111101011110011011100100111010", 
    61 => "00111101001100101001000001111000", 
    62 => "00111101001000011101001001000101", 
    63 => "00111101100000001111101111001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_28 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_28 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_28_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


