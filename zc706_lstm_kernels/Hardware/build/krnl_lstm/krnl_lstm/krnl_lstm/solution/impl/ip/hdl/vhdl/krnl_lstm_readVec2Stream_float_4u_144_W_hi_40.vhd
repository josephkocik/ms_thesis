-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_40_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_40_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101110000101001001110", 
    1 => "10111101001100010001010000001011", 
    2 => "10111100110101010100110000000101", 
    3 => "00111100101001001111010010100000", 
    4 => "10111101011101111101111010100011", 
    5 => "10111110001010011011010001001000", 
    6 => "10111101011001100111101100101110", 
    7 => "10111101011011000100001000000110", 
    8 => "10111101100011000101000010000110", 
    9 => "10111101011100010000100010100100", 
    10 => "10111101000011101100101110010010", 
    11 => "10111101000100001100001110010111", 
    12 => "00111101010000001110100011011111", 
    13 => "10111101010101011010101100110100", 
    14 => "10111110101100011101110101000101", 
    15 => "10111111010111000000101000111110", 
    16 => "10111111010111111101010011111001", 
    17 => "10111101000110000100111010101110", 
    18 => "10111100100110001010011110111011", 
    19 => "10111101001001011011010110001100", 
    20 => "10111111011010010101010111111011", 
    21 => "00111100000111001100100101010101", 
    22 => "00111110001101010111101000100010", 
    23 => "00111101000101000000001000110010", 
    24 => "10111101011001101011010101100001", 
    25 => "10111110100010100010111001011110", 
    26 => "10111101001000000100100001111001", 
    27 => "10111101011110110111001001000001", 
    28 => "10111101000110101011100111110101", 
    29 => "10111110101101101100011111101100", 
    30 => "10111101010011001000001101011010", 
    31 => "10111101000101100000000111000110", 
    32 => "10111101010110000100011000101101", 
    33 => "10111101000100111011110001001101", 
    34 => "10111101011010110010100111101111", 
    35 => "00111010101101010101011000100100", 
    36 => "10111110101010000001010001101001", 
    37 => "10111101000101000000010000001010", 
    38 => "10111101001001100010010011010001", 
    39 => "10111101010101111000101000100111", 
    40 => "10111101011001100000110010000011", 
    41 => "10111101010101111111100111000001", 
    42 => "10111101000111100011100000011110", 
    43 => "10111101011100101111101010110110", 
    44 => "10111101010111111111001001001010", 
    45 => "10111101001110110011010000011110", 
    46 => "10111101011000011100010000010110", 
    47 => "10111101001111110000100101010011", 
    48 => "10111101011000010001001111111100", 
    49 => "10111101001001100110011111011101", 
    50 => "00111101011001100000100011010010", 
    51 => "10111100011100001000010110100100", 
    52 => "10111101000111010100001011110100", 
    53 => "10111101010001111000000111010101", 
    54 => "10111111011000111010001101110110", 
    55 => "10111101000111011100011100110101", 
    56 => "10111101010100100101000110101111", 
    57 => "10111101000101001101010100011110", 
    58 => "10111101011011011111000110010010", 
    59 => "10111101001111110111010010110000", 
    60 => "10111101011001000111000111001101", 
    61 => "10111101001110111101011001101010", 
    62 => "10111101000100011011000000000001", 
    63 => "10111101001101110110101001110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_40 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_40 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_40_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_40_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_40_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


