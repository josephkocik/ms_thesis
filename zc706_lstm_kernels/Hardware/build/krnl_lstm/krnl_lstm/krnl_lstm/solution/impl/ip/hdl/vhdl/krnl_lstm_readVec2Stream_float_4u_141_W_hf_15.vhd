-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_15_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001111110011100011001", 
    1 => "10111101011101001010011111111110", 
    2 => "10111101011110100001011000110000", 
    3 => "10111101011111100100001011000000", 
    4 => "10111101011010000110010101010011", 
    5 => "10111101000001110101111110110010", 
    6 => "10111101000000111001000011010001", 
    7 => "10111101011101101010101001000010", 
    8 => "10111101011000001110000101010110", 
    9 => "10111101100001101111101000011000", 
    10 => "10111101011011110011011100100011", 
    11 => "10111101000100110101010011010011", 
    12 => "10111101101111111101011101111011", 
    13 => "10111101001111110100011101101000", 
    14 => "10111101000100110110110110001010", 
    15 => "10111101101111000111111111100010", 
    16 => "10111101100110100001111011011100", 
    17 => "10111101011010100011110111110101", 
    18 => "00111111100100001111000011111011", 
    19 => "10111101010111111101001111110010", 
    20 => "10111101011101110100110001101100", 
    21 => "10111101011001011110100011000011", 
    22 => "10111101101100001011000101001110", 
    23 => "10111101100110101010110001011111", 
    24 => "10111101011001100011000010010000", 
    25 => "10111101010111101101010011100000", 
    26 => "10111101011001010000001000111110", 
    27 => "10111101001111010100010110011111", 
    28 => "10111101011100100111101100101100", 
    29 => "10111110101011010001011111111110", 
    30 => "10111101000101101000110001000010", 
    31 => "10111101011010101000100000000100", 
    32 => "10111101000000111001101100110001", 
    33 => "10111101011000111111110011000100", 
    34 => "10111101100001010111100000110001", 
    35 => "10111101100010010000101000101011", 
    36 => "10111101100100100011010111110010", 
    37 => "10111101011001110000110011010000", 
    38 => "10111101010111010010100010100001", 
    39 => "00111110101100000010000100100000", 
    40 => "00111010110101110001010110110110", 
    41 => "10111101011010011001100010011001", 
    42 => "10111101011010101001111010010101", 
    43 => "10111101100001110001010011010111", 
    44 => "10111101011110010001001100001101", 
    45 => "10111101010110100000110011101110", 
    46 => "10111101100001011010100100110001", 
    47 => "10111101011111001110010100001000", 
    48 => "10111101010011000000100101111100", 
    49 => "10111101011011100101101000010110", 
    50 => "10111011101101110111011101000010", 
    51 => "10111101010100010011100000010000", 
    52 => "10111101011010000111110010100001", 
    53 => "10111101100000010000011100110000", 
    54 => "10111101100011100011101001101100", 
    55 => "10111101010000001000101101101100", 
    56 => "10111101011100100111110101001110", 
    57 => "10111101010110000110010001110010", 
    58 => "10111101011000101110011000100010", 
    59 => "00111011111011001010010001100011", 
    60 => "10111101011100000100100011011101", 
    61 => "10111101011011001110001110100000", 
    62 => "10111101001000101011110110101001", 
    63 => "10111101100000001001111101101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_15 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_15_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


