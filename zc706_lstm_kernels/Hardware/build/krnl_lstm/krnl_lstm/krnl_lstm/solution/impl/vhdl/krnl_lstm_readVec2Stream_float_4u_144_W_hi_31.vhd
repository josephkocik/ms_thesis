-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_31_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000110000001110000110111", 
    1 => "00111101010000000110011111010111", 
    2 => "00111101000100111010011011001011", 
    3 => "00111101000001110000010111010011", 
    4 => "00111101011101101000111000100100", 
    5 => "00111110000100101010000010001111", 
    6 => "00111101111101000111110001011010", 
    7 => "00111101100011111110101110001011", 
    8 => "00111101011001111010101110011111", 
    9 => "00111101100001110110100011111111", 
    10 => "00111101000101111110110001010010", 
    11 => "00111101000100011100011000100100", 
    12 => "10111011111000001110110010100011", 
    13 => "00111101001111111011010100101110", 
    14 => "00111110100110010111100001110101", 
    15 => "00111111010101010101001001110110", 
    16 => "00111111010110000101011111111000", 
    17 => "00111101000110000100110000111100", 
    18 => "10111110000111111011111010010110", 
    19 => "00111101001000100000011001110010", 
    20 => "00111111010110000010011011111011", 
    21 => "00111101001010000100100000011011", 
    22 => "10111101001011011010110000001001", 
    23 => "00111100110110110101000010011110", 
    24 => "00111101011111111100111010010011", 
    25 => "00111110010100100010001010111100", 
    26 => "00111101000111111010100100011101", 
    27 => "00111101000111110110111100001011", 
    28 => "00111101000111110010111001101011", 
    29 => "00111110110000001101100110011100", 
    30 => "00111101010111000111111000011001", 
    31 => "00111101000101110001010010011010", 
    32 => "00111011100001001101101111111011", 
    33 => "00111101000101001001001010001101", 
    34 => "00111101100001010011011111100001", 
    35 => "00111101001110110011111101011001", 
    36 => "00111110100110111101001101000010", 
    37 => "00111101000101100100000000101010", 
    38 => "00111101001001000011000101101011", 
    39 => "00111100011001111111110000010011", 
    40 => "00111100011010001000001000010010", 
    41 => "00111101011011101001000100000101", 
    42 => "00111101010001110010000000011110", 
    43 => "00111101100010001101000101011001", 
    44 => "00111101011110011011011100001110", 
    45 => "00111101000011110011010111111001", 
    46 => "00111101011111101111001111010111", 
    47 => "00111101010101001001010011101000", 
    48 => "00111101000010100101010001101000", 
    49 => "00111101001010001100010010011001", 
    50 => "10111100000101010100100100100110", 
    51 => "00111101110111111001011010001111", 
    52 => "00111101000111111111101010000011", 
    53 => "00111101011111101001111000100001", 
    54 => "00111111010011000111111011011100", 
    55 => "00111101000111100000010011011111", 
    56 => "00111101011001001000010011001010", 
    57 => "00111101000110111110001001110111", 
    58 => "00111101011111100010000100001100", 
    59 => "00111100011000001000110101000001", 
    60 => "00111101011101111110000111001011", 
    61 => "00111101001100101001001000100000", 
    62 => "00111101000111111101110110110001", 
    63 => "00111101011111110110010001000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_31 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_31 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_31_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


