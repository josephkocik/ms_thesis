-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_11_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110100001000101111011", 
    1 => "10111101010000101011011100110011", 
    2 => "10111101000100110000001010100010", 
    3 => "10111101000001111100010011100111", 
    4 => "10111101011110001111100001111010", 
    5 => "10111110000110101110110110101011", 
    6 => "10111101111101000110110000111000", 
    7 => "10111101100100011000100111000011", 
    8 => "10111101011010101110000000000110", 
    9 => "10111101100010001101000100001111", 
    10 => "10111101000110001010010101001011", 
    11 => "10111101000100110010101000111100", 
    12 => "00111011101110010000110001010010", 
    13 => "10111101010000111001111000010001", 
    14 => "10111110100011000000001110100110", 
    15 => "10111111010101110000000011101110", 
    16 => "10111111010110100100000101000000", 
    17 => "10111101000110100001100100010111", 
    18 => "00111110000111111100101001001100", 
    19 => "10111101001001001011100100010100", 
    20 => "10111111010111011011010110011100", 
    21 => "10111101001011001001101101100110", 
    22 => "00111101001010011101101101000010", 
    23 => "10111100110110110101100001001010", 
    24 => "10111101100000100101011101010000", 
    25 => "10111110010110110111010111010111", 
    26 => "10111101001000100011011001010110", 
    27 => "10111101000111111001100100010001", 
    28 => "10111101001000010011101101010101", 
    29 => "10111110101011000110010110001000", 
    30 => "10111101011000000011000111100101", 
    31 => "10111101000110001100101011000101", 
    32 => "10111011011110100111110010111100", 
    33 => "10111101000101011100110001110000", 
    34 => "10111101100001101000010001110001", 
    35 => "10111101001111010111110011001001", 
    36 => "10111110100111110011110000001111", 
    37 => "10111101000101111011001000010101", 
    38 => "10111101001001110001011011011111", 
    39 => "10111100011001101100111000111100", 
    40 => "10111100011001111010000010011001", 
    41 => "10111101011100000001000101100010", 
    42 => "10111101010010101101000100001001", 
    43 => "10111101100010100001111110000011", 
    44 => "10111101011111101001001010101110", 
    45 => "10111101000100011001001011100100", 
    46 => "10111101100000001111100011010100", 
    47 => "10111101010110000111010101111010", 
    48 => "10111101000011000001001110101001", 
    49 => "10111101001010001011101011111001", 
    50 => "00111100000110000111000011111010", 
    51 => "10111101110111111010100001010010", 
    52 => "10111101001000100001110101100110", 
    53 => "10111101100000010110110111000101", 
    54 => "10111111010101000010000010100010", 
    55 => "10111101001000000111100000010101", 
    56 => "10111101011001111001001000011110", 
    57 => "10111101000111000101010000000000", 
    58 => "10111101011110111011001110101001", 
    59 => "10111100010111111110010001100000", 
    60 => "10111101011110100000111011000001", 
    61 => "10111101001100101000101101111101", 
    62 => "10111101001000100100101001010000", 
    63 => "10111101100000010100011000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_11 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_11_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


