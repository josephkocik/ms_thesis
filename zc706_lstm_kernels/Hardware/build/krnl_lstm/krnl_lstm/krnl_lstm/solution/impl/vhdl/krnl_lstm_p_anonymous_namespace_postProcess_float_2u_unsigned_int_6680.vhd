-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_p_anonymous_namespace_postProcess_float_2u_unsigned_int_6680 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l_pad3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    l_pad3_empty_n : IN STD_LOGIC;
    l_pad3_read : OUT STD_LOGIC;
    l_dot2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_dot2_full_n : IN STD_LOGIC;
    l_dot2_write : OUT STD_LOGIC );
end;


architecture behav of krnl_lstm_p_anonymous_namespace_postProcess_float_2u_unsigned_int_6680 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l_pad3_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal l_dot2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal reg_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_31_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_35_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_69 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_40_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_75 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_fu_80_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_31_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_32_fu_90_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln145_33_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_34_fu_100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_35_fu_105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_36_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitcast_ln145_37_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_38_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_39_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_40_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bitcast_ln145_41_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_42_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_43_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_44_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal bitcast_ln145_45_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_31_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_31_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_35_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_35_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_40_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_40_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_31_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_35_ce : STD_LOGIC;
    signal grp_fu_40_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1054 : component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_31_p0,
        din1 => grp_fu_31_p1,
        ce => grp_fu_31_ce,
        dout => grp_fu_31_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U1055 : component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_35_p0,
        din1 => grp_fu_35_p1,
        ce => grp_fu_35_ce,
        dout => grp_fu_35_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U1056 : component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_40_p0,
        din1 => grp_fu_40_p1,
        ce => grp_fu_40_ce,
        dout => grp_fu_40_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((l_dot2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l_pad3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_44 <= l_pad3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_48 <= l_pad3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then
                reg_52 <= grp_fu_31_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_58 <= grp_fu_31_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_64 <= grp_fu_31_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then
                reg_69 <= grp_fu_35_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then
                reg_75 <= grp_fu_40_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l_pad3_empty_n, l_dot2_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state35)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((l_pad3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((l_dot2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, l_pad3_empty_n)
    begin
                ap_block_state1 <= ((l_pad3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, l_dot2_full_n, ap_CS_fsm_state35)
    begin
        if (((l_dot2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(l_dot2_full_n, ap_CS_fsm_state35)
    begin
        if (((l_dot2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln145_31_fu_85_p1 <= reg_48;
    bitcast_ln145_32_fu_90_p1 <= reg_44;
    bitcast_ln145_33_fu_95_p1 <= reg_48;
    bitcast_ln145_34_fu_100_p1 <= reg_44;
    bitcast_ln145_35_fu_105_p1 <= reg_48;
    bitcast_ln145_36_fu_110_p1 <= reg_44;
    bitcast_ln145_37_fu_115_p1 <= reg_48;
    bitcast_ln145_38_fu_120_p1 <= reg_44;
    bitcast_ln145_39_fu_125_p1 <= reg_48;
    bitcast_ln145_40_fu_130_p1 <= reg_44;
    bitcast_ln145_41_fu_135_p1 <= reg_48;
    bitcast_ln145_42_fu_140_p1 <= reg_44;
    bitcast_ln145_43_fu_145_p1 <= reg_48;
    bitcast_ln145_44_fu_150_p1 <= reg_44;
    bitcast_ln145_45_fu_155_p1 <= reg_48;
    bitcast_ln145_fu_80_p1 <= reg_44;

    grp_fu_31_ce_assign_proc : process(ap_CS_fsm_state1, l_pad3_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l_pad3_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            grp_fu_31_ce <= ap_const_logic_0;
        else 
            grp_fu_31_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_31_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, reg_52, reg_58, bitcast_ln145_31_fu_85_p1, ap_CS_fsm_state5, bitcast_ln145_33_fu_95_p1, bitcast_ln145_35_fu_105_p1, ap_CS_fsm_state10, bitcast_ln145_39_fu_125_p1, ap_CS_fsm_state15, bitcast_ln145_43_fu_145_p1, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_31_p0 <= bitcast_ln145_43_fu_145_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_31_p0 <= reg_52;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_31_p0 <= bitcast_ln145_39_fu_125_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_31_p0 <= reg_58;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_31_p0 <= bitcast_ln145_35_fu_105_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_31_p0 <= bitcast_ln145_33_fu_95_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_31_p0 <= bitcast_ln145_31_fu_85_p1;
        else 
            grp_fu_31_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_31_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, reg_52, reg_69, bitcast_ln145_fu_80_p1, bitcast_ln145_32_fu_90_p1, ap_CS_fsm_state5, bitcast_ln145_34_fu_100_p1, ap_CS_fsm_state10, bitcast_ln145_38_fu_120_p1, ap_CS_fsm_state15, bitcast_ln145_42_fu_140_p1, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_31_p1 <= reg_69;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_31_p1 <= bitcast_ln145_42_fu_140_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_31_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_31_p1 <= bitcast_ln145_38_fu_120_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_31_p1 <= reg_52;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_31_p1 <= bitcast_ln145_34_fu_100_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_31_p1 <= bitcast_ln145_32_fu_90_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_31_p1 <= bitcast_ln145_fu_80_p1;
        else 
            grp_fu_31_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_35_ce_assign_proc : process(l_pad3_empty_n, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_35_ce <= ap_const_logic_1;
        else 
            grp_fu_35_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_35_p0_assign_proc : process(reg_69, reg_75, ap_CS_fsm_state10, bitcast_ln145_37_fu_115_p1, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_35_p0 <= reg_75;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_35_p0 <= reg_69;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_35_p0 <= bitcast_ln145_37_fu_115_p1;
        else 
            grp_fu_35_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_35_p1_assign_proc : process(reg_58, reg_64, bitcast_ln145_36_fu_110_p1, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_35_p1 <= reg_58;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_35_p1 <= reg_64;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_35_p1 <= bitcast_ln145_36_fu_110_p1;
        else 
            grp_fu_35_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_40_ce_assign_proc : process(l_pad3_empty_n, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_40_ce <= ap_const_logic_1;
        else 
            grp_fu_40_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_40_p0_assign_proc : process(ap_CS_fsm_state15, bitcast_ln145_41_fu_135_p1, ap_CS_fsm_state20, bitcast_ln145_45_fu_155_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_40_p0 <= bitcast_ln145_45_fu_155_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_40_p0 <= bitcast_ln145_41_fu_135_p1;
        else 
            grp_fu_40_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_40_p1_assign_proc : process(bitcast_ln145_40_fu_130_p1, ap_CS_fsm_state15, bitcast_ln145_44_fu_150_p1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_40_p1 <= bitcast_ln145_44_fu_150_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_40_p1 <= bitcast_ln145_40_fu_130_p1;
        else 
            grp_fu_40_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l_dot2_blk_n_assign_proc : process(l_dot2_full_n, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            l_dot2_blk_n <= l_dot2_full_n;
        else 
            l_dot2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_dot2_din <= reg_52;

    l_dot2_write_assign_proc : process(l_dot2_full_n, ap_CS_fsm_state35)
    begin
        if (((l_dot2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            l_dot2_write <= ap_const_logic_1;
        else 
            l_dot2_write <= ap_const_logic_0;
        end if; 
    end process;


    l_pad3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_pad3_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_pad3_blk_n <= l_pad3_empty_n;
        else 
            l_pad3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_pad3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, l_pad3_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((l_pad3_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((l_pad3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            l_pad3_read <= ap_const_logic_1;
        else 
            l_pad3_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
