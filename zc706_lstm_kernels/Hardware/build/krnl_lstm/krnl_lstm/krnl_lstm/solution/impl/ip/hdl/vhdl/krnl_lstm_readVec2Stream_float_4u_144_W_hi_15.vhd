-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_15_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100110101011101010001", 
    1 => "10111101001111011011100111000011", 
    2 => "10111101000010100011000010100001", 
    3 => "10111100111111100110101011001011", 
    4 => "10111101011101100100010000111101", 
    5 => "10111101001010100111010001001011", 
    6 => "10111101000010000011100000110110", 
    7 => "10111101100011111000110000101101", 
    8 => "10111101011001111111110110111011", 
    9 => "10111101100001110010000100000010", 
    10 => "10111101000101011011010000010010", 
    11 => "10111101000010111100101100111100", 
    12 => "10111011100010111111100110100010", 
    13 => "10111101010000111000100100100110", 
    14 => "10111110010000111101100111011010", 
    15 => "10111101011100001100001011011100", 
    16 => "10111101110110101110100111111111", 
    17 => "10111101000101110001001110111110", 
    18 => "00111111110010101101000011001011", 
    19 => "10111101000111101101100001001000", 
    20 => "10111101100000100010110101110100", 
    21 => "10111101001000111011100010000110", 
    22 => "10111101111110111101110101011011", 
    23 => "10111100111000000110111000010011", 
    24 => "10111101100000001110010111000111", 
    25 => "00111111100000101000110010001000", 
    26 => "10111101000111011101100111010011", 
    27 => "10111101000110010101011101001000", 
    28 => "10111101000111011001101101111011", 
    29 => "10111101011100010000011100011111", 
    30 => "10111101010110110111101100001000", 
    31 => "10111101000101011110111011101000", 
    32 => "10111100010011001010100010100111", 
    33 => "10111101000100011011011011001001", 
    34 => "10111101100001001011011001010011", 
    35 => "10111101001111100101010111001111", 
    36 => "10111101000011101111001101100011", 
    37 => "10111101000100111010101000101101", 
    38 => "10111101000111111111001001000100", 
    39 => "00111100111110111101111110111010", 
    40 => "10111100010011111011000001111010", 
    41 => "10111101011011000001100001110001", 
    42 => "10111101010010000010001011001010", 
    43 => "10111101100010000101101101001010", 
    44 => "10111101011111000000010110000011", 
    45 => "10111101000011111011101010100110", 
    46 => "10111101011111100110000001111001", 
    47 => "10111101010100110000100000001011", 
    48 => "10111101000001001100100001101111", 
    49 => "10111101001001101111011011101110", 
    50 => "10111111011110100110100010010100", 
    51 => "10111111100100111110111011000100", 
    52 => "10111101000111100000101001011110", 
    53 => "10111101011111100000001011000001", 
    54 => "10111101000000011000000011000001", 
    55 => "10111101000110100111101110100011", 
    56 => "10111101011000110001111011110011", 
    57 => "10111101000101101111010101101110", 
    58 => "10111101011101111100000010101001", 
    59 => "10111100010111010110001001000000", 
    60 => "10111101011101100111111010001001", 
    61 => "10111101001100010000100100001110", 
    62 => "10111101000110110001001100101011", 
    63 => "10111101011111100000111010010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_15 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_15_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


