-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_32_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_32_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100010111101000111101100", 
    1 => "10111101100100011100000011111101", 
    2 => "10111101100001011100011010001011", 
    3 => "10111101100100001100010010111100", 
    4 => "10111101100000111010101110110011", 
    5 => "10111101101111011000100010111111", 
    6 => "00111100110100110001000100000100", 
    7 => "10111101011100001101100010000011", 
    8 => "10111101100010110001101000000000", 
    9 => "10111101100000001001010101001111", 
    10 => "10111101011101001001100100000011", 
    11 => "10111101100011010100011100010001", 
    12 => "10111101100110111111100001011010", 
    13 => "10111101010100010010001100110111", 
    14 => "10111101100110000110000001100100", 
    15 => "10111101010010101000001001010100", 
    16 => "10111101011011111000110100110011", 
    17 => "10111101100100000000000110000100", 
    18 => "10111101110011100010000000111100", 
    19 => "10111101100101100110110100001000", 
    20 => "10111101011101101011100010010001", 
    21 => "10111101011000011001101111011110", 
    22 => "10111101011000111000101100011010", 
    23 => "00111101110000110100011111000001", 
    24 => "10111101010101111000110001010110", 
    25 => "10111101100001011001111110010100", 
    26 => "10111101100101111000110110011011", 
    27 => "10111101100000100110000100101101", 
    28 => "10111101100100010110011011001101", 
    29 => "00111101000000011100101000011110", 
    30 => "10111101100010001000110010110000", 
    31 => "10111101100011011011110111011111", 
    32 => "10111110000100010101101111111010", 
    33 => "10111101100101110010100010101010", 
    34 => "10111101100000010000010001100111", 
    35 => "10111101010001001000001000101010", 
    36 => "10111100011011011010001110010110", 
    37 => "10111101100100110111110111101001", 
    38 => "10111101100100011010110111110001", 
    39 => "00111100111010111000000010001011", 
    40 => "10111110001110100110111110111011", 
    41 => "10111101100100010001101110010111", 
    42 => "10111101010110011000000111000100", 
    43 => "10111101011111111011010100001100", 
    44 => "10111101011011001110101100011000", 
    45 => "10111101100011110000100101001110", 
    46 => "10111101100000010111011000000111", 
    47 => "10111101100111010000010001010111", 
    48 => "10111101101000001010011010111011", 
    49 => "10111101100010001000001100100000", 
    50 => "10111110101001000011111111100010", 
    51 => "00111100010101111001010001100101", 
    52 => "10111101100100100010100000010100", 
    53 => "10111101100010000100000001011101", 
    54 => "10111101010111001111100111110010", 
    55 => "10111101100011101111111001101100", 
    56 => "10111101011101011001010001110001", 
    57 => "10111101100001011000111000100011", 
    58 => "10111101011111111111010011011010", 
    59 => "10111110001100011001011010101000", 
    60 => "10111101011101101001010011011010", 
    61 => "10111101101000100010101101100101", 
    62 => "10111101011111010010100111100011", 
    63 => "10111101011001111110010101010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_32 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_32 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_32_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_32_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_32_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


