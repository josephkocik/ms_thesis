-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010000101111100010011", 
    1 => "10111101000000100101100111010100", 
    2 => "10111101001010001100000001100000", 
    3 => "00111101000010011110010111010011", 
    4 => "10111101000111111101100101110111", 
    5 => "00111101000110110010101100101100", 
    6 => "10111101000101100011101010110011", 
    7 => "10111101001111100010000111100101", 
    8 => "00111101000110000010101100110111", 
    9 => "10111101001001101001000100001011", 
    10 => "10111100110010001110111000101111", 
    11 => "10111101001001111000000000111000", 
    12 => "00111101111111011001111101101000", 
    13 => "00111100101011100000011000111001", 
    14 => "10111110000010001110101101000101", 
    15 => "10111101110010101011010101000011", 
    16 => "00111101001111111110000101000100", 
    17 => "10111100110011100110101101110100", 
    18 => "10111100111100011011111011110111", 
    19 => "10111101000100100000011100110101", 
    20 => "10111101001100001001001110001101", 
    21 => "00111101001000100001100110110001", 
    22 => "00111101011010010011101001110110", 
    23 => "10111101000110000110010001010101", 
    24 => "00111101000100100100011000010000", 
    25 => "00111101000010010101011000000111", 
    26 => "10111101000100011010010011111100", 
    27 => "10111101000010110000011011111001", 
    28 => "00111100111101000010000101001110", 
    29 => "00111100011011001000010110011010", 
    30 => "10111101000111000011110010110001", 
    31 => "00111100110001101111011010011111", 
    32 => "10111101000011110001110010110001", 
    33 => "00111100110111100010110111011101", 
    34 => "10111101001010110101111011001001", 
    35 => "00111100011100010000101100010100", 
    36 => "10111100000101111100001110110110", 
    37 => "10111100110110011011101100110000", 
    38 => "00111101000100110110100011001101", 
    39 => "00111100111001111001110111010000", 
    40 => "10111101001010001010000100011010", 
    41 => "00111101001001110001011000010011", 
    42 => "00111100111011000000101111001001", 
    43 => "00111101001100110010001100011111", 
    44 => "10111101000010001111011000000001", 
    45 => "00111100111000010101010111001011", 
    46 => "10111101000100111110000011001110", 
    47 => "00111101000000101101101000000110", 
    48 => "00111101000001000010110010000000", 
    49 => "10111100101000111010000101111101", 
    50 => "10111110010111011101111011110000", 
    51 => "00111101010101010011111011100001", 
    52 => "00111100111010011110110011110100", 
    53 => "10111101000001111110000100010111", 
    54 => "10111101001010100111101100101111", 
    55 => "10111101001001111100110101010010", 
    56 => "10111100111011010000111001010001", 
    57 => "00111100111010000010101111010001", 
    58 => "10111101000110110111100111010101", 
    59 => "10111100111010110110001000101100", 
    60 => "00111101001101001000111110000100", 
    61 => "10111101000100011001001011011110", 
    62 => "00111101000100010110011010110101", 
    63 => "00111101010010000100000000101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_16 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_16_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


