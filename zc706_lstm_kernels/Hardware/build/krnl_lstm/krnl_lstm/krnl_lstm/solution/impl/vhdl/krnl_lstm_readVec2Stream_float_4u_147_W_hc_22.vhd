-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010101001101011000111", 
    1 => "10111100110101010110110110010011", 
    2 => "10111101010001100111100001101000", 
    3 => "00111101000011110100000000100111", 
    4 => "10111100101100111000001011000010", 
    5 => "00111101001011100101100111100000", 
    6 => "10111101000111111100001110010010", 
    7 => "10111100111001001011010001100111", 
    8 => "00111100101001001010111101001101", 
    9 => "10111100101111001101011100001011", 
    10 => "10111100000100011100011111001101", 
    11 => "10111101001010110100100111010001", 
    12 => "00111110000000111111001101000101", 
    13 => "00111100101010010001001110010010", 
    14 => "10111110000001010011110010010001", 
    15 => "10111101101110110101001101010100", 
    16 => "00111101001011111111010000000001", 
    17 => "10111100100001000011011101100000", 
    18 => "10111100100111000011101110101000", 
    19 => "10111100111101011000111110010000", 
    20 => "10111101001011101101010110111101", 
    21 => "00111101001101100100000100011101", 
    22 => "00111101000000001110111000100001", 
    23 => "10111101001010000001010101000101", 
    24 => "00111100100111101100100110010111", 
    25 => "00111101001001110101010001100010", 
    26 => "10111100111101100110100101011111", 
    27 => "10111101001000100000010000000111", 
    28 => "00111100101110101101001011100001", 
    29 => "00111100111100101111110001010001", 
    30 => "10111101000101101101010011110111", 
    31 => "00111100011101101101010111100011", 
    32 => "10111101001010110011010100100110", 
    33 => "00111100010100011100011100011001", 
    34 => "10111100101111101110001000100100", 
    35 => "00111100100101010111000110000001", 
    36 => "00111100100110100000111111101101", 
    37 => "10111100010011000000010110011001", 
    38 => "00111100111110101101101110001000", 
    39 => "00111101010001110100000110100010", 
    40 => "10111101010011000100010000000001", 
    41 => "00111100101110101001101100010000", 
    42 => "00111100011101101101110110101110", 
    43 => "00111100110011111011011110001011", 
    44 => "10111100100100101111011110101010", 
    45 => "00111100010111100010010011001110", 
    46 => "10111100100111101111011100111101", 
    47 => "00111100110000100101011001111000", 
    48 => "00111101000000111001010010000111", 
    49 => "10110111101010000001001101100000", 
    50 => "10111101100011000101010001100000", 
    51 => "00111101001101100011100110100001", 
    52 => "00111100011100100001111011001110", 
    53 => "10111100100111001110000110111000", 
    54 => "10111101001011100111101011101001", 
    55 => "10111101001010001110001010110110", 
    56 => "10111100100000000100110100100001", 
    57 => "00111011110110110011010111011011", 
    58 => "10111100101011001101000001011101", 
    59 => "10111101000111001001101001110001", 
    60 => "00111101000010100010100100011111", 
    61 => "10111100111111110111001110001111", 
    62 => "00111101001011000000101100011010", 
    63 => "00111101001000000110011110111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_22 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_22_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


