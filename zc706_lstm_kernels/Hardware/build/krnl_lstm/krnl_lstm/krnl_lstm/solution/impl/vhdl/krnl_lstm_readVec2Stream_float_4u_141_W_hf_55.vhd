-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_55_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_55_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111100111001011000101", 
    1 => "10111101100011110100111011100111", 
    2 => "10111101100110001011000010011010", 
    3 => "10111101100100110101011111001110", 
    4 => "10111101011110010100001100000011", 
    5 => "10111101101000111100000010011010", 
    6 => "10111101000101100110111011000111", 
    7 => "10111101100010000011111100001001", 
    8 => "10111101011100001010010111110001", 
    9 => "10111101100100100110111101011110", 
    10 => "10111101100010011101001110011000", 
    11 => "10111101011101101010110111010101", 
    12 => "10111101100110010001100100111001", 
    13 => "10111101001111100100110000100101", 
    14 => "10111101100001000110000000110000", 
    15 => "10111101001111100101001100010111", 
    16 => "10111101010111000111010111010010", 
    17 => "10111101100000111100011010010101", 
    18 => "10111101011010101110001011111011", 
    19 => "10111101100001110010101111011110", 
    20 => "10111101011001011000000100010111", 
    21 => "10111101100100010100011101000001", 
    22 => "10111101101100001000111011111101", 
    23 => "10111100111011001111011111111001", 
    24 => "10111101011101010001010101011000", 
    25 => "10111101100011010100110111101110", 
    26 => "10111101100010100001101111000101", 
    27 => "10111101100000100011010010111010", 
    28 => "10111101100010001010000110111110", 
    29 => "00111101011001101101100110101011", 
    30 => "10111101100001000111010001100110", 
    31 => "10111101100000101010111001011110", 
    32 => "10111101001011011010111010101100", 
    33 => "10111101100001100001100110000111", 
    34 => "10111101100100001101100101010111", 
    35 => "10111101100010110110100010101001", 
    36 => "10111100100111100101110000100010", 
    37 => "10111101100001010000100101010010", 
    38 => "10111101100001001000111100000010", 
    39 => "00111100000101000001101100011010", 
    40 => "10111101001011001110101001001010", 
    41 => "10111101100001001101011110101110", 
    42 => "10111101011110010011111000101100", 
    43 => "10111101100100101000000011010000", 
    44 => "10111101100010000101101000001110", 
    45 => "10111101011010011011001000110111", 
    46 => "10111101100100001111011010110000", 
    47 => "10111101100101111101110100000010", 
    48 => "10111101011111100101011110001100", 
    49 => "10111101100010011111100100101001", 
    50 => "10111100111011101000110001011000", 
    51 => "10111101011001100010011001001011", 
    52 => "10111101100001001110100010111000", 
    53 => "10111101100011110100100011101100", 
    54 => "10111101011000110001001001010010", 
    55 => "10111101100000111110100010100000", 
    56 => "10111101100000111101010010111010", 
    57 => "10111101100010111011111110100010", 
    58 => "10111101011101101001110001000110", 
    59 => "10111101000101100001000100100100", 
    60 => "10111101100000001110011000111101", 
    61 => "10111101100010000111001111100101", 
    62 => "10111101011100111111011011010101", 
    63 => "10111101100010010011100011010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_55 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_55 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_55_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_55_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_55_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


