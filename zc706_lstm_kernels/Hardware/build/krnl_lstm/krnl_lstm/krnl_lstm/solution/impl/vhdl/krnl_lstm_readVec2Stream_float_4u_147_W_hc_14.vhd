-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_14_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010000100011111111100", 
    1 => "00111101000000101000110100011101", 
    2 => "00111101001010001110111101110001", 
    3 => "10111101000010011011000111101100", 
    4 => "00111101001000000000100011010000", 
    5 => "00111101110111111110101011100000", 
    6 => "00111101000001111100001000010011", 
    7 => "00111101001111100011110000111001", 
    8 => "10111101000110000110001101001101", 
    9 => "00111101001001101101001010111010", 
    10 => "00111100110010100000010000101110", 
    11 => "00111101001001110100101101101111", 
    12 => "10111101111111101010110100111000", 
    13 => "10111100101011100011011111110001", 
    14 => "10111101011110010100011100010011", 
    15 => "00111110000010111010010111000100", 
    16 => "10111101110101010011100011101110", 
    17 => "00111100110101010111110100000110", 
    18 => "00111100111100001110000001101010", 
    19 => "00111101000101000101000011111110", 
    20 => "00111101100011010111001001110100", 
    21 => "10111101001000100000110101001001", 
    22 => "10111101011010100011110110100011", 
    23 => "00111101000110000111100001100010", 
    24 => "10111101000100101001110010111110", 
    25 => "10111101000011100011100000101011", 
    26 => "00111101000100111110100011000111", 
    27 => "00111101000010101110110101100010", 
    28 => "10111100111110101101011000011101", 
    29 => "00111101000100000110101110111101", 
    30 => "00111101000111000010010000000001", 
    31 => "10111100110011011001101010110000", 
    32 => "00111101000011110010110010010110", 
    33 => "10111100110111110010110100000000", 
    34 => "00111101001010111001001101011011", 
    35 => "10111100011111111100101110111110", 
    36 => "10111101100111100100000110010100", 
    37 => "00111100110110101000111111111001", 
    38 => "10111101000101011001001101100010", 
    39 => "10111100111001101000011110101000", 
    40 => "00111101001010001010101011101100", 
    41 => "10111101001001110110111111000011", 
    42 => "10111100111011010011110111100010", 
    43 => "10111101001100110100101011000101", 
    44 => "00111101000010010101111110111100", 
    45 => "10111100111000100101010101101010", 
    46 => "00111101000101000100101100110011", 
    47 => "10111101000000110010100011010001", 
    48 => "10111101000001000000100010011101", 
    49 => "00111100101000110111101111110001", 
    50 => "00111110000101000000001111101111", 
    51 => "10111101011100011000011110001011", 
    52 => "10111100111010101100111100111011", 
    53 => "00111101000010000101101110111110", 
    54 => "00111100011110110101010000100010", 
    55 => "00111101001001111101000100001001", 
    56 => "00111100111011011111000010110000", 
    57 => "10111100111010001111010011001000", 
    58 => "00111101000111001101110110101011", 
    59 => "00111100111010110110011011001101", 
    60 => "10111101001101001001000000111111", 
    61 => "00111101000100011001100001111000", 
    62 => "10111101000100010101011111110110", 
    63 => "10111101010010000100000010100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_14 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_14_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


