// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_lstm_dense_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        output_r
);

parameter    ap_ST_fsm_state1 = 103'd1;
parameter    ap_ST_fsm_state2 = 103'd2;
parameter    ap_ST_fsm_state3 = 103'd4;
parameter    ap_ST_fsm_state4 = 103'd8;
parameter    ap_ST_fsm_state5 = 103'd16;
parameter    ap_ST_fsm_state6 = 103'd32;
parameter    ap_ST_fsm_state7 = 103'd64;
parameter    ap_ST_fsm_state8 = 103'd128;
parameter    ap_ST_fsm_state9 = 103'd256;
parameter    ap_ST_fsm_state10 = 103'd512;
parameter    ap_ST_fsm_state11 = 103'd1024;
parameter    ap_ST_fsm_state12 = 103'd2048;
parameter    ap_ST_fsm_state13 = 103'd4096;
parameter    ap_ST_fsm_state14 = 103'd8192;
parameter    ap_ST_fsm_state15 = 103'd16384;
parameter    ap_ST_fsm_state16 = 103'd32768;
parameter    ap_ST_fsm_state17 = 103'd65536;
parameter    ap_ST_fsm_state18 = 103'd131072;
parameter    ap_ST_fsm_state19 = 103'd262144;
parameter    ap_ST_fsm_state20 = 103'd524288;
parameter    ap_ST_fsm_state21 = 103'd1048576;
parameter    ap_ST_fsm_state22 = 103'd2097152;
parameter    ap_ST_fsm_state23 = 103'd4194304;
parameter    ap_ST_fsm_state24 = 103'd8388608;
parameter    ap_ST_fsm_state25 = 103'd16777216;
parameter    ap_ST_fsm_state26 = 103'd33554432;
parameter    ap_ST_fsm_state27 = 103'd67108864;
parameter    ap_ST_fsm_state28 = 103'd134217728;
parameter    ap_ST_fsm_state29 = 103'd268435456;
parameter    ap_ST_fsm_state30 = 103'd536870912;
parameter    ap_ST_fsm_state31 = 103'd1073741824;
parameter    ap_ST_fsm_state32 = 103'd2147483648;
parameter    ap_ST_fsm_state33 = 103'd4294967296;
parameter    ap_ST_fsm_state34 = 103'd8589934592;
parameter    ap_ST_fsm_state35 = 103'd17179869184;
parameter    ap_ST_fsm_state36 = 103'd34359738368;
parameter    ap_ST_fsm_state37 = 103'd68719476736;
parameter    ap_ST_fsm_state38 = 103'd137438953472;
parameter    ap_ST_fsm_state39 = 103'd274877906944;
parameter    ap_ST_fsm_state40 = 103'd549755813888;
parameter    ap_ST_fsm_state41 = 103'd1099511627776;
parameter    ap_ST_fsm_state42 = 103'd2199023255552;
parameter    ap_ST_fsm_state43 = 103'd4398046511104;
parameter    ap_ST_fsm_state44 = 103'd8796093022208;
parameter    ap_ST_fsm_state45 = 103'd17592186044416;
parameter    ap_ST_fsm_state46 = 103'd35184372088832;
parameter    ap_ST_fsm_state47 = 103'd70368744177664;
parameter    ap_ST_fsm_state48 = 103'd140737488355328;
parameter    ap_ST_fsm_state49 = 103'd281474976710656;
parameter    ap_ST_fsm_state50 = 103'd562949953421312;
parameter    ap_ST_fsm_state51 = 103'd1125899906842624;
parameter    ap_ST_fsm_state52 = 103'd2251799813685248;
parameter    ap_ST_fsm_state53 = 103'd4503599627370496;
parameter    ap_ST_fsm_state54 = 103'd9007199254740992;
parameter    ap_ST_fsm_state55 = 103'd18014398509481984;
parameter    ap_ST_fsm_state56 = 103'd36028797018963968;
parameter    ap_ST_fsm_state57 = 103'd72057594037927936;
parameter    ap_ST_fsm_state58 = 103'd144115188075855872;
parameter    ap_ST_fsm_state59 = 103'd288230376151711744;
parameter    ap_ST_fsm_state60 = 103'd576460752303423488;
parameter    ap_ST_fsm_state61 = 103'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 103'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 103'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 103'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 103'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 103'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 103'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 103'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 103'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 103'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 103'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 103'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 103'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 103'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 103'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 103'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 103'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 103'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 103'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 103'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 103'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 103'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 103'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 103'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 103'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 103'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 103'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 103'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 103'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 103'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 103'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 103'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 103'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 103'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 103'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 103'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 103'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 103'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 103'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 103'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 103'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 103'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 103'd5070602400912917605986812821504;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [31:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [31:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
input  [31:0] p_read19;
input  [31:0] p_read20;
input  [31:0] p_read21;
input  [31:0] p_read22;
input  [31:0] p_read23;
input  [31:0] p_read24;
input  [31:0] p_read25;
input  [31:0] p_read26;
input  [31:0] p_read27;
input  [31:0] p_read28;
input  [31:0] p_read29;
input  [31:0] p_read30;
input  [31:0] p_read31;
input  [31:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [102:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state35;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state103;
reg   [31:0] reg_664;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_646_p2;
reg   [31:0] reg_674;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state34;
reg   [3:0] grp_krnl_dot_1_fu_502_p_in2_offset;
wire   [31:0] grp_krnl_dot_1_fu_502_p_output;
wire    grp_krnl_dot_1_fu_502_ap_start;
wire    grp_krnl_dot_1_fu_502_p_output_ap_vld;
wire    grp_krnl_dot_1_fu_502_ap_done;
wire    grp_krnl_dot_1_fu_502_ap_ready;
wire    grp_krnl_dot_1_fu_502_ap_idle;
reg    grp_krnl_dot_1_fu_502_ap_continue;
reg    grp_krnl_dot_1_fu_502_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_krnl_dot_1_fu_502_ap_ready;
wire    ap_sync_grp_krnl_dot_1_fu_502_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready;
reg    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5_on_subcall_done;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    ap_block_state8_on_subcall_done;
reg    ap_block_state11_on_subcall_done;
reg    ap_block_state14_on_subcall_done;
reg    ap_block_state17_on_subcall_done;
reg    ap_block_state20_on_subcall_done;
reg    ap_block_state23_on_subcall_done;
reg    ap_block_state26_on_subcall_done;
reg    ap_block_state29_on_subcall_done;
reg   [31:0] dot_res_fu_212;
wire  signed [31:0] sext_ln148_fu_688_p1;
wire   [31:0] bitcast_ln148_fu_699_p1;
wire   [31:0] bitcast_ln148_1_fu_704_p1;
wire   [31:0] bitcast_ln148_2_fu_709_p1;
wire   [31:0] bitcast_ln148_3_fu_714_p1;
wire   [31:0] bitcast_ln148_4_fu_719_p1;
wire   [31:0] bitcast_ln148_5_fu_724_p1;
wire   [31:0] bitcast_ln148_6_fu_729_p1;
wire   [31:0] bitcast_ln148_7_fu_734_p1;
wire   [31:0] bitcast_ln148_8_fu_739_p1;
wire   [31:0] bitcast_ln148_9_fu_744_p1;
reg   [31:0] grp_fu_646_p0;
reg   [31:0] grp_fu_646_p1;
wire   [29:0] trunc_ln_fu_678_p4;
reg    grp_fu_646_ce;
wire    ap_CS_fsm_state33;
reg   [102:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 103'd1;
#0 grp_krnl_dot_1_fu_502_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready = 1'b0;
#0 ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done = 1'b0;
end

krnl_lstm_krnl_dot_1 grp_krnl_dot_1_fu_502(
    .p_read(p_read),
    .p_read1(p_read1),
    .p_read2(p_read2),
    .p_read3(p_read3),
    .p_read4(p_read4),
    .p_read5(p_read5),
    .p_read6(p_read6),
    .p_read7(p_read7),
    .p_read8(p_read8),
    .p_read9(p_read9),
    .p_read10(p_read10),
    .p_read11(p_read11),
    .p_read12(p_read12),
    .p_read13(p_read13),
    .p_read14(p_read14),
    .p_read15(p_read15),
    .p_read16(p_read16),
    .p_read17(p_read17),
    .p_read18(p_read18),
    .p_read19(p_read19),
    .p_read20(p_read20),
    .p_read21(p_read21),
    .p_read22(p_read22),
    .p_read23(p_read23),
    .p_read24(p_read24),
    .p_read25(p_read25),
    .p_read26(p_read26),
    .p_read27(p_read27),
    .p_read28(p_read28),
    .p_read29(p_read29),
    .p_read30(p_read30),
    .p_read31(p_read31),
    .p_in2_offset(grp_krnl_dot_1_fu_502_p_in2_offset),
    .p_output(grp_krnl_dot_1_fu_502_p_output),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p_read_ap_vld(1'b1),
    .p_read1_ap_vld(1'b1),
    .p_read2_ap_vld(1'b1),
    .p_read3_ap_vld(1'b1),
    .p_read4_ap_vld(1'b1),
    .p_read5_ap_vld(1'b1),
    .p_read6_ap_vld(1'b1),
    .p_read7_ap_vld(1'b1),
    .p_read8_ap_vld(1'b1),
    .p_read9_ap_vld(1'b1),
    .p_read10_ap_vld(1'b1),
    .p_read11_ap_vld(1'b1),
    .p_read12_ap_vld(1'b1),
    .p_read13_ap_vld(1'b1),
    .p_read14_ap_vld(1'b1),
    .p_read15_ap_vld(1'b1),
    .p_read16_ap_vld(1'b1),
    .p_read17_ap_vld(1'b1),
    .p_read18_ap_vld(1'b1),
    .p_read19_ap_vld(1'b1),
    .p_read20_ap_vld(1'b1),
    .p_read21_ap_vld(1'b1),
    .p_read22_ap_vld(1'b1),
    .p_read23_ap_vld(1'b1),
    .p_read24_ap_vld(1'b1),
    .p_read25_ap_vld(1'b1),
    .p_read26_ap_vld(1'b1),
    .p_read27_ap_vld(1'b1),
    .p_read28_ap_vld(1'b1),
    .p_read29_ap_vld(1'b1),
    .p_read30_ap_vld(1'b1),
    .p_read31_ap_vld(1'b1),
    .p_in2_offset_ap_vld(1'b1),
    .ap_start(grp_krnl_dot_1_fu_502_ap_start),
    .p_output_ap_vld(grp_krnl_dot_1_fu_502_p_output_ap_vld),
    .ap_done(grp_krnl_dot_1_fu_502_ap_done),
    .ap_ready(grp_krnl_dot_1_fu_502_ap_ready),
    .ap_idle(grp_krnl_dot_1_fu_502_ap_idle),
    .ap_continue(grp_krnl_dot_1_fu_502_ap_continue)
);

krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1890(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_646_p0),
    .din1(grp_fu_646_p1),
    .ce(grp_fu_646_ce),
    .dout(grp_fu_646_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= 1'b0;
    end else begin
        if (((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= 1'b0;
        end else if ((grp_krnl_dot_1_fu_502_ap_done == 1'b1)) begin
            ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= 1'b0;
    end else begin
        if (((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= 1'b0;
        end else if ((grp_krnl_dot_1_fu_502_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_krnl_dot_1_fu_502_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state20)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state10) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_krnl_dot_1_fu_502_ap_start_reg <= 1'b1;
        end else if ((grp_krnl_dot_1_fu_502_ap_ready == 1'b1)) begin
            grp_krnl_dot_1_fu_502_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_krnl_dot_1_fu_502_p_output_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        dot_res_fu_212 <= grp_krnl_dot_1_fu_502_p_output;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_664 <= dot_res_fu_212;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state10) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        reg_674 <= grp_fu_646_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state32) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_AWREADY == 1'b1)))) begin
        grp_fu_646_ce = 1'b1;
    end else begin
        grp_fu_646_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_646_p0 = dot_res_fu_212;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_646_p0 = reg_664;
    end else begin
        grp_fu_646_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_646_p1 = 32'd1081239256;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_646_p1 = 32'd1081063132;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_646_p1 = 32'd1080955473;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_646_p1 = 32'd1080791483;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_646_p1 = 32'd1080924369;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_646_p1 = 32'd1080722185;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_646_p1 = 32'd1080412211;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_646_p1 = 32'd1080409474;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_646_p1 = 32'd1080471064;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_646_p1 = 32'd1080028739;
    end else begin
        grp_fu_646_p1 = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_krnl_dot_1_fu_502_ap_continue = 1'b1;
    end else begin
        grp_krnl_dot_1_fu_502_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 4'd0;
    end else begin
        grp_krnl_dot_1_fu_502_p_in2_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_AWREADY == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_BVALID == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        m_axi_gmem_WDATA = bitcast_ln148_9_fu_744_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        m_axi_gmem_WDATA = bitcast_ln148_8_fu_739_p1;
    end else if (((1'b0 == ap_block_state29_on_subcall_done) & (1'b1 == ap_CS_fsm_state29))) begin
        m_axi_gmem_WDATA = bitcast_ln148_7_fu_734_p1;
    end else if (((1'b0 == ap_block_state26_on_subcall_done) & (1'b1 == ap_CS_fsm_state26))) begin
        m_axi_gmem_WDATA = bitcast_ln148_6_fu_729_p1;
    end else if (((1'b0 == ap_block_state23_on_subcall_done) & (1'b1 == ap_CS_fsm_state23))) begin
        m_axi_gmem_WDATA = bitcast_ln148_5_fu_724_p1;
    end else if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20))) begin
        m_axi_gmem_WDATA = bitcast_ln148_4_fu_719_p1;
    end else if (((1'b0 == ap_block_state17_on_subcall_done) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_gmem_WDATA = bitcast_ln148_3_fu_714_p1;
    end else if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_gmem_WDATA = bitcast_ln148_2_fu_709_p1;
    end else if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_gmem_WDATA = bitcast_ln148_1_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        m_axi_gmem_WDATA = bitcast_ln148_fu_699_p1;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14)) | (~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (m_axi_gmem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (m_axi_gmem_WREADY == 1'b1)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state11_on_subcall_done)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state14_on_subcall_done)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state17_on_subcall_done)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state23_on_subcall_done)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state26_on_subcall_done)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if ((~((m_axi_gmem_WREADY == 1'b0) | (1'b1 == ap_block_state29_on_subcall_done)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (m_axi_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state14_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state17_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state23_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state26_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state29_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready & ap_sync_grp_krnl_dot_1_fu_502_ap_done) == 1'b0);
end

assign ap_sync_grp_krnl_dot_1_fu_502_ap_done = (grp_krnl_dot_1_fu_502_ap_done | ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done);

assign ap_sync_grp_krnl_dot_1_fu_502_ap_ready = (grp_krnl_dot_1_fu_502_ap_ready | ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready);

assign bitcast_ln148_1_fu_704_p1 = reg_674;

assign bitcast_ln148_2_fu_709_p1 = reg_674;

assign bitcast_ln148_3_fu_714_p1 = reg_674;

assign bitcast_ln148_4_fu_719_p1 = reg_674;

assign bitcast_ln148_5_fu_724_p1 = reg_674;

assign bitcast_ln148_6_fu_729_p1 = reg_674;

assign bitcast_ln148_7_fu_734_p1 = reg_674;

assign bitcast_ln148_8_fu_739_p1 = reg_674;

assign bitcast_ln148_9_fu_744_p1 = reg_674;

assign bitcast_ln148_fu_699_p1 = reg_674;

assign grp_krnl_dot_1_fu_502_ap_start = grp_krnl_dot_1_fu_502_ap_start_reg;

assign m_axi_gmem_ARADDR = 32'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = sext_ln148_fu_688_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd10;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign sext_ln148_fu_688_p1 = $signed(trunc_ln_fu_678_p4);

assign trunc_ln_fu_678_p4 = {{output_r[31:2]}};

endmodule //krnl_lstm_dense_layer
