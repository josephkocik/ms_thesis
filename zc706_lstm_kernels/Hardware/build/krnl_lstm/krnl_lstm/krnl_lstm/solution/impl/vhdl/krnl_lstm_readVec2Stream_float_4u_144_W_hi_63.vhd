-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_63_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_63_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000110000010000011011111", 
    1 => "00111101010000001100001010111111", 
    2 => "00111101000100011111010111101001", 
    3 => "00111101000001110101110111110100", 
    4 => "00111101010111000110001001011000", 
    5 => "00111110000100101000100101010101", 
    6 => "00111101111101000101101100010100", 
    7 => "00111101100010101011100000111000", 
    8 => "00111101010000000000100000001000", 
    9 => "00111101011110100010111001100101", 
    10 => "00111101000101110000101111110110", 
    11 => "00111101000100011110111100010111", 
    12 => "10111100001001011110100101001011", 
    13 => "00111101001101010010001101001011", 
    14 => "00111110100010100000110000110111", 
    15 => "00111111010101010100111000111110", 
    16 => "00111111010110000101010000010101", 
    17 => "00111101000101110111011100000100", 
    18 => "10111110000111111100001011110010", 
    19 => "00111101001000011011011111111101", 
    20 => "00111111010110000010000000000110", 
    21 => "00111101000111101100001000000010", 
    22 => "10111101010001100111010001001111", 
    23 => "00111100110110101101010110111000", 
    24 => "00111101010010110110100011000111", 
    25 => "00111110010111011111011110111110", 
    26 => "00111101000111110100110111010011", 
    27 => "00111101000111110011101101111011", 
    28 => "00111101000111100000011000111101", 
    29 => "00111110111100000110000011011010", 
    30 => "00111101010100110110001110100101", 
    31 => "00111101000101011111100010101001", 
    32 => "00111011011101111011101010001100", 
    33 => "00111101000100111110110111100001", 
    34 => "00111101100000000010000000101011", 
    35 => "00111101001110101000100100100101", 
    36 => "00111110110000110101111100001100", 
    37 => "00111101000100010001011001001011", 
    38 => "00111101001000111101010101010011", 
    39 => "00111100011001011100110111001110", 
    40 => "00111100011001100011000001110101", 
    41 => "00111101010101100010100110101011", 
    42 => "00111101001011100101110100010001", 
    43 => "00111101100001011111111101011001", 
    44 => "00111101010010100101011111011101", 
    45 => "00111100111111000011100101111000", 
    46 => "00111101011000100110011101000111", 
    47 => "00111101010001111100010011111000", 
    48 => "00111101000010100111101001101111", 
    49 => "00111101001010001001101110111010", 
    50 => "10111100000111001100011100000100", 
    51 => "00111101110111110111110111010001", 
    52 => "00111101000001011011001001010110", 
    53 => "00111101010101000100001100011000", 
    54 => "00111111010011000111001111010000", 
    55 => "00111101000111011110101111101110", 
    56 => "00111101001111101101001000011011", 
    57 => "00111101000110111001101100101101", 
    58 => "00111101011001100101100100101100", 
    59 => "00111100010111101111001010110011", 
    60 => "00111101011110001110011100001011", 
    61 => "00111101001100100111110001001000", 
    62 => "00111101000111011111001011000111", 
    63 => "00111101011110001100011111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_63 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_63 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_63_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_63_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_63_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


