-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_53_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_53_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000010000010101000", 
    1 => "10111101010000011010001000110000", 
    2 => "10111101000100010101100101101001", 
    3 => "10111101000001110100111111101100", 
    4 => "10111101011100011011001010000011", 
    5 => "10111110000100101000100100111100", 
    6 => "10111101111101000101010000011010", 
    7 => "10111101100011011100100011100100", 
    8 => "10111101010110001011001011010010", 
    9 => "10111101100001000111001101001001", 
    10 => "10111101000101101111010100100001", 
    11 => "10111101000100011111001110100111", 
    12 => "00111100001110010101110011000101", 
    13 => "10111101001100010010000010100010", 
    14 => "10111110100100001011000011111001", 
    15 => "10111111010101010100111001011011", 
    16 => "10111111010110000101010000010010", 
    17 => "10111101000101110101100010111101", 
    18 => "00111110000111111100111101010000", 
    19 => "10111101001000011010001010101110", 
    20 => "10111111010110000001111110011101", 
    21 => "10111101000110101101010011000010", 
    22 => "00111101010001100000111000001000", 
    23 => "10111100110110101001100000000110", 
    24 => "10111101010110011100000100100111", 
    25 => "10111110010111100011010011011010", 
    26 => "10111101000111110011010111000101", 
    27 => "10111101000111110000111000110011", 
    28 => "10111101000111011110100101111110", 
    29 => "10111110110110001011011100000100", 
    30 => "10111101010010111100110000110011", 
    31 => "10111101000101011110001101000011", 
    32 => "10111011011100110000011110001111", 
    33 => "10111101000101000100010000111011", 
    34 => "10111101100001010010111101001010", 
    35 => "10111101001110110110111010011101", 
    36 => "10111110101011101000000011010011", 
    37 => "10111101000100110101110111010101", 
    38 => "10111101001000111011110111000110", 
    39 => "10111100011000111111111001011000", 
    40 => "10111100011001000010010010101101", 
    41 => "10111101011011010001101111001000", 
    42 => "10111101001011110000001001111101", 
    43 => "10111101100010010100101010001011", 
    44 => "10111101010110011001001001100100", 
    45 => "10111101000000101110111001011011", 
    46 => "10111101011101001110111110110011", 
    47 => "10111101001111011101001001010011", 
    48 => "10111101000010101000101111011011", 
    49 => "10111101001010001000101110001101", 
    50 => "00111100000111001100010111110110", 
    51 => "10111101110111111000011101100100", 
    52 => "10111101000011111000001010010101", 
    53 => "10111101010111100100010010100101", 
    54 => "10111111010011000111001011000111", 
    55 => "10111101000111011110011101000101", 
    56 => "10111101010100111110000101000011", 
    57 => "10111101000110110111110110001111", 
    58 => "10111101011110110100010111000011", 
    59 => "10111100010111100100001000011101", 
    60 => "10111101011110010010010011101011", 
    61 => "10111101001100100110111110101001", 
    62 => "10111101000111001001111101100010", 
    63 => "10111101011110110111101110111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_53 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_53 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_53_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_53_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_53_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


