-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_19_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_19_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000001100000111110", 
    1 => "10111101010000001110111101011110", 
    2 => "10111101000101000100010000000111", 
    3 => "10111101000001101011110110011110", 
    4 => "10111101011101111011001101010110", 
    5 => "10111110000100101010111011111010", 
    6 => "10111101111101000111100010011001", 
    7 => "10111101100100001000110101101100", 
    8 => "10111101011010010101001010010010", 
    9 => "10111101100010000001110010111110", 
    10 => "10111101000110000010110100111101", 
    11 => "10111101000100011011011010001111", 
    12 => "00111011101110111000001100101010", 
    13 => "10111101010000011010100100000011", 
    14 => "10111110100100010010000111010000", 
    15 => "10111111010101010101010010101000", 
    16 => "10111111010110000101101000011111", 
    17 => "10111101000110001000111000001010", 
    18 => "00111110000111111001111011010111", 
    19 => "10111101001000100001101110000110", 
    20 => "10111111010110000010110111010001", 
    21 => "10111101001010100010110101111110", 
    22 => "00111101001010100110101100100001", 
    23 => "10111100110110110111001100001000", 
    24 => "10111101100000011100010100001100", 
    25 => "10111110000000001001110000001110", 
    26 => "10111101000111111100000100110101", 
    27 => "10111101000111111000001110001001", 
    28 => "10111101000111111000100110000110", 
    29 => "10111110110111100100001110111111", 
    30 => "10111101010111100110001001101000", 
    31 => "10111101000101110110100001101010", 
    32 => "10111011100001101100001110101111", 
    33 => "10111101000101001101100101000100", 
    34 => "10111101100001011100111101010011", 
    35 => "10111101001110111111011011101010", 
    36 => "10111110101101000000101101101011", 
    37 => "10111101000101101100100000101110", 
    38 => "10111101001001000100101111000101", 
    39 => "10111100011010110010101111010100", 
    40 => "10111100011010010000011010110110", 
    41 => "10111101011011110010011000100010", 
    42 => "10111101010010011010010000110101", 
    43 => "10111101100010010110001111101110", 
    44 => "10111101011111001011100100001000", 
    45 => "10111101000100001000101011000111", 
    46 => "10111101100000000100001110101011", 
    47 => "10111101010101100010110001110110", 
    48 => "10111101000010101011111101110011", 
    49 => "10111101001010001100100000110111", 
    50 => "00111100000001100101011011011000", 
    51 => "10111101110111111011111011000101", 
    52 => "10111101001000010011011110100001", 
    53 => "10111101100000000101101011011110", 
    54 => "10111111010011001000100111111011", 
    55 => "10111101000111100000010111100110", 
    56 => "10111101011001011101001001111110", 
    57 => "10111101000110111111101110001110", 
    58 => "10111101011111110001100100111101", 
    59 => "10111100011000001111001101101011", 
    60 => "10111101011110001011000110011110", 
    61 => "10111101001100101001001010101011", 
    62 => "10111101001000001000110101001100", 
    63 => "10111101100000000101001011101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_19 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_19 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_19_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_19_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_19_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


