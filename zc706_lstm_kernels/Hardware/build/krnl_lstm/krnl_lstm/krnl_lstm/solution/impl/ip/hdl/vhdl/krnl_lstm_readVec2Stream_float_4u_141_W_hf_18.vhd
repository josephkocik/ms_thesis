-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101010110001001101011111", 
    1 => "00111100110100011100101100011100", 
    2 => "00111101000001001010101000111011", 
    3 => "00111101000111100001110010110010", 
    4 => "00111101000000100010110011010011", 
    5 => "10111101000110000111110100000011", 
    6 => "00111010111110011011001001001000", 
    7 => "00111100100110110110101000111000", 
    8 => "00111101001000110110000001111011", 
    9 => "00111100110001010011001000010000", 
    10 => "00111100111111111111101101001101", 
    11 => "10111010011010011010001001111111", 
    12 => "00111101010100110011000011101100", 
    13 => "00111011111111000011000100101011", 
    14 => "10111100101110000000000101110110", 
    15 => "00111100110001110001100001100011", 
    16 => "00111100010101011110100100111101", 
    17 => "00111100111001010011101110101101", 
    18 => "10111110011000101111101110101000", 
    19 => "00111100101101110101101100111000", 
    20 => "00111100000001011100000001100100", 
    21 => "00111100011001100111100100111011", 
    22 => "00111101010100110010001110000011", 
    23 => "00111110001101011111110011111101", 
    24 => "00111100111110010101101011001100", 
    25 => "00111101000100111100011010101001", 
    26 => "00111100101100111101001011010011", 
    27 => "10111110000010001111111010000001", 
    28 => "00111100111010001010001101110100", 
    29 => "00111110000100110101100100010001", 
    30 => "10111011110111010000111001110111", 
    31 => "00111100111010011111001010001010", 
    32 => "00111101000011000111000111111001", 
    33 => "00111100110001110010011000101100", 
    34 => "00111100101111110100111101001100", 
    35 => "00111101001011001111011000110011", 
    36 => "00111101100101101001010010110101", 
    37 => "00111100110010101011101010001011", 
    38 => "00111100110000110100010110011111", 
    39 => "10111100001111100111000000101101", 
    40 => "10111101011110010111111000101110", 
    41 => "00111100110010001110011001001000", 
    42 => "00111100111110111100110100010101", 
    43 => "00111100101111100100101001000101", 
    44 => "00111100100100111000100011001010", 
    45 => "00111101000111100111001110011110", 
    46 => "00111100110001110110100110001010", 
    47 => "00111100101110000000010111101111", 
    48 => "00111101001100001100011001111110", 
    49 => "00111100111101111000101110001011", 
    50 => "00111110101000010010111111000100", 
    51 => "00111110100110100000110001011110", 
    52 => "00111100110010100111101110001100", 
    53 => "00111100110110011100011011001100", 
    54 => "00111100101000011100010111010100", 
    55 => "00111100010000000101110100111000", 
    56 => "00111100110110101101101101100111", 
    57 => "00111100110000101100001100000110", 
    58 => "00111100111010001011001101010000", 
    59 => "10111101010100101101101110011111", 
    60 => "00111100111110101011010000101100", 
    61 => "00111100111110001001011000100011", 
    62 => "00111011111010110110001001011000", 
    63 => "00111100111001010101111011110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_18 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_18_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


