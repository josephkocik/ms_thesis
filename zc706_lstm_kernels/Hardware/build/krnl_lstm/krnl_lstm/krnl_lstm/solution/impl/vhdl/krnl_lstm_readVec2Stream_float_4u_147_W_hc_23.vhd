-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_23_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001011101101011110000", 
    1 => "00111100111101101100101011011100", 
    2 => "00111101000001110000100011000111", 
    3 => "10111100111101110100111111010010", 
    4 => "00111101000111001111000010111110", 
    5 => "10111111000000011101100110011000", 
    6 => "00111101101101111010101100101001", 
    7 => "00111101001100111011100011001101", 
    8 => "10111101000110101010011110000100", 
    9 => "00111101001000101001001011111110", 
    10 => "00111100111110110111110100100101", 
    11 => "00111101001000111011111001110110", 
    12 => "10111101110011111110000001001100", 
    13 => "10111100101010110010111010110100", 
    14 => "00111110111001111111001111101100", 
    15 => "00111100100010010100110111000010", 
    16 => "00111011100000001010000111000100", 
    17 => "00111100101110001101111000001010", 
    18 => "00111100111101000101011000110110", 
    19 => "00111101000001011110000101010011", 
    20 => "00111100010100100011110000001000", 
    21 => "10111100001111010010100100111001", 
    22 => "10111100101100100001110010100101", 
    23 => "00111101000110011010100001001101", 
    24 => "10111101000011110011110111010110", 
    25 => "10111101001010000011001010110101", 
    26 => "00111101000000111111011101101011", 
    27 => "00111101000100000010000001100011", 
    28 => "10111100110101001111110000110011", 
    29 => "00111110011011011100100011011001", 
    30 => "00111101000110101000011110001001", 
    31 => "10111100101101000101100001100101", 
    32 => "00111101000011111011101110110011", 
    33 => "10111100110011111110110001101100", 
    34 => "00111101001001011110010101111010", 
    35 => "10111100110001100001011100111100", 
    36 => "00111110011011110001000111011110", 
    37 => "00111100110100101111011111000000", 
    38 => "10111101000001100110111010100101", 
    39 => "10111100111010101010110110111001", 
    40 => "00111101001010100101101100001111", 
    41 => "10111101000111110100101101011111", 
    42 => "10111100111000111001101000110100", 
    43 => "10111101001011010110011000100101", 
    44 => "00111101000001001110111100110100", 
    45 => "10111100111001111011010111101100", 
    46 => "00111101000100010010110100001101", 
    47 => "10111100110110101010110111011110", 
    48 => "10111101000011001101001001101011", 
    49 => "00111100110101000011101100011011", 
    50 => "00111110101100110110111110001011", 
    51 => "10111101100000000010110111001111", 
    52 => "10111100111000111110000011010000", 
    53 => "00111100111001110110001000011111", 
    54 => "00111101101001100101100010001000", 
    55 => "00111101001001000010101111001000", 
    56 => "00111100111010101100010110001100", 
    57 => "10111101000011001001001001110010", 
    58 => "00111101000101010001010110111000", 
    59 => "00111100111011100000010010010010", 
    60 => "10111101001011111010000110111111", 
    61 => "00111101000001010101101000100111", 
    62 => "10111101000100000110010010001001", 
    63 => "10111101001111001110110100001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_23 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_23_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


