-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_dense_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of krnl_lstm_dense_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (102 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (102 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (102 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (102 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (102 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (102 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (102 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (102 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (102 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (102 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_405FEE43 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010111111110111001000011";
    constant ap_const_lv32_4066AE18 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011001101010111000011000";
    constant ap_const_lv32_4065BD82 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011001011011110110000010";
    constant ap_const_lv32_4065C833 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011001011100100000110011";
    constant ap_const_lv32_406A8309 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011010101000001100001001";
    constant ap_const_lv32_406D98D1 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011011011001100011010001";
    constant ap_const_lv32_406B91BB : STD_LOGIC_VECTOR (31 downto 0) := "01000000011010111001000110111011";
    constant ap_const_lv32_406E1251 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011011100001001001010001";
    constant ap_const_lv32_406FB6DC : STD_LOGIC_VECTOR (31 downto 0) := "01000000011011111011011011011100";
    constant ap_const_lv32_407266D8 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011100100110011011011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_krnl_dot_1_fu_502_p_in2_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_dot_1_fu_502_p_output : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_dot_1_fu_502_ap_start : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_p_output_ap_vld : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_ap_done : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_ap_ready : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_ap_idle : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_ap_continue : STD_LOGIC;
    signal grp_krnl_dot_1_fu_502_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_krnl_dot_1_fu_502_ap_ready : STD_LOGIC;
    signal ap_sync_grp_krnl_dot_1_fu_502_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_block_state17_on_subcall_done : BOOLEAN;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal ap_block_state29_on_subcall_done : BOOLEAN;
    signal dot_res_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln148_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_1_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_2_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_3_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_4_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_5_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_6_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_7_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_8_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln148_9_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_678_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_646_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (102 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_lstm_krnl_dot_1 IS
    port (
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_in2_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        p_output : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        p_read2_ap_vld : IN STD_LOGIC;
        p_read3_ap_vld : IN STD_LOGIC;
        p_read4_ap_vld : IN STD_LOGIC;
        p_read5_ap_vld : IN STD_LOGIC;
        p_read6_ap_vld : IN STD_LOGIC;
        p_read7_ap_vld : IN STD_LOGIC;
        p_read8_ap_vld : IN STD_LOGIC;
        p_read9_ap_vld : IN STD_LOGIC;
        p_read10_ap_vld : IN STD_LOGIC;
        p_read11_ap_vld : IN STD_LOGIC;
        p_read12_ap_vld : IN STD_LOGIC;
        p_read13_ap_vld : IN STD_LOGIC;
        p_read14_ap_vld : IN STD_LOGIC;
        p_read15_ap_vld : IN STD_LOGIC;
        p_read16_ap_vld : IN STD_LOGIC;
        p_read17_ap_vld : IN STD_LOGIC;
        p_read18_ap_vld : IN STD_LOGIC;
        p_read19_ap_vld : IN STD_LOGIC;
        p_read20_ap_vld : IN STD_LOGIC;
        p_read21_ap_vld : IN STD_LOGIC;
        p_read22_ap_vld : IN STD_LOGIC;
        p_read23_ap_vld : IN STD_LOGIC;
        p_read24_ap_vld : IN STD_LOGIC;
        p_read25_ap_vld : IN STD_LOGIC;
        p_read26_ap_vld : IN STD_LOGIC;
        p_read27_ap_vld : IN STD_LOGIC;
        p_read28_ap_vld : IN STD_LOGIC;
        p_read29_ap_vld : IN STD_LOGIC;
        p_read30_ap_vld : IN STD_LOGIC;
        p_read31_ap_vld : IN STD_LOGIC;
        p_in2_offset_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        p_output_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_krnl_dot_1_fu_502 : component krnl_lstm_krnl_dot_1
    port map (
        p_read => p_read,
        p_read1 => p_read1,
        p_read2 => p_read2,
        p_read3 => p_read3,
        p_read4 => p_read4,
        p_read5 => p_read5,
        p_read6 => p_read6,
        p_read7 => p_read7,
        p_read8 => p_read8,
        p_read9 => p_read9,
        p_read10 => p_read10,
        p_read11 => p_read11,
        p_read12 => p_read12,
        p_read13 => p_read13,
        p_read14 => p_read14,
        p_read15 => p_read15,
        p_read16 => p_read16,
        p_read17 => p_read17,
        p_read18 => p_read18,
        p_read19 => p_read19,
        p_read20 => p_read20,
        p_read21 => p_read21,
        p_read22 => p_read22,
        p_read23 => p_read23,
        p_read24 => p_read24,
        p_read25 => p_read25,
        p_read26 => p_read26,
        p_read27 => p_read27,
        p_read28 => p_read28,
        p_read29 => p_read29,
        p_read30 => p_read30,
        p_read31 => p_read31,
        p_in2_offset => grp_krnl_dot_1_fu_502_p_in2_offset,
        p_output => grp_krnl_dot_1_fu_502_p_output,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read_ap_vld => ap_const_logic_1,
        p_read1_ap_vld => ap_const_logic_1,
        p_read2_ap_vld => ap_const_logic_1,
        p_read3_ap_vld => ap_const_logic_1,
        p_read4_ap_vld => ap_const_logic_1,
        p_read5_ap_vld => ap_const_logic_1,
        p_read6_ap_vld => ap_const_logic_1,
        p_read7_ap_vld => ap_const_logic_1,
        p_read8_ap_vld => ap_const_logic_1,
        p_read9_ap_vld => ap_const_logic_1,
        p_read10_ap_vld => ap_const_logic_1,
        p_read11_ap_vld => ap_const_logic_1,
        p_read12_ap_vld => ap_const_logic_1,
        p_read13_ap_vld => ap_const_logic_1,
        p_read14_ap_vld => ap_const_logic_1,
        p_read15_ap_vld => ap_const_logic_1,
        p_read16_ap_vld => ap_const_logic_1,
        p_read17_ap_vld => ap_const_logic_1,
        p_read18_ap_vld => ap_const_logic_1,
        p_read19_ap_vld => ap_const_logic_1,
        p_read20_ap_vld => ap_const_logic_1,
        p_read21_ap_vld => ap_const_logic_1,
        p_read22_ap_vld => ap_const_logic_1,
        p_read23_ap_vld => ap_const_logic_1,
        p_read24_ap_vld => ap_const_logic_1,
        p_read25_ap_vld => ap_const_logic_1,
        p_read26_ap_vld => ap_const_logic_1,
        p_read27_ap_vld => ap_const_logic_1,
        p_read28_ap_vld => ap_const_logic_1,
        p_read29_ap_vld => ap_const_logic_1,
        p_read30_ap_vld => ap_const_logic_1,
        p_read31_ap_vld => ap_const_logic_1,
        p_in2_offset_ap_vld => ap_const_logic_1,
        ap_start => grp_krnl_dot_1_fu_502_ap_start,
        p_output_ap_vld => grp_krnl_dot_1_fu_502_p_output_ap_vld,
        ap_done => grp_krnl_dot_1_fu_502_ap_done,
        ap_ready => grp_krnl_dot_1_fu_502_ap_ready,
        ap_idle => grp_krnl_dot_1_fu_502_ap_idle,
        ap_continue => grp_krnl_dot_1_fu_502_ap_continue);

    fadd_32ns_32ns_32_5_full_dsp_1_U1890 : component krnl_lstm_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_646_p0,
        din1 => grp_fu_646_p1,
        ce => grp_fu_646_ce,
        dout => grp_fu_646_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= ap_const_logic_0;
            else
                if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= ap_const_logic_0;
                elsif ((grp_krnl_dot_1_fu_502_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= ap_const_logic_0;
            else
                if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= ap_const_logic_0;
                elsif ((grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_dot_1_fu_502_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_krnl_dot_1_fu_502_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_krnl_dot_1_fu_502_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_dot_1_fu_502_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_dot_1_fu_502_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_krnl_dot_1_fu_502_p_output_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                dot_res_fu_212 <= grp_krnl_dot_1_fu_502_p_output;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_664 <= dot_res_fu_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then
                reg_674 <= grp_fu_646_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state103, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state8, ap_block_state8_on_subcall_done, ap_block_state11_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state17_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state23_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state29_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state17_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state17_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state23_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state26_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state29_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state29_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(ap_sync_grp_krnl_dot_1_fu_502_ap_ready, ap_sync_grp_krnl_dot_1_fu_502_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((ap_sync_grp_krnl_dot_1_fu_502_ap_ready and ap_sync_grp_krnl_dot_1_fu_502_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_BVALID, ap_CS_fsm_state103)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_krnl_dot_1_fu_502_ap_done <= (grp_krnl_dot_1_fu_502_ap_done or ap_sync_reg_grp_krnl_dot_1_fu_502_ap_done);
    ap_sync_grp_krnl_dot_1_fu_502_ap_ready <= (grp_krnl_dot_1_fu_502_ap_ready or ap_sync_reg_grp_krnl_dot_1_fu_502_ap_ready);
    bitcast_ln148_1_fu_704_p1 <= reg_674;
    bitcast_ln148_2_fu_709_p1 <= reg_674;
    bitcast_ln148_3_fu_714_p1 <= reg_674;
    bitcast_ln148_4_fu_719_p1 <= reg_674;
    bitcast_ln148_5_fu_724_p1 <= reg_674;
    bitcast_ln148_6_fu_729_p1 <= reg_674;
    bitcast_ln148_7_fu_734_p1 <= reg_674;
    bitcast_ln148_8_fu_739_p1 <= reg_674;
    bitcast_ln148_9_fu_744_p1 <= reg_674;
    bitcast_ln148_fu_699_p1 <= reg_674;

    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_646_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_state8_on_subcall_done, ap_block_state11_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state17_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state23_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state29_on_subcall_done, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_AWREADY = ap_const_logic_1)))) then 
            grp_fu_646_ce <= ap_const_logic_1;
        else 
            grp_fu_646_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_646_p0_assign_proc : process(ap_CS_fsm_state9, reg_664, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state5, dot_res_fu_212)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_646_p0 <= dot_res_fu_212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_646_p0 <= reg_664;
        else 
            grp_fu_646_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_646_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_646_p1 <= ap_const_lv32_407266D8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_646_p1 <= ap_const_lv32_406FB6DC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_646_p1 <= ap_const_lv32_406E1251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_646_p1 <= ap_const_lv32_406B91BB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_646_p1 <= ap_const_lv32_406D98D1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_646_p1 <= ap_const_lv32_406A8309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_646_p1 <= ap_const_lv32_4065C833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_646_p1 <= ap_const_lv32_4065BD82;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_646_p1 <= ap_const_lv32_4066AE18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_646_p1 <= ap_const_lv32_405FEE43;
        else 
            grp_fu_646_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_krnl_dot_1_fu_502_ap_continue_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state8, ap_block_state8_on_subcall_done, ap_block_state11_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state17_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state23_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state29_on_subcall_done)
    begin
        if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_krnl_dot_1_fu_502_ap_continue <= ap_const_logic_1;
        else 
            grp_krnl_dot_1_fu_502_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_krnl_dot_1_fu_502_ap_start <= grp_krnl_dot_1_fu_502_ap_start_reg;

    grp_krnl_dot_1_fu_502_p_in2_offset_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_krnl_dot_1_fu_502_p_in2_offset <= ap_const_lv4_0;
        else 
            grp_krnl_dot_1_fu_502_p_in2_offset <= "XXXX";
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv32_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= sext_ln148_fu_688_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_A;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_gmem_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;

    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_block_state11_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state17_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state23_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state29_on_subcall_done, bitcast_ln148_fu_699_p1, bitcast_ln148_1_fu_704_p1, bitcast_ln148_2_fu_709_p1, bitcast_ln148_3_fu_714_p1, bitcast_ln148_4_fu_719_p1, bitcast_ln148_5_fu_724_p1, bitcast_ln148_6_fu_729_p1, bitcast_ln148_7_fu_734_p1, bitcast_ln148_8_fu_739_p1, bitcast_ln148_9_fu_744_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            m_axi_gmem_WDATA <= bitcast_ln148_9_fu_744_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            m_axi_gmem_WDATA <= bitcast_ln148_8_fu_739_p1;
        elsif (((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_7_fu_734_p1;
        elsif (((ap_const_boolean_0 = ap_block_state26_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_6_fu_729_p1;
        elsif (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_5_fu_724_p1;
        elsif (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_4_fu_719_p1;
        elsif (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_3_fu_714_p1;
        elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_2_fu_709_p1;
        elsif (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_WDATA <= bitcast_ln148_1_fu_704_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_axi_gmem_WDATA <= bitcast_ln148_fu_699_p1;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_block_state11_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state17_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state23_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state29_on_subcall_done)
    begin
        if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state29_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state26_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state23_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state17_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state14_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state11_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_gmem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_gmem_WREADY = ap_const_logic_1)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln148_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_678_p4),32));

    trunc_ln_fu_678_p4 <= output_r(31 downto 2);
end behav;
