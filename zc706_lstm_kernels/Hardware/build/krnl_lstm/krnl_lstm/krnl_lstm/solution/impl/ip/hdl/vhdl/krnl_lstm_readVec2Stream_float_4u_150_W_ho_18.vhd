-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000110001011010101100110", 
    1 => "00111101110011010010000100000010", 
    2 => "10111111000000011001100001001011", 
    3 => "00111101110011000111011010001111", 
    4 => "00111101110101010110100100101101", 
    5 => "00111110101000001000101011101010", 
    6 => "00111111101000000100001010001110", 
    7 => "00111101110011110001101100111110", 
    8 => "00111101110011000101011011101001", 
    9 => "00111101110100111011111100001110", 
    10 => "00111101110100000001011011110101", 
    11 => "10111111001011011100011011111100", 
    12 => "10111101100110001110010101011101", 
    13 => "00111110100011110001110001101101", 
    14 => "00111111111000010111000111011110", 
    15 => "00111111011101011100100101011000", 
    16 => "00111111010010000010100000110010", 
    17 => "11000000000010001000000011100000", 
    18 => "00111110110010011001111100100100", 
    19 => "10111111101001111100111100111010", 
    20 => "00111111001011111111110101001111", 
    21 => "00111101110010111001011010111010", 
    22 => "10111100111001100111011101100101", 
    23 => "01000000000000000000111011001110", 
    24 => "10111100000011011011111110001101", 
    25 => "10111110101011011101111111100100", 
    26 => "10111110000010001101011110111110", 
    27 => "00111111010001110100010001101100", 
    28 => "10111100110110011110010011011010", 
    29 => "00111111011110110011111110111101", 
    30 => "00111101101111010000111111010010", 
    31 => "11000000000010001000100110010011", 
    32 => "00111111001001111100010100110111", 
    33 => "00111101110001100110111101010010", 
    34 => "00111101110001011101111010011000", 
    35 => "00111110100011101101100000110101", 
    36 => "00111110001001001110111000110011", 
    37 => "00111101110100010011001010000011", 
    38 => "10111111101011011100111001100010", 
    39 => "00111111010100111001001111011000", 
    40 => "00111111011011111100101000011101", 
    41 => "00111101110011011010101011010001", 
    42 => "00111101101111101110010010100000", 
    43 => "00111101101110100111011010110100", 
    44 => "00111101110000100100000101000101", 
    45 => "10111111101011011100001000101101", 
    46 => "00111101101110010110001101101110", 
    47 => "00111101110000011010110100101000", 
    48 => "00111101110011111100110010011010", 
    49 => "10111101000101111001011011100110", 
    50 => "10111111001001000001011101100001", 
    51 => "10111110000001011010100001010011", 
    52 => "00111101110000111000000011110000", 
    53 => "00111101101111101110100011011010", 
    54 => "00111111001000101010101010001010", 
    55 => "00111101110101101111001000010100", 
    56 => "00111101110011100111000011010011", 
    57 => "00111101011010010101011010011010", 
    58 => "00111101111111010000101010110010", 
    59 => "00111111101011010110010110111111", 
    60 => "00111101101000110000101100010000", 
    61 => "00111101000001110101101110111110", 
    62 => "00111101110010001001101000101011", 
    63 => "00111101110011011010001101111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_18 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_18_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


