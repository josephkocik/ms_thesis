-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_29_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110111011110010100110101", 
    1 => "10111101100011000110101010010010", 
    2 => "00111100110011011100101110000110", 
    3 => "10111101100011110101100100010101", 
    4 => "10111101100000011000101100001110", 
    5 => "00111100110010100111000101000110", 
    6 => "00111110010001011000111110000101", 
    7 => "10111101100001010001101101101111", 
    8 => "10111101011010110011101100100011", 
    9 => "10111101100000001100110100110010", 
    10 => "10111101100011001000111110011010", 
    11 => "10111101100010101111011110001010", 
    12 => "00111110010010000010100000100001", 
    13 => "00111111001011100110000001100111", 
    14 => "10111110001000011001011011111111", 
    15 => "10111101110110110010101101010001", 
    16 => "10111110100001010100101010000100", 
    17 => "10111101100001111010101100100011", 
    18 => "00111111001000110000000001100000", 
    19 => "00111101000111011110011010110010", 
    20 => "10111110100110001001001100111111", 
    21 => "10111101100101111011011011100101", 
    22 => "00111110100111100101011011110001", 
    23 => "00111110100001100000101010111000", 
    24 => "10111100101110110110100000000100", 
    25 => "00111110101011010100011000010001", 
    26 => "10111101000000010001111001101100", 
    27 => "00111110100010011101100001110000", 
    28 => "00111100101101101101000101011011", 
    29 => "10111100101111110110101011010000", 
    30 => "10111101011101001001101011000001", 
    31 => "10111101100010000111011001011001", 
    32 => "00111110101000110001101000110101", 
    33 => "10111101100100000100101110111110", 
    34 => "10111101100011100111100100111100", 
    35 => "00111110111011101110110100110110", 
    36 => "10111110000010001001111101111011", 
    37 => "10111101100011111111110111010000", 
    38 => "00111100101100111011011101001000", 
    39 => "00111110100010111111010111000111", 
    40 => "00111111001001010010101000100001", 
    41 => "10111101100011000001000011001100", 
    42 => "10111101011001100010001110101000", 
    43 => "10111101100001001000101100101110", 
    44 => "10111101011110000110111011000001", 
    45 => "10111101100001110111110101110100", 
    46 => "10111101100100001001000000011000", 
    47 => "10111101001101110101011010110011", 
    48 => "10111100101100100111001001001010", 
    49 => "00111010101110000111010100110111", 
    50 => "00111110110110111010110000011101", 
    51 => "00111110101111011100011001001010", 
    52 => "10111101100010010010101001000110", 
    53 => "10111101011111101100111110100010", 
    54 => "00111101010100111100011001010001", 
    55 => "00111011100011101111011000010110", 
    56 => "10111101100010011111010011110110", 
    57 => "00111011101010110100001001011111", 
    58 => "10111101001010010000110001010111", 
    59 => "00111111001111110111000000010101", 
    60 => "00111010000011111010011110100011", 
    61 => "10111100011011100000110110100001", 
    62 => "10111101100010011000111110000100", 
    63 => "10111101100010100001011001011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_29 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_29_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


