-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100010010101101111101110", 
    1 => "10111100110110110100110111000010", 
    2 => "00111101010011000100111100010010", 
    3 => "00111101100000100010011110101011", 
    4 => "10111101001100110011000010001111", 
    5 => "00111110100001000111110001101111", 
    6 => "00111101100101110000001101110001", 
    7 => "10111101001111000110101000001001", 
    8 => "10111101011011010010000101110010", 
    9 => "10111101010011010111111000011010", 
    10 => "10111100111100110111111000001110", 
    11 => "10111100100101111111101001001001", 
    12 => "10111110111001010001001000000011", 
    13 => "00111100111010011000101000001001", 
    14 => "00111110110100010000111111111100", 
    15 => "00111111011101111011001001001000", 
    16 => "00111111011100111110101100110111", 
    17 => "10111100110101011100111111011011", 
    18 => "00111111110110011100001111111100", 
    19 => "10111100101011101000001010111001", 
    20 => "00111111100001010010100101111100", 
    21 => "00111101100001101000110001110010", 
    22 => "10111110001101001101111001011110", 
    23 => "00111100000101010000100001100101", 
    24 => "10111101001100111101111111111110", 
    25 => "00111110100100101010100101101000", 
    26 => "10111100101011011010110110010000", 
    27 => "00111100100000001111110100010110", 
    28 => "10111100110011101011110101010101", 
    29 => "00111110101101100001111101010010", 
    30 => "10111101001000010111011001010111", 
    31 => "10111100110100111110101001010001", 
    32 => "00111100010001100010110010110111", 
    33 => "10111100101111100001000111110000", 
    34 => "10111101010010011001100000011011", 
    35 => "00111010110100010100110111100000", 
    36 => "00111110101011001000101011100100", 
    37 => "10111100110001001000100011110000", 
    38 => "10111100100111010010010110110000", 
    39 => "00111110000000001011101111111001", 
    40 => "00111100111111110000100101100111", 
    41 => "10111101000110010100001001110000", 
    42 => "10111100110110110000001010100000", 
    43 => "10111101010101111001011001011001", 
    44 => "10111101001101001110100010101010", 
    45 => "10111101000011111011110011010011", 
    46 => "10111101001110011111100011011010", 
    47 => "10111100100111110011100011001011", 
    48 => "00111101011110001011000101000101", 
    49 => "10111101000101010101100101010111", 
    50 => "10111111101010011111110110111001", 
    51 => "10111111100010001100100000110100", 
    52 => "10111100101110001001001000011010", 
    53 => "10111100110100111100111100001101", 
    54 => "00111111100011000100111011000111", 
    55 => "10111100011111111010011111001011", 
    56 => "10111101001000010101101110101111", 
    57 => "10111100110101001000100101010001", 
    58 => "10111101001011010001001011110101", 
    59 => "00111100100010010101010111111011", 
    60 => "10111101001011000111011010110000", 
    61 => "10111101001000101011101100111101", 
    62 => "10111100101000111111111101110010", 
    63 => "10111100111111110110000011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_13 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_13_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


