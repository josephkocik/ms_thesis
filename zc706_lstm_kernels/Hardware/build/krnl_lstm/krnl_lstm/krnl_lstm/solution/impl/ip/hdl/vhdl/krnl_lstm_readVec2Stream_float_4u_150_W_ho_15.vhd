-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_15_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110110111000100011011001", 
    1 => "10111101100010111110010100010011", 
    2 => "10111011101101010110111010011110", 
    3 => "10111101100011010100000010101001", 
    4 => "10111101011111111101000001111101", 
    5 => "00111011000001100111110110001110", 
    6 => "10111101011000110000000010000001", 
    7 => "10111101100000011110111000010011", 
    8 => "10111101011001000100011010111000", 
    9 => "10111101011111010101001010010011", 
    10 => "10111101100100011001100011111010", 
    11 => "10111110000110011100010100001111", 
    12 => "00111101110101111011100001100111", 
    13 => "00111110110001010101000100111100", 
    14 => "10111111100010011101101101010011", 
    15 => "10111110011010001100100000110111", 
    16 => "10111110111100110111011011101011", 
    17 => "10111110011001000000100101111011", 
    18 => "00111111001111110101111001000100", 
    19 => "10111100011001010100100100010100", 
    20 => "10111111000001101110111110101111", 
    21 => "10111101100101111100100010011110", 
    22 => "00111101101101111110010101110111", 
    23 => "00111110001111000110000101010001", 
    24 => "10111101100010010111010000010111", 
    25 => "10111110100101100111110101111010", 
    26 => "10111101110000110101100011011000", 
    27 => "00111110100101001100111110111101", 
    28 => "00111100111011000010100001010011", 
    29 => "10111110001100101011110000110111", 
    30 => "10111101011011110011011010001011", 
    31 => "10111110011001000000001110001111", 
    32 => "00111110101010111101011001011001", 
    33 => "10111101100011111100000110000110", 
    34 => "10111101100011000110111001110001", 
    35 => "00111110001001000101010010001001", 
    36 => "10111110100011001111110111101010", 
    37 => "10111101100011100110110101000101", 
    38 => "10111101010111110111111100110010", 
    39 => "00111110101001010100101101101010", 
    40 => "00111111001101001111110000110110", 
    41 => "10111101100010010111010010110100", 
    42 => "10111101010111011000001100010100", 
    43 => "10111101100001011001101110001110", 
    44 => "10111101011100110011011100101010", 
    45 => "10111110000110110100000011110001", 
    46 => "10111101100100110111101100000000", 
    47 => "10111101001100010111011100110100", 
    48 => "10111100101000001001101110101000", 
    49 => "10111100011101110010101010001111", 
    50 => "00111110100101110111101110110010", 
    51 => "00111110010100101110110011100101", 
    52 => "10111101100001100001000011001011", 
    53 => "10111101011110000110011011111110", 
    54 => "10111110001100010111011000101110", 
    55 => "00111011111000010100000011001010", 
    56 => "10111101100001110101110111110000", 
    57 => "00111011110000001101001100110111", 
    58 => "10111101001001110010010110100001", 
    59 => "00111111101011100000101000110001", 
    60 => "10111011001011011110111100111111", 
    61 => "10111100010010100101111101101100", 
    62 => "10111101100010001011111110010011", 
    63 => "10111101100001110101011100110100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_15 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_15_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


