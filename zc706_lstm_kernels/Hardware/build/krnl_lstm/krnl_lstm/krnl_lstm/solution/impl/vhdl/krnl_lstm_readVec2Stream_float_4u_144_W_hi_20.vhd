-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_20_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100110111111111101100", 
    1 => "10111101001111011110010011100000", 
    2 => "10111101000010011011101100011011", 
    3 => "10111100111111100011010000110001", 
    4 => "10111101011101110001011101010001", 
    5 => "10111101010100010101001011011100", 
    6 => "10111101000001011110100001000101", 
    7 => "10111101100100001100011010011111", 
    8 => "10111101011010010000100100001111", 
    9 => "10111101100001111111101010111001", 
    10 => "10111101000101010110010100010101", 
    11 => "10111101000010111100100100100100", 
    12 => "00111100101100111011110111100101", 
    13 => "10111101010000111110010111111111", 
    14 => "10111110100000001111010111110001", 
    15 => "10111101101001100000000111111100", 
    16 => "10111110000000011110100010111111", 
    17 => "10111101000101110100000101011111", 
    18 => "00111111101110000011110011100100", 
    19 => "10111101000111110011101100000110", 
    20 => "10111101100100010011111010001011", 
    21 => "10111101001001000101100110011010", 
    22 => "10111101111110101110101000011110", 
    23 => "10111100111000001110101000011000", 
    24 => "10111101100000010011101000100110", 
    25 => "00111111100011011011011000000101", 
    26 => "10111101000111100100010010111001", 
    27 => "10111101000110001100101110000100", 
    28 => "10111101000111011110011000010000", 
    29 => "10111100101100011000001000000011", 
    30 => "10111101010111000110100101100111", 
    31 => "10111101000101100000111000000110", 
    32 => "10111100001100001111010000110011", 
    33 => "10111101000100011001100000101000", 
    34 => "10111101100001011001011010100101", 
    35 => "10111101010000101100111011011100", 
    36 => "00111010101010100011101110011001", 
    37 => "10111101000100111000111011110001", 
    38 => "10111101001000000101000011110010", 
    39 => "00111100110011100110011001001100", 
    40 => "10111100001111110001111000100110", 
    41 => "10111101011011010010011000001001", 
    42 => "10111101010010010000000000011010", 
    43 => "10111101100010010100001001100111", 
    44 => "10111101011111010110100011001000", 
    45 => "10111101000100000000110000010100", 
    46 => "10111101011111111111111011110111", 
    47 => "10111101010101001101111011101110", 
    48 => "10111101000001001110101100100100", 
    49 => "10111101001001101011000000111010", 
    50 => "10111111100000011101010101010011", 
    51 => "10111111100100010100001000111111", 
    52 => "10111101000111011111100001100011", 
    53 => "10111101100000000001010111111001", 
    54 => "10111101000011101011110000000010", 
    55 => "10111101000110101101011100011000", 
    56 => "10111101011001000000101101011111", 
    57 => "10111101000101100111011110100110", 
    58 => "10111101011101101111100101000010", 
    59 => "10111100010001011110101001111001", 
    60 => "10111101011101111001101011010100", 
    61 => "10111101001100001111101000010111", 
    62 => "10111101000110110101011100001111", 
    63 => "10111101011111111101100001010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_20 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_20_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


