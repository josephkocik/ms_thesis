// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_lstm_krnl_lut_sigmoid42 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] sigmoid_lut109_address0;
reg    sigmoid_lut109_ce0;
wire   [31:0] sigmoid_lut109_q0;
wire   [0:0] or_ln41_fu_131_p2;
reg   [0:0] or_ln41_reg_309;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_97_p2;
reg   [0:0] and_ln41_reg_319;
wire   [0:0] grp_fu_69_p2;
reg   [0:0] tmp_10_reg_326;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln47_fu_142_p2;
reg   [0:0] and_ln47_reg_331;
wire    ap_CS_fsm_state4;
wire   [2:0] select_ln45_2_fu_233_p3;
reg   [2:0] select_ln45_2_reg_336;
wire   [0:0] or_ln45_2_fu_241_p2;
reg   [0:0] or_ln45_2_reg_341;
wire   [0:0] and_ln49_2_fu_259_p2;
reg   [0:0] and_ln49_2_reg_346;
wire    ap_CS_fsm_state5;
wire   [31:0] zext_ln38_fu_294_p1;
reg    ap_block_state1;
reg   [31:0] grp_fu_69_p1;
reg   [0:0] grp_fu_97_p0;
wire   [31:0] bitcast_ln41_fu_102_p1;
wire   [7:0] tmp_fu_105_p4;
wire   [22:0] trunc_ln41_fu_115_p1;
wire   [0:0] icmp_ln41_2_fu_125_p2;
wire   [0:0] icmp_ln41_fu_119_p2;
wire   [0:0] grp_fu_77_p2;
wire   [0:0] grp_fu_82_p2;
wire   [0:0] grp_fu_87_p2;
wire   [0:0] grp_fu_92_p2;
wire   [0:0] and_ln51_fu_152_p2;
wire   [0:0] and_ln53_fu_157_p2;
wire   [0:0] or_ln51_fu_170_p2;
wire   [2:0] select_ln51_fu_162_p3;
wire   [2:0] select_ln51_2_fu_176_p3;
wire   [0:0] and_ln43_fu_138_p2;
wire   [0:0] xor_ln41_fu_191_p2;
wire   [0:0] or_ln43_fu_202_p2;
wire   [0:0] xor_ln43_fu_207_p2;
wire   [0:0] and_ln45_2_fu_213_p2;
wire   [0:0] and_ln43_2_fu_196_p2;
wire   [0:0] or_ln45_fu_227_p2;
wire   [2:0] select_ln45_fu_219_p3;
wire   [2:0] select_ln41_fu_184_p3;
wire   [0:0] or_ln47_fu_247_p2;
wire   [0:0] and_ln49_fu_147_p2;
wire   [0:0] xor_ln47_fu_253_p2;
wire   [0:0] xor_ln45_fu_265_p2;
wire   [0:0] and_ln47_2_fu_270_p2;
wire   [0:0] or_ln49_fu_282_p2;
wire   [2:0] select_ln49_fu_275_p3;
wire   [2:0] lut_i_fu_287_p3;
reg    grp_fu_69_ce;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

krnl_lstm_krnl_lut_sigmoid42_sigmoid_lut109 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sigmoid_lut109_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_lut109_address0),
    .ce0(sigmoid_lut109_ce0),
    .q0(sigmoid_lut109_q0)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U450(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(grp_fu_69_p1),
    .ce(grp_fu_69_ce),
    .opcode(5'd4),
    .dout(grp_fu_69_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U451(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_77_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U452(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1065353216),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_82_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U453(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1073741824),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_87_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U454(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1077936128),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_92_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln41_reg_319 <= grp_fu_97_p2;
        or_ln41_reg_309 <= or_ln41_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln47_reg_331 <= and_ln47_fu_142_p2;
        and_ln49_2_reg_346 <= and_ln49_2_fu_259_p2;
        or_ln45_2_reg_341 <= or_ln45_2_fu_241_p2;
        select_ln45_2_reg_336 <= select_ln45_2_fu_233_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_10_reg_326 <= grp_fu_69_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_69_ce = 1'b0;
    end else begin
        grp_fu_69_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_69_p1 = 32'd3212836864;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_69_p1 = 32'd3221225472;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_69_p1 = 32'd3225419776;
    end else begin
        grp_fu_69_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_97_p0 = or_ln41_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_97_p0 = or_ln41_fu_131_p2;
    end else begin
        grp_fu_97_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sigmoid_lut109_ce0 = 1'b1;
    end else begin
        sigmoid_lut109_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln43_2_fu_196_p2 = (xor_ln41_fu_191_p2 & and_ln43_fu_138_p2);

assign and_ln43_fu_138_p2 = (tmp_10_reg_326 & or_ln41_reg_309);

assign and_ln45_2_fu_213_p2 = (xor_ln43_fu_207_p2 & grp_fu_97_p2);

assign and_ln47_2_fu_270_p2 = (xor_ln45_fu_265_p2 & and_ln47_reg_331);

assign and_ln47_fu_142_p2 = (or_ln41_reg_309 & grp_fu_77_p2);

assign and_ln49_2_fu_259_p2 = (xor_ln47_fu_253_p2 & and_ln49_fu_147_p2);

assign and_ln49_fu_147_p2 = (or_ln41_reg_309 & grp_fu_82_p2);

assign and_ln51_fu_152_p2 = (or_ln41_reg_309 & grp_fu_87_p2);

assign and_ln53_fu_157_p2 = (or_ln41_reg_309 & grp_fu_92_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_return = sigmoid_lut109_q0;

assign bitcast_ln41_fu_102_p1 = p_read;

assign grp_fu_97_p2 = (grp_fu_97_p0 & grp_fu_69_p2);

assign icmp_ln41_2_fu_125_p2 = ((trunc_ln41_fu_115_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_119_p2 = ((tmp_fu_105_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lut_i_fu_287_p3 = ((or_ln49_fu_282_p2[0:0] == 1'b1) ? select_ln49_fu_275_p3 : select_ln45_2_reg_336);

assign or_ln41_fu_131_p2 = (icmp_ln41_fu_119_p2 | icmp_ln41_2_fu_125_p2);

assign or_ln43_fu_202_p2 = (and_ln43_fu_138_p2 | and_ln41_reg_319);

assign or_ln45_2_fu_241_p2 = (or_ln43_fu_202_p2 | grp_fu_97_p2);

assign or_ln45_fu_227_p2 = (and_ln45_2_fu_213_p2 | and_ln43_2_fu_196_p2);

assign or_ln47_fu_247_p2 = (or_ln45_2_fu_241_p2 | and_ln47_fu_142_p2);

assign or_ln49_fu_282_p2 = (and_ln49_2_reg_346 | and_ln47_2_fu_270_p2);

assign or_ln51_fu_170_p2 = (and_ln53_fu_157_p2 | and_ln51_fu_152_p2);

assign select_ln41_fu_184_p3 = ((and_ln41_reg_319[0:0] == 1'b1) ? 3'd0 : select_ln51_2_fu_176_p3);

assign select_ln45_2_fu_233_p3 = ((or_ln45_fu_227_p2[0:0] == 1'b1) ? select_ln45_fu_219_p3 : select_ln41_fu_184_p3);

assign select_ln45_fu_219_p3 = ((and_ln45_2_fu_213_p2[0:0] == 1'b1) ? 3'd2 : 3'd1);

assign select_ln49_fu_275_p3 = ((and_ln49_2_reg_346[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln51_2_fu_176_p3 = ((or_ln51_fu_170_p2[0:0] == 1'b1) ? select_ln51_fu_162_p3 : 3'd7);

assign select_ln51_fu_162_p3 = ((and_ln51_fu_152_p2[0:0] == 1'b1) ? 3'd5 : 3'd6);

assign sigmoid_lut109_address0 = zext_ln38_fu_294_p1;

assign tmp_fu_105_p4 = {{bitcast_ln41_fu_102_p1[30:23]}};

assign trunc_ln41_fu_115_p1 = bitcast_ln41_fu_102_p1[22:0];

assign xor_ln41_fu_191_p2 = (1'd1 ^ and_ln41_reg_319);

assign xor_ln43_fu_207_p2 = (or_ln43_fu_202_p2 ^ 1'd1);

assign xor_ln45_fu_265_p2 = (or_ln45_2_reg_341 ^ 1'd1);

assign xor_ln47_fu_253_p2 = (or_ln47_fu_247_p2 ^ 1'd1);

assign zext_ln38_fu_294_p1 = lut_i_fu_287_p3;

endmodule //krnl_lstm_krnl_lut_sigmoid42
