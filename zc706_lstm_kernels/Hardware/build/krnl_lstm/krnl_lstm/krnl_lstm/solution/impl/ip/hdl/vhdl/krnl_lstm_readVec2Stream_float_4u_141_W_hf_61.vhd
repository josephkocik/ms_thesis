-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_61_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_61_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111011011111100010001", 
    1 => "10111101100011101100001110011001", 
    2 => "10111101100101111000101001111100", 
    3 => "10111101100100101100001001001001", 
    4 => "10111101011110000001100110110011", 
    5 => "10111101101000110111000110100111", 
    6 => "10111101000110000000111100100010", 
    7 => "10111101100001111100110110000111", 
    8 => "10111101011011110101010110011111", 
    9 => "10111101100100101000110010110101", 
    10 => "10111101100010010010000110000101", 
    11 => "10111101011101100011100111101010", 
    12 => "10111101100110000011000000001110", 
    13 => "10111101001111010010010111010011", 
    14 => "10111101100000111110000101111000", 
    15 => "10111101001111100000000011010111", 
    16 => "10111101010111000100011110011111", 
    17 => "10111101100000110000010010100000", 
    18 => "10111101011011010100101011010011", 
    19 => "10111101100001100111101110000010", 
    20 => "10111101011001001111000010110100", 
    21 => "10111101100100000010010000101011", 
    22 => "10111101101011111000111100011101", 
    23 => "10111100111100000010001010101111", 
    24 => "10111101011100101000111100000101", 
    25 => "10111101100011010001100110101011", 
    26 => "10111101100010010110001110000001", 
    27 => "10111101100000101000110000011001", 
    28 => "10111101100001111111001011100111", 
    29 => "00111101011001110100110111111001", 
    30 => "10111101100000111100111111110111", 
    31 => "10111101100000011110100101111110", 
    32 => "10111101001011110011100010111111", 
    33 => "10111101100001011001000010110010", 
    34 => "10111101100100001110010000101001", 
    35 => "10111101100010101010111000000101", 
    36 => "10111100100111100001011110001100", 
    37 => "10111101100001001000110010000011", 
    38 => "10111101100000111101111000101101", 
    39 => "00111100000011110011011000011010", 
    40 => "10111101001011100001010110110101", 
    41 => "10111101100001000110010001100001", 
    42 => "10111101011101101110100110011110", 
    43 => "10111101100100101010010001101010", 
    44 => "10111101100010000001000100110110", 
    45 => "10111101011010000000010010111001", 
    46 => "10111101100100010000000111010010", 
    47 => "10111101100101110100100001011000", 
    48 => "10111101011111000110000101011000", 
    49 => "10111101100010011101000110101101", 
    50 => "10111100111100011100110011011010", 
    51 => "10111101011001111110110001110001", 
    52 => "10111101100001000111000000001011", 
    53 => "10111101100011101100010010011000", 
    54 => "10111101011000100111010101001011", 
    55 => "10111101100000110101110000001111", 
    56 => "10111101100000111001010000101010", 
    57 => "10111101100010110000111110010100", 
    58 => "10111101011101001101111111111010", 
    59 => "10111101000101101001000000100000", 
    60 => "10111101100000000100000111100100", 
    61 => "10111101100010000110000011100110", 
    62 => "10111101011100101101101011101101", 
    63 => "10111101100010001011011101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_61 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_61 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_61_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_61_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_61_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


