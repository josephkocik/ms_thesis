-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_46_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_46_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010000100001111110100", 
    1 => "00111101000000111001111100010101", 
    2 => "00111101001001010101000001110001", 
    3 => "10111101000010110111110110111101", 
    4 => "00111101000000010001011000010001", 
    5 => "10111110111001101101000100001010", 
    6 => "00111101101100000111011111011101", 
    7 => "00111101001001111100001101110111", 
    8 => "10111100111011101101101110011000", 
    9 => "00111101000010000000010000101001", 
    10 => "00111100100111101010101111111000", 
    11 => "00111101001001110110010000001001", 
    12 => "10111101101001000111110110000101", 
    13 => "10111100101100110000100000100001", 
    14 => "00111110111000011011000101100110", 
    15 => "00111100101111001111111000101010", 
    16 => "10111011010101101010011100011111", 
    17 => "00111100110100011010100111100001", 
    18 => "00111100111101001100101111110011", 
    19 => "00111101000101000100010010011001", 
    20 => "00111100101000011100010001101111", 
    21 => "10111101000111100011011100011011", 
    22 => "10111101010001110000011001011101", 
    23 => "00111101000110000101011010000111", 
    24 => "10111100110111101010111101000010", 
    25 => "10111101001001100011101111000001", 
    26 => "00111101000100111100111110110011", 
    27 => "00111101000010110010101001011010", 
    28 => "10111100111110011101101101011100", 
    29 => "00111110101110100011000101111000", 
    30 => "00111101000110011010010101100011", 
    31 => "10111100110001111001001100000110", 
    32 => "00111101000011100110011100110011", 
    33 => "10111100110111010000110111101111", 
    34 => "00111101000011110001010111100101", 
    35 => "10111100100100110000001101100011", 
    36 => "00111110100001010010100001001110", 
    37 => "00111100110011110010110101010100", 
    38 => "10111101000101010111100010000011", 
    39 => "10111100111011000101100101110101", 
    40 => "00111101001001110110001001100001", 
    41 => "10111101000010111001111101101111", 
    42 => "10111100101101100001111101010001", 
    43 => "10111101000110011100101011111010", 
    44 => "00111100110110100101111101111011", 
    45 => "10111100101011010100001000111101", 
    46 => "00111100111011010101010100000111", 
    47 => "10111101000000010010001110110000", 
    48 => "10111101000000111001010101110110", 
    49 => "00111100100111111011011010100111", 
    50 => "00111110100100100110110101000000", 
    51 => "10111101100100011000111010010011", 
    52 => "10111100110011000110011010100001", 
    53 => "00111100111101000100111011110101", 
    54 => "00111101101001000100110000000100", 
    55 => "00111101001001110111111011101001", 
    56 => "00111100110101000011101000010100", 
    57 => "10111100111001110111110000010110", 
    58 => "00111100111111011110000000010100", 
    59 => "00111100111010010101011111001011", 
    60 => "10111101001010011000111001100111", 
    61 => "00111101000100011001110111011101", 
    62 => "10111101000100010010101111100100", 
    63 => "10111101001111110000001111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_46 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_46 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_46_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_46_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_46_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


