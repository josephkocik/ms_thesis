-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_lstm_krnl_lut_tanh46 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    c_ti_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_ti_out_full_n : IN STD_LOGIC;
    c_ti_out_write : OUT STD_LOGIC );
end;


architecture behav of krnl_lstm_krnl_lut_tanh46 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C0400000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000010000000000000000000000";
    constant ap_const_lv32_C0000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tanh_lut_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tanh_lut_ce0 : STD_LOGIC;
    signal tanh_lut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ti_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal or_ln65_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln71_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln71_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln69_1_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln69_1_reg_360 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln69_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_1_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_1_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln62_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln65_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_129_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_139_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln65_1_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_186_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln75_1_fu_200_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln67_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_243_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_fu_208_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln71_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln71_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln69_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln71_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_299_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut_i_fu_311_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_93_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_lstm_krnl_lut_tanh46_tanh_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tanh_lut_U : component krnl_lstm_krnl_lut_tanh46_tanh_lut
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tanh_lut_address0,
        ce0 => tanh_lut_ce0,
        q0 => tanh_lut_q0);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1044 : component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => grp_fu_93_p1,
        ce => grp_fu_93_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_93_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1045 : component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_101_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1046 : component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_106_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1047 : component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => ap_const_lv32_40000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_111_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1048 : component krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => ap_const_lv32_40400000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_116_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((c_ti_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln65_reg_343 <= grp_fu_121_p2;
                or_ln65_reg_333 <= or_ln65_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln71_reg_355 <= and_ln71_fu_166_p2;
                and_ln73_1_reg_370 <= and_ln73_1_fu_283_p2;
                or_ln69_1_reg_365 <= or_ln69_1_fu_265_p2;
                select_ln69_1_reg_360 <= select_ln69_1_fu_257_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_1_reg_350 <= grp_fu_93_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, c_ti_out_full_n, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((c_ti_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln67_1_fu_220_p2 <= (xor_ln65_fu_215_p2 and and_ln67_fu_162_p2);
    and_ln67_fu_162_p2 <= (tmp_1_reg_350 and or_ln65_reg_333);
    and_ln69_1_fu_237_p2 <= (xor_ln67_fu_231_p2 and grp_fu_121_p2);
    and_ln71_1_fu_294_p2 <= (xor_ln69_fu_289_p2 and and_ln71_reg_355);
    and_ln71_fu_166_p2 <= (or_ln65_reg_333 and grp_fu_101_p2);
    and_ln73_1_fu_283_p2 <= (xor_ln71_fu_277_p2 and and_ln73_fu_171_p2);
    and_ln73_fu_171_p2 <= (or_ln65_reg_333 and grp_fu_106_p2);
    and_ln75_fu_176_p2 <= (or_ln65_reg_333 and grp_fu_111_p2);
    and_ln77_fu_181_p2 <= (or_ln65_reg_333 and grp_fu_116_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, c_ti_out_full_n, ap_CS_fsm_state6)
    begin
        if (((c_ti_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(c_ti_out_full_n, ap_CS_fsm_state6)
    begin
        if (((c_ti_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln65_fu_126_p1 <= p_read;

    c_ti_out_blk_n_assign_proc : process(c_ti_out_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_ti_out_blk_n <= c_ti_out_full_n;
        else 
            c_ti_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    c_ti_out_din <= tanh_lut_q0;

    c_ti_out_write_assign_proc : process(c_ti_out_full_n, ap_CS_fsm_state6)
    begin
        if (((c_ti_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c_ti_out_write <= ap_const_logic_1;
        else 
            c_ti_out_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_121_p0_assign_proc : process(or_ln65_fu_155_p2, or_ln65_reg_333, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_121_p0 <= or_ln65_reg_333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_121_p0 <= or_ln65_fu_155_p2;
        else 
            grp_fu_121_p0 <= "X";
        end if; 
    end process;

    grp_fu_121_p2 <= (grp_fu_93_p2 and grp_fu_121_p0);

    grp_fu_93_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_93_ce <= ap_const_logic_0;
        else 
            grp_fu_93_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_93_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p1 <= ap_const_lv32_BF800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_93_p1 <= ap_const_lv32_C0000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_93_p1 <= ap_const_lv32_C0400000;
        else 
            grp_fu_93_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln65_1_fu_149_p2 <= "1" when (trunc_ln65_fu_139_p1 = ap_const_lv23_0) else "0";
    icmp_ln65_fu_143_p2 <= "0" when (tmp_fu_129_p4 = ap_const_lv8_FF) else "1";
    lut_i_fu_311_p3 <= 
        select_ln73_fu_299_p3 when (or_ln73_fu_306_p2(0) = '1') else 
        select_ln69_1_reg_360;
    or_ln65_fu_155_p2 <= (icmp_ln65_fu_143_p2 or icmp_ln65_1_fu_149_p2);
    or_ln67_fu_226_p2 <= (and_ln67_fu_162_p2 or and_ln65_reg_343);
    or_ln69_1_fu_265_p2 <= (or_ln67_fu_226_p2 or grp_fu_121_p2);
    or_ln69_fu_251_p2 <= (and_ln69_1_fu_237_p2 or and_ln67_1_fu_220_p2);
    or_ln71_fu_271_p2 <= (or_ln69_1_fu_265_p2 or and_ln71_fu_166_p2);
    or_ln73_fu_306_p2 <= (and_ln73_1_reg_370 or and_ln71_1_fu_294_p2);
    or_ln75_fu_194_p2 <= (and_ln77_fu_181_p2 or and_ln75_fu_176_p2);
    select_ln65_fu_208_p3 <= 
        ap_const_lv3_0 when (and_ln65_reg_343(0) = '1') else 
        select_ln75_1_fu_200_p3;
    select_ln69_1_fu_257_p3 <= 
        select_ln69_fu_243_p3 when (or_ln69_fu_251_p2(0) = '1') else 
        select_ln65_fu_208_p3;
    select_ln69_fu_243_p3 <= 
        ap_const_lv3_2 when (and_ln69_1_fu_237_p2(0) = '1') else 
        ap_const_lv3_1;
    select_ln73_fu_299_p3 <= 
        ap_const_lv3_4 when (and_ln73_1_reg_370(0) = '1') else 
        ap_const_lv3_3;
    select_ln75_1_fu_200_p3 <= 
        select_ln75_fu_186_p3 when (or_ln75_fu_194_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln75_fu_186_p3 <= 
        ap_const_lv3_5 when (and_ln75_fu_176_p2(0) = '1') else 
        ap_const_lv3_6;
    tanh_lut_address0 <= zext_ln62_fu_318_p1(3 - 1 downto 0);

    tanh_lut_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tanh_lut_ce0 <= ap_const_logic_1;
        else 
            tanh_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_129_p4 <= bitcast_ln65_fu_126_p1(30 downto 23);
    trunc_ln65_fu_139_p1 <= bitcast_ln65_fu_126_p1(23 - 1 downto 0);
    xor_ln65_fu_215_p2 <= (ap_const_lv1_1 xor and_ln65_reg_343);
    xor_ln67_fu_231_p2 <= (or_ln67_fu_226_p2 xor ap_const_lv1_1);
    xor_ln69_fu_289_p2 <= (or_ln69_1_reg_365 xor ap_const_lv1_1);
    xor_ln71_fu_277_p2 <= (or_ln71_fu_271_p2 xor ap_const_lv1_1);
    zext_ln62_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_i_fu_311_p3),32));
end behav;
