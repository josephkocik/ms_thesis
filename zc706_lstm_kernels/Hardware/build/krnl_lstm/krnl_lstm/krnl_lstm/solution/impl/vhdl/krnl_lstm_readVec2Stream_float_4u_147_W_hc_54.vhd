-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_54_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_54_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010001011011110101110", 
    1 => "00111101000000011110111101100101", 
    2 => "00111101001010001100100000110011", 
    3 => "10111101000010101000100110101111", 
    4 => "00111101000111101101110000101010", 
    5 => "10111110010001010111111000001010", 
    6 => "00111101000101011111111011010111", 
    7 => "00111101001110111110111010111011", 
    8 => "10111101000101110111011011100110", 
    9 => "00111101001001010111100111100000", 
    10 => "00111100110011000001000100001001", 
    11 => "00111101001001111011001110100000", 
    12 => "10111101110010100000110100011010", 
    13 => "10111100101010111010101010101001", 
    14 => "00111110010111100100110001001001", 
    15 => "00111101101000100001101110101010", 
    16 => "10111101001111100100111000101100", 
    17 => "00111100110001111100110111110101", 
    18 => "00111100111100100000101111110010", 
    19 => "00111101000011101110101011000100", 
    20 => "00111101001100000010101100101011", 
    21 => "10111101001000110110010001001110", 
    22 => "10111101010101010111100111001001", 
    23 => "00111101000110000110100001100011", 
    24 => "10111101000100011001110101001010", 
    25 => "10111101000110010101001000101100", 
    26 => "00111101000011101000001010010100", 
    27 => "00111101000010101110010110110101", 
    28 => "10111100111010110011100010110010", 
    29 => "00111100010101101110011110001100", 
    30 => "00111101000111000011110110011001", 
    31 => "10111100110000011000010010000111", 
    32 => "00111101000011101101000000001100", 
    33 => "10111100111000100011110110100111", 
    34 => "00111101001010011101111010100011", 
    35 => "10111100100000001011010010101100", 
    36 => "00111100100000010111110011100001", 
    37 => "00111100110111101011110111111101", 
    38 => "10111101000100000111001111100010", 
    39 => "10111101000001111110100101110000", 
    40 => "00111101001001111101001101011001", 
    41 => "10111101001001100000100001100000", 
    42 => "10111100111011010001111000111001", 
    43 => "10111101001100011001100101010001", 
    44 => "00111101000010010000100111010100", 
    45 => "10111100111000110111110101111101", 
    46 => "00111101000100111000111000110100", 
    47 => "10111101000000010000110000001001", 
    48 => "10111101000001000100110110111111", 
    49 => "00111100101000101011101101001110", 
    50 => "00111110001010110100000000101110", 
    51 => "10111101011101100011010000000000", 
    52 => "10111100111011100011101010101111", 
    53 => "00111101000001011011111101110010", 
    54 => "00111101011010011111101101111000", 
    55 => "00111101001001111100000101111011", 
    56 => "00111100111011011100100001011110", 
    57 => "10111100111010000010100101111000", 
    58 => "00111101000110001111011111100111", 
    59 => "00111100111010110111111001000101", 
    60 => "10111101001100111011100011111000", 
    61 => "00111101000100011000010000000101", 
    62 => "10111101000100011000001011101110", 
    63 => "10111101010001110100000100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_54 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_54 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_54_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_54_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_54_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


