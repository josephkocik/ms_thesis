-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_62_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_141_W_hf_62_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111010111010110101111", 
    1 => "00111101101100000100110001101111", 
    2 => "00111101100101111010111011111111", 
    3 => "00111101100100110010101001111000", 
    4 => "00111101011101001001101011101000", 
    5 => "00111101101000110101011010111101", 
    6 => "00111101000101011100110010001100", 
    7 => "00111101100001101000101101011101", 
    8 => "00111101011010111101000111000111", 
    9 => "00111101100100000100000000101110", 
    10 => "00111101100001111111111100001111", 
    11 => "00111101011101100010010000001111", 
    12 => "00111101100110011011001100001110", 
    13 => "00111101001110011010111010111101", 
    14 => "00111101100000111001110001000010", 
    15 => "00111101001111100111010100011110", 
    16 => "00111101010111000111111010101100", 
    17 => "00111101100000100000011001001111", 
    18 => "00111101011001110111011110011111", 
    19 => "00111101100001011011001111111000", 
    20 => "00111101011001010011001101110011", 
    21 => "00111101100100001000110101100110", 
    22 => "00111101101100010011010101101110", 
    23 => "00111100111010110000101110101000", 
    24 => "00111101011011111001010010101001", 
    25 => "00111101100011010101010000011010", 
    26 => "00111101100010001001100011011000", 
    27 => "00111101100000010101001010010000", 
    28 => "00111101100001101111010110001000", 
    29 => "10111101011001101100010110100011", 
    30 => "00111101100001010111110011010100", 
    31 => "00111101100000001110011111001010", 
    32 => "00111101001010101010101101000111", 
    33 => "00111101100001001010110001111101", 
    34 => "00111101100011101010111001111010", 
    35 => "00111101100010110100011101110101", 
    36 => "00111100100111011110010000101010", 
    37 => "00111101100000111000110001101001", 
    38 => "00111101100000110001101001100010", 
    39 => "10111100001001100110111010000010", 
    40 => "00111101001001110110010011100100", 
    41 => "00111101100000110100101101001010", 
    42 => "00111101011100111100100111110001", 
    43 => "00111101100100000110111100011110", 
    44 => "00111101100010000100110101011011", 
    45 => "00111101011001010111000010111111", 
    46 => "00111101100011101011001110100101", 
    47 => "00111101100101000010000100001011", 
    48 => "00111101011111011100010000110001", 
    49 => "00111101100010001000110111100000", 
    50 => "00111100111011100011001010101110", 
    51 => "00111101011001100000001110110101", 
    52 => "00111101100000110110010010011100", 
    53 => "00111101100010110010101010011111", 
    54 => "00111101011000101011101011111101", 
    55 => "00111101100000110000001111111000", 
    56 => "00111101100000110010001011111001", 
    57 => "00111101100010100111001010000110", 
    58 => "00111101011100101100011100100100", 
    59 => "00111101000100001111010001001000", 
    60 => "00111101011111100110110010110000", 
    61 => "00111101100001110001110001101111", 
    62 => "00111101100011011001111110101101", 
    63 => "00111101100001110101001100111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_141_W_hf_62 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_141_W_hf_62 is
    component krnl_lstm_readVec2Stream_float_4u_141_W_hf_62_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_141_W_hf_62_rom_U :  component krnl_lstm_readVec2Stream_float_4u_141_W_hf_62_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


