-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_35_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_35_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010110100101011110011", 
    1 => "00111100110101011100101101001001", 
    2 => "00111101010110010100101001011010", 
    3 => "10111101000101000011101101111001", 
    4 => "00111101000000010010111101101000", 
    5 => "00111110111010111110111011001011", 
    6 => "10111100011001000010010001000111", 
    7 => "00111101000101101000111100111101", 
    8 => "10111100111101000110000011101011", 
    9 => "00111101000001010110010101010010", 
    10 => "00111100010100101000100101101110", 
    11 => "00111101001011001101100100110000", 
    12 => "10111101011000001110111011100011", 
    13 => "10111100101010110101100001100000", 
    14 => "10111110110001110100110011110010", 
    15 => "00111101100101101111110011001100", 
    16 => "10111101101111110111010100010101", 
    17 => "00111100100110110001011001001000", 
    18 => "00111100111010110100000110010100", 
    19 => "00111100111111001111000000110111", 
    20 => "00111101100110010000110011100100", 
    21 => "10111101001111111001101110000010", 
    22 => "10111101110000001011000101111010", 
    23 => "00111101000110000011110100000010", 
    24 => "10111100111011110101011101000010", 
    25 => "10111101000101101110101011100111", 
    26 => "00111101000000000011100011110011", 
    27 => "00111101000001111001000011001001", 
    28 => "10111100110001111010110010011001", 
    29 => "10111110001001011111010100001011", 
    30 => "00111101000111010111000111001001", 
    31 => "10111100100101000110101011001001", 
    32 => "00111101000011111010010100010101", 
    33 => "10111100101000111001000100001001", 
    34 => "00111101000001001100111100011110", 
    35 => "00111101100110000100001110010111", 
    36 => "10111110001000110110111111000110", 
    37 => "00111100101000001100001101000001", 
    38 => "10111101000000010101010100010000", 
    39 => "10111101001001000110001011011100", 
    40 => "00111101001001111101000001111110", 
    41 => "10111101000000100010100010101000", 
    42 => "10111100101101110000100010000001", 
    43 => "10111101000011001010001011110110", 
    44 => "00111100110110011111101001010111", 
    45 => "10111100101010110000110010010001", 
    46 => "00111100111001111000010110101110", 
    47 => "10111100110101010110111111110100", 
    48 => "10111101000110011010111011100110", 
    49 => "10111011101011011101010010111010", 
    50 => "10111110110110000110000110001111", 
    51 => "10111101001000111101001001101100", 
    52 => "10111100101100101001001000111100", 
    53 => "00111100110100000011011110011000", 
    54 => "10111010001100110101100101000000", 
    55 => "00111101001010011110001001011101", 
    56 => "00111100101011100001001111010010", 
    57 => "10111010000110100010101101001000", 
    58 => "00111100111101110111111000001110", 
    59 => "00111100111011111000000111110011", 
    60 => "10111101001000000000000011100000", 
    61 => "00111101000000100101101101011011", 
    62 => "10111101001011010110111101100001", 
    63 => "10111101001101010111101000110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_35 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_35 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_35_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_35_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_35_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


