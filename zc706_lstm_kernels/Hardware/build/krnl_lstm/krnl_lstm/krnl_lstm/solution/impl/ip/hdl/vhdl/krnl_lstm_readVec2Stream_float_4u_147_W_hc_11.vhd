-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_11_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010001010110000100110", 
    1 => "00111101000000110011011010001110", 
    2 => "00111101001010001110111011000110", 
    3 => "10111101000010101010101110111001", 
    4 => "00111101001000000001000001100011", 
    5 => "10111110111011010100111011010000", 
    6 => "00111101101100010001001111011011", 
    7 => "00111101001111100011111000011110", 
    8 => "10111101000110000110110011001001", 
    9 => "00111101001001101101101011101101", 
    10 => "00111100110011011011010111000111", 
    11 => "00111101001001111101110001101010", 
    12 => "10111101101001011000010110110001", 
    13 => "10111100101011100001110011111101", 
    14 => "00111110111000110001111000111010", 
    15 => "00111100101100011101010000001010", 
    16 => "10111010111010100111010001001110", 
    17 => "00111100110011111100010110110001", 
    18 => "00111100111101001000010001101011", 
    19 => "00111101000100100001111111100010", 
    20 => "00111100100110001010010000011100", 
    21 => "10111101001000100011110100111100", 
    22 => "10111101010100011011100011100101", 
    23 => "00111101000110000110100011001011", 
    24 => "10111101000100101000000111000110", 
    25 => "10111101001010000000001010111101", 
    26 => "00111101000100011011011110010000", 
    27 => "00111101000010111100100000111010", 
    28 => "10111100111101000100100111000001", 
    29 => "00111110010110100000001100100100", 
    30 => "00111101000111001001001110010111", 
    31 => "10111100110010001100001101001010", 
    32 => "00111101000011110010100000111100", 
    33 => "10111100111000111101110010001011", 
    34 => "00111101001010111001100011011100", 
    35 => "10111100100001010011011101110110", 
    36 => "00111110011001010101101100100110", 
    37 => "00111100111000001010001011111100", 
    38 => "10111101000100111000000101111110", 
    39 => "10111100111011101001110001011110", 
    40 => "00111101001010001011010100111110", 
    41 => "10111101001001111010101100000000", 
    42 => "10111100111011101001100011010011", 
    43 => "10111101001100110100110110101011", 
    44 => "00111101000010100100111100011000", 
    45 => "10111100111001001110010111111110", 
    46 => "00111101000101001100110011011011", 
    47 => "10111101000000111001001111100001", 
    48 => "10111101000001000111101101011011", 
    49 => "00111100101000111010100110110101", 
    50 => "00111110100100100110110110010010", 
    51 => "10111101100100011000100101101100", 
    52 => "10111100111100000001011010010110", 
    53 => "00111101000010001101011010100110", 
    54 => "00111101101001011111111110101010", 
    55 => "00111101001001111101000011010111", 
    56 => "00111100111100001101011111001000", 
    57 => "10111100111010010011111010111000", 
    58 => "00111101000110111001110000101010", 
    59 => "00111100111010111000010011111100", 
    60 => "10111101001101001001010111101010", 
    61 => "00111101000100011001100001000110", 
    62 => "10111101000100011000011001000011", 
    63 => "10111101010010000100011110000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_11 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_11_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


