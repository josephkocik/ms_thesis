-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_23_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111000010101110111110", 
    1 => "10111101001001110001000100101010", 
    2 => "10111100110111001010000001110110", 
    3 => "10111100101001000011000011001001", 
    4 => "10111101011011110111100100111011", 
    5 => "10111110010000110001000110000000", 
    6 => "10111101111110100101010100101010", 
    7 => "10111101011010110000001101110111", 
    8 => "10111101100001111011000111100001", 
    9 => "10111101011001100101111111011011", 
    10 => "10111101000100100100100100011110", 
    11 => "10111101000101000101010011101100", 
    12 => "10111011111100100011011100100011", 
    13 => "10111101010011001000001111110010", 
    14 => "10111110101101011111000110010001", 
    15 => "10111111011000000001011011011101", 
    16 => "10111111011000110001001111001010", 
    17 => "10111101000110010010110110001110", 
    18 => "10111101011111111001001100111010", 
    19 => "10111101001010100001000111101010", 
    20 => "10111111011100011111001111111010", 
    21 => "10111100001010011010110011110101", 
    22 => "00111101010100010010110011011100", 
    23 => "10111100110110000011000000001000", 
    24 => "10111101010111001010100001010101", 
    25 => "00111101111100010101111010000011", 
    26 => "10111101001001000011101000011011", 
    27 => "10111101001001011100111110001111", 
    28 => "10111101000110010011000101011001", 
    29 => "10111110110100100111000100011110", 
    30 => "10111101010001100010101000111111", 
    31 => "10111101000101100011011001100101", 
    32 => "10111100000000000100000100000111", 
    33 => "10111101000101010011011110111111", 
    34 => "10111101010111111000001000100001", 
    35 => "10111100100010001001000001111111", 
    36 => "10111110110000010001100011000000", 
    37 => "10111101000101001100110001000100", 
    38 => "10111101001010101101001100011000", 
    39 => "10111011100111101001011101001110", 
    40 => "10111100100110000011001011110000", 
    41 => "10111101010011101010111000111000", 
    42 => "10111101000100100010111010111110", 
    43 => "10111101011001101110110010010110", 
    44 => "10111101010111001011110100000001", 
    45 => "10111101001100101010111100001110", 
    46 => "10111101010101100011110110100110", 
    47 => "10111101001100101011000110110010", 
    48 => "10111101010010100010111010101100", 
    49 => "10111101001010010111110010100000", 
    50 => "10111111001110011010011011111010", 
    51 => "10111110010111101111000101001011", 
    52 => "10111101000111001111011010110010", 
    53 => "10111101010011111011001100010011", 
    54 => "10111111011100011111110110111101", 
    55 => "10111101001000110111110110001001", 
    56 => "10111101010010011111111110010010", 
    57 => "10111101000110110000110101110011", 
    58 => "10111101011001001100110010001000", 
    59 => "10111100100110011100000111001101", 
    60 => "10111101011000101110010100111110", 
    61 => "10111101001111000101101010110111", 
    62 => "10111101000001111000001110110000", 
    63 => "10111101001111010111101100111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_23 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_23_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


