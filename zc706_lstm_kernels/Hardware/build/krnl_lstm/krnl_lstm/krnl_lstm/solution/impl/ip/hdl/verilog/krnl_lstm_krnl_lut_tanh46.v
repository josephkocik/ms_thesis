// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_lstm_krnl_lut_tanh46 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        c_ti_out_din,
        c_ti_out_full_n,
        c_ti_out_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [31:0] c_ti_out_din;
input   c_ti_out_full_n;
output   c_ti_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_ti_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] tanh_lut_address0;
reg    tanh_lut_ce0;
wire   [31:0] tanh_lut_q0;
reg    c_ti_out_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] or_ln65_fu_155_p2;
reg   [0:0] or_ln65_reg_333;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_121_p2;
reg   [0:0] and_ln65_reg_343;
wire   [0:0] grp_fu_93_p2;
reg   [0:0] tmp_1_reg_350;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln71_fu_166_p2;
reg   [0:0] and_ln71_reg_355;
wire    ap_CS_fsm_state4;
wire   [2:0] select_ln69_1_fu_257_p3;
reg   [2:0] select_ln69_1_reg_360;
wire   [0:0] or_ln69_1_fu_265_p2;
reg   [0:0] or_ln69_1_reg_365;
wire   [0:0] and_ln73_1_fu_283_p2;
reg   [0:0] and_ln73_1_reg_370;
wire    ap_CS_fsm_state5;
wire   [31:0] zext_ln62_fu_318_p1;
reg    ap_block_state1;
reg   [31:0] grp_fu_93_p1;
reg   [0:0] grp_fu_121_p0;
wire   [31:0] bitcast_ln65_fu_126_p1;
wire   [7:0] tmp_fu_129_p4;
wire   [22:0] trunc_ln65_fu_139_p1;
wire   [0:0] icmp_ln65_1_fu_149_p2;
wire   [0:0] icmp_ln65_fu_143_p2;
wire   [0:0] grp_fu_101_p2;
wire   [0:0] grp_fu_106_p2;
wire   [0:0] grp_fu_111_p2;
wire   [0:0] grp_fu_116_p2;
wire   [0:0] and_ln75_fu_176_p2;
wire   [0:0] and_ln77_fu_181_p2;
wire   [0:0] or_ln75_fu_194_p2;
wire   [2:0] select_ln75_fu_186_p3;
wire   [2:0] select_ln75_1_fu_200_p3;
wire   [0:0] and_ln67_fu_162_p2;
wire   [0:0] xor_ln65_fu_215_p2;
wire   [0:0] or_ln67_fu_226_p2;
wire   [0:0] xor_ln67_fu_231_p2;
wire   [0:0] and_ln69_1_fu_237_p2;
wire   [0:0] and_ln67_1_fu_220_p2;
wire   [0:0] or_ln69_fu_251_p2;
wire   [2:0] select_ln69_fu_243_p3;
wire   [2:0] select_ln65_fu_208_p3;
wire   [0:0] or_ln71_fu_271_p2;
wire   [0:0] and_ln73_fu_171_p2;
wire   [0:0] xor_ln71_fu_277_p2;
wire   [0:0] xor_ln69_fu_289_p2;
wire   [0:0] and_ln71_1_fu_294_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [2:0] select_ln73_fu_299_p3;
wire   [2:0] lut_i_fu_311_p3;
reg    grp_fu_93_ce;
reg   [5:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

krnl_lstm_krnl_lut_tanh46_tanh_lut #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tanh_lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tanh_lut_address0),
    .ce0(tanh_lut_ce0),
    .q0(tanh_lut_q0)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1044(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(grp_fu_93_p1),
    .ce(grp_fu_93_ce),
    .opcode(5'd4),
    .dout(grp_fu_93_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1045(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_101_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1046(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1065353216),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_106_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1047(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1073741824),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_111_p2)
);

krnl_lstm_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1048(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd1077936128),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_116_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((c_ti_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln65_reg_343 <= grp_fu_121_p2;
        or_ln65_reg_333 <= or_ln65_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln71_reg_355 <= and_ln71_fu_166_p2;
        and_ln73_1_reg_370 <= and_ln73_1_fu_283_p2;
        or_ln69_1_reg_365 <= or_ln69_1_fu_265_p2;
        select_ln69_1_reg_360 <= select_ln69_1_fu_257_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_350 <= grp_fu_93_p2;
    end
end

always @ (*) begin
    if (((c_ti_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((c_ti_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_ti_out_blk_n = c_ti_out_full_n;
    end else begin
        c_ti_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((c_ti_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        c_ti_out_write = 1'b1;
    end else begin
        c_ti_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_121_p0 = or_ln65_reg_333;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_121_p0 = or_ln65_fu_155_p2;
    end else begin
        grp_fu_121_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_93_ce = 1'b0;
    end else begin
        grp_fu_93_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p1 = 32'd3212836864;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_93_p1 = 32'd3221225472;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_93_p1 = 32'd3225419776;
    end else begin
        grp_fu_93_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tanh_lut_ce0 = 1'b1;
    end else begin
        tanh_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((c_ti_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln67_1_fu_220_p2 = (xor_ln65_fu_215_p2 & and_ln67_fu_162_p2);

assign and_ln67_fu_162_p2 = (tmp_1_reg_350 & or_ln65_reg_333);

assign and_ln69_1_fu_237_p2 = (xor_ln67_fu_231_p2 & grp_fu_121_p2);

assign and_ln71_1_fu_294_p2 = (xor_ln69_fu_289_p2 & and_ln71_reg_355);

assign and_ln71_fu_166_p2 = (or_ln65_reg_333 & grp_fu_101_p2);

assign and_ln73_1_fu_283_p2 = (xor_ln71_fu_277_p2 & and_ln73_fu_171_p2);

assign and_ln73_fu_171_p2 = (or_ln65_reg_333 & grp_fu_106_p2);

assign and_ln75_fu_176_p2 = (or_ln65_reg_333 & grp_fu_111_p2);

assign and_ln77_fu_181_p2 = (or_ln65_reg_333 & grp_fu_116_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bitcast_ln65_fu_126_p1 = p_read;

assign c_ti_out_din = tanh_lut_q0;

assign grp_fu_121_p2 = (grp_fu_93_p2 & grp_fu_121_p0);

assign icmp_ln65_1_fu_149_p2 = ((trunc_ln65_fu_139_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_143_p2 = ((tmp_fu_129_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lut_i_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? select_ln73_fu_299_p3 : select_ln69_1_reg_360);

assign or_ln65_fu_155_p2 = (icmp_ln65_fu_143_p2 | icmp_ln65_1_fu_149_p2);

assign or_ln67_fu_226_p2 = (and_ln67_fu_162_p2 | and_ln65_reg_343);

assign or_ln69_1_fu_265_p2 = (or_ln67_fu_226_p2 | grp_fu_121_p2);

assign or_ln69_fu_251_p2 = (and_ln69_1_fu_237_p2 | and_ln67_1_fu_220_p2);

assign or_ln71_fu_271_p2 = (or_ln69_1_fu_265_p2 | and_ln71_fu_166_p2);

assign or_ln73_fu_306_p2 = (and_ln73_1_reg_370 | and_ln71_1_fu_294_p2);

assign or_ln75_fu_194_p2 = (and_ln77_fu_181_p2 | and_ln75_fu_176_p2);

assign select_ln65_fu_208_p3 = ((and_ln65_reg_343[0:0] == 1'b1) ? 3'd0 : select_ln75_1_fu_200_p3);

assign select_ln69_1_fu_257_p3 = ((or_ln69_fu_251_p2[0:0] == 1'b1) ? select_ln69_fu_243_p3 : select_ln65_fu_208_p3);

assign select_ln69_fu_243_p3 = ((and_ln69_1_fu_237_p2[0:0] == 1'b1) ? 3'd2 : 3'd1);

assign select_ln73_fu_299_p3 = ((and_ln73_1_reg_370[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln75_1_fu_200_p3 = ((or_ln75_fu_194_p2[0:0] == 1'b1) ? select_ln75_fu_186_p3 : 3'd7);

assign select_ln75_fu_186_p3 = ((and_ln75_fu_176_p2[0:0] == 1'b1) ? 3'd5 : 3'd6);

assign tanh_lut_address0 = zext_ln62_fu_318_p1;

assign tmp_fu_129_p4 = {{bitcast_ln65_fu_126_p1[30:23]}};

assign trunc_ln65_fu_139_p1 = bitcast_ln65_fu_126_p1[22:0];

assign xor_ln65_fu_215_p2 = (1'd1 ^ and_ln65_reg_343);

assign xor_ln67_fu_231_p2 = (or_ln67_fu_226_p2 ^ 1'd1);

assign xor_ln69_fu_289_p2 = (or_ln69_1_reg_365 ^ 1'd1);

assign xor_ln71_fu_277_p2 = (or_ln71_fu_271_p2 ^ 1'd1);

assign zext_ln62_fu_318_p1 = lut_i_fu_311_p3;

endmodule //krnl_lstm_krnl_lut_tanh46
