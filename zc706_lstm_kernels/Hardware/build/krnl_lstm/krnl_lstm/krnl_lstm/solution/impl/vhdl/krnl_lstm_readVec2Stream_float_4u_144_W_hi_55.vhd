-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_55_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_55_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000010101110110000", 
    1 => "10111101010000011110111101011000", 
    2 => "10111101000101010001110001001001", 
    3 => "10111101000001110100111111110101", 
    4 => "10111101011110000111011001110000", 
    5 => "10111110000100101111101000000111", 
    6 => "10111101111101000111011001011101", 
    7 => "10111101100100010001110100110001", 
    8 => "10111101011010100100010110100110", 
    9 => "10111101100010001000010110100111", 
    10 => "10111101000110001000010011011100", 
    11 => "10111101000100011010110110011001", 
    12 => "00111011110000101010011000000101", 
    13 => "10111101010000101101100111110100", 
    14 => "10111110100010111001010100111000", 
    15 => "10111111010101010101111011110001", 
    16 => "10111111010110000110011100000001", 
    17 => "10111101000110001110111001001111", 
    18 => "00111110000111111011100011110110", 
    19 => "10111101001000100101111001100100", 
    20 => "10111111010110000101110101110001", 
    21 => "10111101001010111110101000100010", 
    22 => "00111101001010010000001110011111", 
    23 => "10111100110110110110010011010001", 
    24 => "10111101100000101011100000011000", 
    25 => "10111110010111011010100010111001", 
    26 => "10111101001000000000100011111011", 
    27 => "10111101000111111001101101011010", 
    28 => "10111101001000000000000111001101", 
    29 => "10111110111100001000000110001011", 
    30 => "10111101010111110111000001010100", 
    31 => "10111101000101111101010011100110", 
    32 => "10111011011110111100100011100010", 
    33 => "10111101000101010110011001100110", 
    34 => "10111101100001100011011110110010", 
    35 => "10111101001111001011110100110101", 
    36 => "10111110110000110101100101100010", 
    37 => "10111101000101110101011100011000", 
    38 => "10111101001001001001011001001000", 
    39 => "10111100011001111010001001110100", 
    40 => "10111100011010000101001101010011", 
    41 => "10111101011011111010101101010101", 
    42 => "10111101010010110011010101000001", 
    43 => "10111101100010011100111100010101", 
    44 => "10111101011111011110000010011101", 
    45 => "10111101000100010101011100100010", 
    46 => "10111101100000001010111100110110", 
    47 => "10111101010101110111110010010011", 
    48 => "10111101000010111001000101001010", 
    49 => "10111101001010001100101110100010", 
    50 => "00111100000110110101100111001100", 
    51 => "10111101110111111001100000101001", 
    52 => "10111101001000011100011111011101", 
    53 => "10111101100000001111101010010010", 
    54 => "10111111010011001100111001001001", 
    55 => "10111101000111100010111110111101", 
    56 => "10111101011001101101011010111100", 
    57 => "10111101000111000011110100101100", 
    58 => "10111101011111110111010100000100", 
    59 => "10111100011000000111001001101100", 
    60 => "10111101011110010111101111111111", 
    61 => "10111101001100101001010101011010", 
    62 => "10111101001000011000000010011011", 
    63 => "10111101100000001101111000010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_55 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_55 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_55_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_55_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_55_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


