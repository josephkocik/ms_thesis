-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_34_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_34_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110000001111101000111", 
    1 => "10111101001110001100100111010110", 
    2 => "10111101000100100100110001011110", 
    3 => "10111101000010100101100100101111", 
    4 => "10111101011010010010010000001111", 
    5 => "10111110000100101000011010000101", 
    6 => "10111101111101001000100010101001", 
    7 => "10111101100011000100110010100000", 
    8 => "10111101010100010000011010101100", 
    9 => "10111101011110110010100000010101", 
    10 => "10111101000101110000100000100100", 
    11 => "10111101000100011111011100100001", 
    12 => "00111100011001101010011101011101", 
    13 => "10111101001101011000111110010100", 
    14 => "10111110100011010011000110010110", 
    15 => "10111111010101010100111001001110", 
    16 => "10111111010110000101010000000010", 
    17 => "10111101000101110110100100100110", 
    18 => "00111110000111111010100010110101", 
    19 => "10111101001000011010011110101010", 
    20 => "10111111010110000001111101000001", 
    21 => "10111101000111101010101010011001", 
    22 => "00111101010100101001010110001101", 
    23 => "10111100110110111010000101110011", 
    24 => "10111101010011111110101001101010", 
    25 => "10111110010111100011000110000010", 
    26 => "10111101000111110011100111111101", 
    27 => "10111101000111110101100010111100", 
    28 => "10111101000111011111100001001011", 
    29 => "10111110111001100010000011011001", 
    30 => "10111101010010000001110010101010", 
    31 => "10111101000101011111001001110100", 
    32 => "10111011100000001101011101111111", 
    33 => "10111101000101010100101110100011", 
    34 => "10111101011111011101110101000100", 
    35 => "10111101001100111010000101000100", 
    36 => "10111110101110100010100010001001", 
    37 => "10111101000101000111000111100101", 
    38 => "10111101001000111100000101001101", 
    39 => "10111100011010010010000011101001", 
    40 => "10111100011010011111101010010011", 
    41 => "10111101011001010001101100010100", 
    42 => "10111101001010100010110010010000", 
    43 => "10111101100000110100010110111100", 
    44 => "10111101010011011101001000000001", 
    45 => "10111101000000100010111101111100", 
    46 => "10111101011010001011000101010001", 
    47 => "10111101010001100101001111011011", 
    48 => "10111101000010000000001101110111", 
    49 => "10111101001010001010100001111000", 
    50 => "00111100000110111110001010000000", 
    51 => "10111101110111111000110100110101", 
    52 => "10111101000011111101011101001001", 
    53 => "10111101010111101101000100011101", 
    54 => "10111111010011000111000111111111", 
    55 => "10111101000111011110001111111110", 
    56 => "10111101010001010101101011101100", 
    57 => "10111101000110110111011011101010", 
    58 => "10111101011100100010101110010100", 
    59 => "10111100011000111110110010100001", 
    60 => "10111101011110000001011101100100", 
    61 => "10111101001100101000000100101100", 
    62 => "10111101000110100011101110011100", 
    63 => "10111101011110100011100101111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_34 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_34 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_34_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_34_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_34_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


