-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_41_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_41_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110010100100001101101100", 
    1 => "00111101100011000111110001100100", 
    2 => "10111101001010000000010111100010", 
    3 => "00111101100011111100011010010000", 
    4 => "00111101100000011011001001010111", 
    5 => "10111110001010101001011110111000", 
    6 => "10111110110100111101110110110010", 
    7 => "00111101100001100110010110000011", 
    8 => "00111101011011100111000101011111", 
    9 => "00111101100000010101010010110011", 
    10 => "00111101100010111000111011101110", 
    11 => "10111101001100101101000100010100", 
    12 => "10111110100001101100110011010010", 
    13 => "10111111001100000111000111111110", 
    14 => "10111110100101100011111010111011", 
    15 => "10111110110001111110101110000001", 
    16 => "10111110110000100111001110110110", 
    17 => "10111101000111101000101100001000", 
    18 => "10111110110000100110010111111000", 
    19 => "10111101101011011010000001111011", 
    20 => "10111110101011000001100101000001", 
    21 => "00111101100110000010000010110001", 
    22 => "10111110110000010001110010010001", 
    23 => "10111110110100111101101101000011", 
    24 => "10111100111010100111010000000101", 
    25 => "10111111000110001100101000100001", 
    26 => "10111101010000011111001100100100", 
    27 => "10111110100000100111010111011010", 
    28 => "10111100110000010001011111001011", 
    29 => "10111110011101000010001101001001", 
    30 => "00111101011101100100100010001010", 
    31 => "10111101000110100101010111000011", 
    32 => "10111110110011001111110011100100", 
    33 => "00111101100100010010001011111010", 
    34 => "00111101100011101011101101001000", 
    35 => "10111111000000000100010100001111", 
    36 => "10111110001000001001111010100110", 
    37 => "00111101100100000101011001111001", 
    38 => "10111101111001110010000100010101", 
    39 => "10111110100000101101011001001001", 
    40 => "10111110110110101000011101110110", 
    41 => "00111101100011001010011000001000", 
    42 => "00111101011010100111011100010111", 
    43 => "00111101100000100111011101010110", 
    44 => "00111101011110100101001001100010", 
    45 => "10111101001000011100010110011000", 
    46 => "00111101100011100110110001111100", 
    47 => "00111101001101101000111111100101", 
    48 => "00111100101110111011111111110001", 
    49 => "10111100111110000000011011010101", 
    50 => "10111110110011010001100100111100", 
    51 => "10111110110110010010110011100111", 
    52 => "00111101100010100011100110010111", 
    53 => "00111101100000001011000100110001", 
    54 => "10111110010100010011110000111001", 
    55 => "10111010110001110101110101100110", 
    56 => "00111101100010101001110111011011", 
    57 => "10111100000001001111000100010011", 
    58 => "00111101001011101000100011111100", 
    59 => "10111110100111011101110001000110", 
    60 => "10111100001100110100100011100101", 
    61 => "00111100100010000010000111001111", 
    62 => "00111101100010011000001011110100", 
    63 => "00111101100010101100111111000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_41 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_41 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_41_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_41_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_41_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


