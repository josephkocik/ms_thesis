-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_36_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_36_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010001001001111100011", 
    1 => "00111101000000110001101110011101", 
    2 => "00111101001010010000101000111001", 
    3 => "10111101000010101000001000010011", 
    4 => "00111101001000000000110001010101", 
    5 => "10111110110110000010111001000101", 
    6 => "00111101101010101110111001000010", 
    7 => "00111101001111100011011001011100", 
    8 => "10111101000110000110100101010101", 
    9 => "00111101001001101101100110011001", 
    10 => "00111100110011011000000100010110", 
    11 => "00111101001001111011001000000101", 
    12 => "10111101101011011001000100111001", 
    13 => "10111100101011100011011111100000", 
    14 => "00111110110100101010000111100100", 
    15 => "00111101001011101010100000011100", 
    16 => "10111101000000111000000101011111", 
    17 => "00111100110101011110100111000000", 
    18 => "00111100111100111110011000100011", 
    19 => "00111101000101000101111101010000", 
    20 => "00111101000110000100111100100100", 
    21 => "10111101001000100010110110100001", 
    22 => "10111101010100101001110010010000", 
    23 => "00111101000110000111011001100100", 
    24 => "10111101000100101010010010100101", 
    25 => "10111101000111100000011110100111", 
    26 => "00111101000100111111011001110011", 
    27 => "00111101000010111010110000010100", 
    28 => "10111100111110101111111111000110", 
    29 => "00111101111111010110011001000010", 
    30 => "00111101000111000111110010011000", 
    31 => "10111100110011100100010111111100", 
    32 => "00111101000011110010111110111001", 
    33 => "10111100111000111100010100101010", 
    34 => "00111101001010111001010110010101", 
    35 => "10111100100000000010001010111010", 
    36 => "00111100111100011010011001110110", 
    37 => "00111100111000000111101010000101", 
    38 => "10111101000101011010000100100010", 
    39 => "10111100111011010011111110101111", 
    40 => "00111101001010001011010001111000", 
    41 => "10111101001001111010011111001011", 
    42 => "10111100111011101010101000111110", 
    43 => "10111101001100110100101000110111", 
    44 => "00111101000010100100011010001010", 
    45 => "10111100111001001100100010111001", 
    46 => "00111101000101001100011101011100", 
    47 => "10111101000000110111111010100110", 
    48 => "10111101000001000101111000011101", 
    49 => "00111100101000110111111100101001", 
    50 => "00111110101101101010001001010101", 
    51 => "10111101011000010111001100001110", 
    52 => "10111100111011111110111110000111", 
    53 => "00111101000010001100001001101100", 
    54 => "00111101100111111010000111010100", 
    55 => "00111101001001111101000110111111", 
    56 => "00111100111100001011001010001010", 
    57 => "10111100111010010010011011000101", 
    58 => "00111101000111001110010010111111", 
    59 => "00111100111010110111111101010100", 
    60 => "10111101001101001000110001100100", 
    61 => "00111101000100011001100011111011", 
    62 => "10111101000100010111011110000110", 
    63 => "10111101010010000011101111100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_36 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_36 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_36_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_36_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_36_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


