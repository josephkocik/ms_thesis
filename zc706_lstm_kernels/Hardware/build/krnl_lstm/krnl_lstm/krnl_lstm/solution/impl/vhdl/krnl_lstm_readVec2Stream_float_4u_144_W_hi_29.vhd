-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_29_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_144_W_hi_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101101001101111111110", 
    1 => "10111101010000000100000001001011", 
    2 => "10111101000100100100001001100010", 
    3 => "10111101000001010010001010101101", 
    4 => "10111101011101110011101110111000", 
    5 => "10111110000011010110110000010101", 
    6 => "10111110000111011000101000110110", 
    7 => "10111101100100000000011101101111", 
    8 => "10111101011010001111010011011110", 
    9 => "10111101100001111101100101000000", 
    10 => "10111101000101111011101110000000", 
    11 => "10111101000100000010011011100110", 
    12 => "00110111011011110011011001000000", 
    13 => "10111101010000011010010110010010", 
    14 => "10111110101110010101101001001000", 
    15 => "10111111010010001000000110011110", 
    16 => "10111111010001100010111010010000", 
    17 => "10111101000110000001101111101110", 
    18 => "00111111010110111111110111100100", 
    19 => "10111101001000001101111100011100", 
    20 => "10111111010001001011010001111010", 
    21 => "10111101001010000001110000000110", 
    22 => "00111101000010001010000111111110", 
    23 => "10111100110111001111011101010101", 
    24 => "10111101100000011000100011010110", 
    25 => "00111111000101000100000110100111", 
    26 => "10111101000111101101101101110100", 
    27 => "10111101000111100100100100001111", 
    28 => "10111101000111101110111100100100", 
    29 => "10111110100000010101110000101010", 
    30 => "10111101010111010101011101110111", 
    31 => "10111101000101110000100110001101", 
    32 => "10111011110011101011100001010100", 
    33 => "10111101000101000001010101101110", 
    34 => "10111101100001010111110101011100", 
    35 => "10111101001111010010110000110100", 
    36 => "10111110001111001101011111001111", 
    37 => "10111101000101100000110000011101", 
    38 => "10111101001000101011100010000010", 
    39 => "10111010010001101001100100110011", 
    40 => "10111100011001111110101110010110", 
    41 => "10111101011011100100110111100111", 
    42 => "10111101010010010011110010110100", 
    43 => "10111101100010010001010011110011", 
    44 => "10111101011111000011001000111110", 
    45 => "10111101000100000100100000001110", 
    46 => "10111101011111111111001010001110", 
    47 => "10111101010101001101001100000111", 
    48 => "10111101000010011010000011010001", 
    49 => "10111101001010001001010010110101", 
    50 => "10111110111100000011011000111001", 
    51 => "10111111000101001001110011110100", 
    52 => "10111101001000000110100110001001", 
    53 => "10111101011111110110100111010000", 
    54 => "10111111001110000101111010000011", 
    55 => "10111101000111001010000111111000", 
    56 => "10111101011001010001111001110000", 
    57 => "10111101000110101100000010111101", 
    58 => "10111101011111101000000100000001", 
    59 => "10111100011001001100010010001111", 
    60 => "10111101011101111110101000110010", 
    61 => "10111101001100100111000100011001", 
    62 => "10111101000111110011000110110111", 
    63 => "10111101011111111000010111100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_144_W_hi_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_144_W_hi_29 is
    component krnl_lstm_readVec2Stream_float_4u_144_W_hi_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_144_W_hi_29_rom_U :  component krnl_lstm_readVec2Stream_float_4u_144_W_hi_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


