-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_147_W_hc_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001011011111100001101", 
    1 => "10111100110110100111000101011111", 
    2 => "10111101000100010100010000111100", 
    3 => "00111100111100100001000010011101", 
    4 => "10111101000101100010110011110000", 
    5 => "10111110111011000101000110110101", 
    6 => "00111110010011110111010001111100", 
    7 => "10111101001011000001110100001100", 
    8 => "00111101000100110110010101001011", 
    9 => "10111101000110100100001101101110", 
    10 => "10111100101111101010000011011001", 
    11 => "10111101001000111111010101110000", 
    12 => "00111110000101001101011010111101", 
    13 => "10111101100001010100100100100101", 
    14 => "00111111101011000110011101001000", 
    15 => "10111101100010011010001000010011", 
    16 => "00111101101101000101100111111011", 
    17 => "10111100100110001101011101010010", 
    18 => "10111100111010001110011001110111", 
    19 => "10111100111110000000010001101110", 
    20 => "10111101100011110111000011010010", 
    21 => "00111100100000010110001000100110", 
    22 => "10111010011100111001111110000011", 
    23 => "00111100001011101101010101000000", 
    24 => "00111101000010001010000010000001", 
    25 => "00111100111001111101111011011110", 
    26 => "10111100111101011000111111111011", 
    27 => "10111011001110001110100110100011", 
    28 => "00111100110000010110101010100001", 
    29 => "00111101100100011110100001001000", 
    30 => "10111101000110011001011110100000", 
    31 => "00111100100011111010110010111001", 
    32 => "00111011110101111011010100010000", 
    33 => "00111100101010001111001101111101", 
    34 => "10111101000111010010101010010110", 
    35 => "10111101110000101010001110100001", 
    36 => "00111101111001110111110001100011", 
    37 => "10111100100111100100010110100001", 
    38 => "00111100111110011001000011000100", 
    39 => "10111100001011110001110000110010", 
    40 => "10111010010110010101111111001010", 
    41 => "00111101000101001011101000110010", 
    42 => "00111100110000101100100111001111", 
    43 => "00111101001001011011010000011100", 
    44 => "10111100111010010000000100001011", 
    45 => "00111100110000011111110000100111", 
    46 => "10111101000001000001101010110100", 
    47 => "00111100101110010010000010110100", 
    48 => "00111101000010101001100011001000", 
    49 => "10111100101010000010011111010010", 
    50 => "00111110011110000110011000010001", 
    51 => "10111101110110001001101011000011", 
    52 => "00111100101010110100110010000111", 
    53 => "10111100110000011101010111101001", 
    54 => "00111011011110010011000001101101", 
    55 => "10111101001000111010001001011110", 
    56 => "10111100110000001000101110100000", 
    57 => "00111100111011101111001100111010", 
    58 => "10111101000011101000100011001110", 
    59 => "00111011011101000110000110000010", 
    60 => "00111101001010100001101111001110", 
    61 => "10111101000000000101001010101111", 
    62 => "00111101000100000100111100110101", 
    63 => "00111101001101011110011010010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_147_W_hc_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_147_W_hc_18 is
    component krnl_lstm_readVec2Stream_float_4u_147_W_hc_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_147_W_hc_18_rom_U :  component krnl_lstm_readVec2Stream_float_4u_147_W_hc_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


