-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_10_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110010100010010010001110", 
    1 => "10111101100011001000011011011000", 
    2 => "00111101001010000000001000101110", 
    3 => "10111101100011111100111010110100", 
    4 => "10111101100000011011100110001001", 
    5 => "00111110001010101001011001100100", 
    6 => "00111110110100111101110100101100", 
    7 => "10111101100001100110101101101101", 
    8 => "10111101011011100111101111000110", 
    9 => "10111101100000010101101001000011", 
    10 => "10111101100010111001101010010011", 
    11 => "00111101001100101011000011000100", 
    12 => "00111110100001101100101111000000", 
    13 => "00111111001100000111000111011101", 
    14 => "00111110100101100011111001110010", 
    15 => "00111110110001111110101100001001", 
    16 => "00111110110000100111001010010101", 
    17 => "00111101000111100110101011010010", 
    18 => "00111110110000100110010110011011", 
    19 => "00111101101011011001111000101100", 
    20 => "00111110101011000001011110100011", 
    21 => "10111101100110000010100001001101", 
    22 => "00111110110000010001110000101101", 
    23 => "00111110110100111101101011010011", 
    24 => "00111100111010100101101010001000", 
    25 => "00111111000110001100101101111001", 
    26 => "00111101010000011110000110100010", 
    27 => "00111110100000100111010101010100", 
    28 => "00111100110000010000001010001010", 
    29 => "00111110011101000010001010100001", 
    30 => "10111101011101100100111011011101", 
    31 => "00111101000110100011010011010111", 
    32 => "00111110110011001111110010010010", 
    33 => "10111101100100010011000000101110", 
    34 => "10111101100011101100001101000011", 
    35 => "00111111000000000100010010001001", 
    36 => "00111110001000001001110101101000", 
    37 => "10111101100100000110000001101100", 
    38 => "00111101111001110001100101111011", 
    39 => "00111110100000101101011001110000", 
    40 => "00111110110110101000011110101001", 
    41 => "10111101100011001010110110010101", 
    42 => "10111101011010100111111100111010", 
    43 => "10111101100000101000000011100011", 
    44 => "10111101011110100101101011110100", 
    45 => "00111101001000011010110000111100", 
    46 => "10111101100011100111011011111110", 
    47 => "10111101001101101001001001101010", 
    48 => "10111100101110111101010101111100", 
    49 => "00111100111101111100011100001000", 
    50 => "00111110110011010001100010001110", 
    51 => "00111110110110010010110001000001", 
    52 => "10111101100010100011111110101000", 
    53 => "10111101100000001011010100111100", 
    54 => "00111110010100010011101010011011", 
    55 => "00111010110001100100011000110110", 
    56 => "10111101100010101010010001111100", 
    57 => "00111100000001001101000101110000", 
    58 => "10111101001011101010010111000001", 
    59 => "00111110100111011101110000001110", 
    60 => "00111100001100101110100111101010", 
    61 => "10111100100010000011100001111111", 
    62 => "10111101100010011000110100110101", 
    63 => "10111101100010101101011111010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_10 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_10_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


