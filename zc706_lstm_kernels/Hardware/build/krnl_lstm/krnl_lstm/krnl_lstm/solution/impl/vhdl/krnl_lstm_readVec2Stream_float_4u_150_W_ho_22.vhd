-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of krnl_lstm_readVec2Stream_float_4u_150_W_ho_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100001101000111010011", 
    1 => "00111101110011000010001100010001", 
    2 => "00111101101100010100110110000101", 
    3 => "00111101110011100011110011000001", 
    4 => "00111101110010000010010110110011", 
    5 => "00111110100101000110010100000111", 
    6 => "00111101110110100011111111000101", 
    7 => "00111101110001001000110110000111", 
    8 => "00111101101100110110100100100001", 
    9 => "00111101110010011101110111000100", 
    10 => "00111101110101100011001001010110", 
    11 => "00111110100101100001010010000011", 
    12 => "00111110110000111100101101011111", 
    13 => "10111111011111010010100100000010", 
    14 => "00111111000110000001001111011001", 
    15 => "00111111000110010111001000101001", 
    16 => "00111111010010100011011000000110", 
    17 => "00111110110100011001100010000110", 
    18 => "10111110110100111101100010101100", 
    19 => "00111110001111111011101000111111", 
    20 => "00111111010011011110101011100101", 
    21 => "00111101110011100010001101011000", 
    22 => "00111110110111000110101001001001", 
    23 => "00111101111010100110001101010010", 
    24 => "00111110010011101001111100001100", 
    25 => "10111111100100001110011100101100", 
    26 => "00111110100000001111011011111111", 
    27 => "10111110100101011001110100011010", 
    28 => "00111110001010111101100011111101", 
    29 => "00111110111111010111100010100010", 
    30 => "00111101101100000000100001000101", 
    31 => "00111110110100111001011101110000", 
    32 => "10111110101100100011101100110110", 
    33 => "00111101110010101001110001011011", 
    34 => "00111101110001101000101110110010", 
    35 => "00111110110100100100110101001011", 
    36 => "00111111000001000001000001110001", 
    37 => "00111101110100001111011000011001", 
    38 => "00111110011101101010100001010100", 
    39 => "10111110100100011000010101100010", 
    40 => "10111110111110101001011000101001", 
    41 => "00111101110100001001110000000010", 
    42 => "00111101101011100001011110011100", 
    43 => "00111101101101000010011001011000", 
    44 => "00111101101101001111010101100001", 
    45 => "00111110100101101011101111000100", 
    46 => "00111101110001111011101110110101", 
    47 => "00111101101000011010011100000110", 
    48 => "00111101111110000101000101011110", 
    49 => "00111101111100000100110000101111", 
    50 => "10111101111010010100000111100110", 
    51 => "10111101101010111000110111000000", 
    52 => "00111101110001000101111001010011", 
    53 => "00111101101101111001110000110011", 
    54 => "00111111000100111110100000110101", 
    55 => "00111110000001100101111100101111", 
    56 => "00111101110010100000110010100010", 
    57 => "00111101100101011011110110100100", 
    58 => "00111110000010111100010010110101", 
    59 => "10111110101010000010001000100000", 
    60 => "00111100110100011001001011001011", 
    61 => "00111101101101011110111010100110", 
    62 => "00111101110010100111110010100111", 
    63 => "00111101110001110101100110101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity krnl_lstm_readVec2Stream_float_4u_150_W_ho_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of krnl_lstm_readVec2Stream_float_4u_150_W_ho_22 is
    component krnl_lstm_readVec2Stream_float_4u_150_W_ho_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    krnl_lstm_readVec2Stream_float_4u_150_W_ho_22_rom_U :  component krnl_lstm_readVec2Stream_float_4u_150_W_ho_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


